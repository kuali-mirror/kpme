--
-- Copyright 2004-2013 The Kuali Foundation
--
-- Licensed under the Educational Community License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.opensource.org/licenses/ecl2.php
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.
--

-- 
-- 2010-04-15.sql
-- 


ALTER TABLE KRNS_SESN_DOC_T ADD (OBJ_ID VARCHAR2(36))
/
ALTER TABLE KRNS_SESN_DOC_T ADD (VER_NBR NUMBER(8) DEFAULT 0)
/





-- 
-- 2010-05-03.sql
-- 


ALTER TABLE KRIM_PND_GRP_ATTR_DATA_T ADD (ACTV_IND VARCHAR2(1) DEFAULT 'Y'
                                        , EDIT_FLAG VARCHAR2(1) DEFAULT 'N')
/




-- 
-- 2010-05-12.sql
-- 


ALTER TABLE KREN_CHNL_SUBSCRP_T ADD OBJ_ID VARCHAR2(36)
/
ALTER TABLE KREN_CNTNT_TYP_T ADD OBJ_ID VARCHAR2(36) 
/
ALTER TABLE KREN_CHNL_T ADD OBJ_ID VARCHAR2(36) 
/
ALTER TABLE KREN_NTFCTN_MSG_DELIV_T ADD OBJ_ID VARCHAR2(36) 
/
ALTER TABLE KREN_NTFCTN_T ADD OBJ_ID VARCHAR2(36) 
/
ALTER TABLE KREN_PRIO_T ADD OBJ_ID VARCHAR2(36) 
/
ALTER TABLE KREN_PRODCR_T ADD OBJ_ID VARCHAR2(36) 
/
ALTER TABLE KREN_RECIP_LIST_T ADD OBJ_ID VARCHAR2(36)
/
ALTER TABLE KREN_SNDR_T ADD OBJ_ID VARCHAR2(36)
/
ALTER TABLE KREN_RECIP_T ADD OBJ_ID VARCHAR2(36) 
/
ALTER TABLE KREN_RVWER_T ADD OBJ_ID VARCHAR2(36) 
/
ALTER TABLE KREN_CHNL_SUBSCRP_T ADD VER_NBR NUMBER(8)
/
ALTER TABLE KREN_RECIP_LIST_T ADD VER_NBR NUMBER(8)
/
ALTER TABLE KREN_SNDR_T ADD VER_NBR NUMBER(8)
/
ALTER TABLE KREN_RECIP_T ADD VER_NBR NUMBER(8)
/




-- 
-- 2011-03-23.sql
-- 


UPDATE KREW_DOC_TYP_T SET POST_PRCSR='org.kuali.rice.edl.framework.workflow.EDocLitePostProcessor'
WHERE POST_PRCSR='org.kuali.rice.kew.edl.EDocLitePostProcessor'
/

UPDATE KREW_DOC_TYP_T SET POST_PRCSR='org.kuali.rice.edl.framework.workflow.EDocLiteDatabasePostProcessor'
WHERE POST_PRCSR='org.kuali.rice.kew.edl.EDLDatabasePostProcessor'
/

UPDATE KREW_DOC_TYP_T SET PARNT_ID='2681' WHERE DOC_TYP_NM='TravelAccountMaintenanceDocument'
/
UPDATE KREW_DOC_TYP_T SET PARNT_ID='2681' WHERE DOC_TYP_NM='FiscalOfficerMaintenanceDocument'
/
UPDATE KREW_DOC_TYP_T SET PARNT_ID='2681' WHERE DOC_TYP_NM='TravelRequest'
/





-- 
-- 2011-04-28.sql
-- 


--
-- KULRICE-4794
-- The following statements will change the DOC_HDR_ID from a decimal to a VARCHAR(40) on various tables. 
--
-- NOTE:  If a table is empty, one statement can be used to convert the DOC_HDR_ID as follows:
-- ALTER TABLE TABLE_NAME_HERE MODIFY (DOC_HDR_ID VARCHAR2(40))
--

--
-- KREW_ACTN_ITM_T 
--

ALTER TABLE KREW_ACTN_ITM_T RENAME TO OLD_KREW_ACTN_ITM_T
/
CREATE TABLE KREW_ACTN_ITM_T ( 
    ACTN_ITM_ID     NUMBER(14,0),
    PRNCPL_ID       VARCHAR2(40) NOT NULL,
    ASND_DT         DATE NOT NULL,
    RQST_CD         CHAR(1) NOT NULL,
    ACTN_RQST_ID    NUMBER(14,0) NOT NULL,
    DOC_HDR_ID      VARCHAR2(40) NOT NULL,
    ROLE_NM         VARCHAR2(2000) NULL,
    DLGN_PRNCPL_ID  VARCHAR2(40) NULL,
    DOC_HDR_TTL     VARCHAR2(255) NULL,
    DOC_TYP_LBL     VARCHAR2(128) NOT NULL,
    DOC_HDLR_URL    VARCHAR2(255) NOT NULL,
    DOC_TYP_NM      VARCHAR2(64) NOT NULL,
    RSP_ID          NUMBER(14,0) NOT NULL,
    DLGN_TYP        VARCHAR2(1) NULL,
    VER_NBR         NUMBER(8,0) DEFAULT 0 NULL,
    DTYPE           VARCHAR2(50) NULL,
    GRP_ID          VARCHAR2(40) NULL,
    DLGN_GRP_ID     VARCHAR2(40) NULL,
    RQST_LBL        VARCHAR2(255) NULL
)
/
INSERT INTO KREW_ACTN_ITM_T SELECT * FROM OLD_KREW_ACTN_ITM_T
/
DROP TABLE OLD_KREW_ACTN_ITM_T
/
ALTER TABLE KREW_ACTN_ITM_T ADD CONSTRAINT KREW_ACTN_ITM_TP1 PRIMARY KEY (ACTN_ITM_ID)
/
CREATE INDEX KREW_ACTN_ITM_TI1 ON KREW_ACTN_ITM_T(PRNCPL_ID)
/
CREATE INDEX KREW_ACTN_ITM_TI2 ON KREW_ACTN_ITM_T(DOC_HDR_ID)
/
CREATE INDEX KREW_ACTN_ITM_TI3 ON KREW_ACTN_ITM_T(ACTN_RQST_ID)
/
CREATE INDEX KREW_ACTN_ITM_TI5 ON KREW_ACTN_ITM_T(PRNCPL_ID, DLGN_TYP, DOC_HDR_ID)
/

--
-- KREW_ACTN_RQST_T 
-- Depending on the size of the table, this conversion can take a long time.  Example - takes 90 minutes for 38 million rows. 
--

ALTER TABLE KREW_ACTN_RQST_T RENAME TO OLD_KREW_ACTN_RQST_T
/
CREATE TABLE KREW_ACTN_RQST_T ( 
    ACTN_RQST_ID            NUMBER(14,0),
    PARNT_ID                NUMBER(14,0) NULL,
    ACTN_RQST_CD            CHAR(1) NOT NULL,
    DOC_HDR_ID              VARCHAR2(40) NOT NULL,
    RULE_ID                 NUMBER(19,0) NULL,
    STAT_CD                 CHAR(1) NOT NULL,
    RSP_ID                  NUMBER(14,0) NOT NULL,
    PRNCPL_ID               VARCHAR2(40) NULL,
    ROLE_NM                 VARCHAR2(2000) NULL,
    QUAL_ROLE_NM            VARCHAR2(2000) NULL,
    QUAL_ROLE_NM_LBL_TXT    VARCHAR2(2000) NULL,
    RECIP_TYP_CD            CHAR(1) NULL,
    PRIO_NBR                NUMBER(8,0) NOT NULL,
    RTE_TYP_NM              VARCHAR2(255) NULL,
    RTE_LVL_NBR             NUMBER(8,0) NOT NULL,
    RTE_NODE_INSTN_ID       NUMBER(19,0) NULL,
    ACTN_TKN_ID             NUMBER(14,0) NULL,
    DOC_VER_NBR             NUMBER(8,0) NOT NULL,
    CRTE_DT                 DATE NOT NULL,
    RSP_DESC_TXT            VARCHAR2(200) NULL,
    FRC_ACTN                NUMBER(1,0) DEFAULT 0,
    ACTN_RQST_ANNOTN_TXT    VARCHAR2(2000) NULL,
    DLGN_TYP                CHAR(1) NULL,
    APPR_PLCY               CHAR(1) NULL,
    CUR_IND                 NUMBER(1,0) DEFAULT 1,
    VER_NBR                 NUMBER(8,0) DEFAULT 0,
    GRP_ID                  VARCHAR2(40) NULL,
    RQST_LBL                VARCHAR2(255) NULL
)
/
INSERT INTO KREW_ACTN_RQST_T SELECT * FROM OLD_KREW_ACTN_RQST_T
/
DROP TABLE OLD_KREW_ACTN_RQST_T
/
ALTER TABLE KREW_ACTN_RQST_T ADD CONSTRAINT KREW_ACTN_RQST_TP1 PRIMARY KEY (ACTN_RQST_ID)
/
CREATE INDEX KREW_ACTN_RQST_T11 ON KREW_ACTN_RQST_T(DOC_HDR_ID)
/
CREATE INDEX KREW_ACTN_RQST_T12 ON KREW_ACTN_RQST_T(PRNCPL_ID)
/
CREATE INDEX KREW_ACTN_RQST_T13 ON KREW_ACTN_RQST_T(ACTN_TKN_ID)
/
CREATE INDEX KREW_ACTN_RQST_T14 ON KREW_ACTN_RQST_T(PARNT_ID)
/
CREATE INDEX KREW_ACTN_RQST_T15 ON KREW_ACTN_RQST_T(RSP_ID)
/
CREATE INDEX KREW_ACTN_RQST_T16 ON KREW_ACTN_RQST_T(STAT_CD, RSP_ID)
/
CREATE INDEX KREW_ACTN_RQST_T17 ON KREW_ACTN_RQST_T(RTE_NODE_INSTN_ID)
/
CREATE INDEX KREW_ACTN_RQST_T19 ON KREW_ACTN_RQST_T(STAT_CD, DOC_HDR_ID)
/

--
-- KREW_ACTN_TKN_T 
-- Depending on the size of the table, this conversion can take a long time.  Example - takes 10 minutes for 18 million rows. 
--

ALTER TABLE KREW_ACTN_TKN_T RENAME TO OLD_KREW_ACTN_TKN_T
/
CREATE TABLE KREW_ACTN_TKN_T ( 
    ACTN_TKN_ID     NUMBER(14,0),
    DOC_HDR_ID      VARCHAR2(40) NOT NULL,
    PRNCPL_ID       VARCHAR2(40) NOT NULL,
    DLGTR_PRNCPL_ID VARCHAR2(40),
    ACTN_CD         CHAR(1) NOT NULL,
    ACTN_DT         DATE NOT NULL,
    DOC_VER_NBR     NUMBER(8,0) NOT NULL,
    ANNOTN          VARCHAR2(2000),
    CUR_IND         NUMBER(1,0) DEFAULT 1,
    VER_NBR         NUMBER(8,0) DEFAULT 0,
    DLGTR_GRP_ID    VARCHAR2(40)
)
/
INSERT INTO KREW_ACTN_TKN_T SELECT * FROM OLD_KREW_ACTN_TKN_T
/
DROP TABLE OLD_KREW_ACTN_TKN_T
/
ALTER TABLE KREW_ACTN_TKN_T ADD CONSTRAINT KREW_ACTN_TKN_TP1 PRIMARY KEY (ACTN_TKN_ID)
/
CREATE INDEX KREW_ACTN_TKN_TI1 ON KREW_ACTN_TKN_T(DOC_HDR_ID, PRNCPL_ID)
/
CREATE INDEX KREW_ACTN_TKN_TI2 ON KREW_ACTN_TKN_T(DOC_HDR_ID, PRNCPL_ID, ACTN_CD)
/
CREATE INDEX KREW_ACTN_TKN_TI3 ON KREW_ACTN_TKN_T(PRNCPL_ID)
/
CREATE INDEX KREW_ACTN_TKN_TI4 ON KREW_ACTN_TKN_T(DLGTR_PRNCPL_ID)
/
CREATE INDEX KREW_ACTN_TKN_TI5 ON KREW_ACTN_TKN_T(DOC_HDR_ID)
/

--
-- KREW_APP_DOC_STAT_TRAN_T 
--

ALTER TABLE KREW_APP_DOC_STAT_TRAN_T RENAME TO OLD_KREW_APP_DOC_STAT_TRAN_T
/
CREATE TABLE KREW_APP_DOC_STAT_TRAN_T
(
      APP_DOC_STAT_TRAN_ID NUMBER(19),
      DOC_HDR_ID VARCHAR2(40),
      APP_DOC_STAT_FROM VARCHAR2(64),
      APP_DOC_STAT_TO VARCHAR2(64),
      STAT_TRANS_DATE DATE,
      VER_NBR NUMBER(8) default 0,
      OBJ_ID VARCHAR2(36) NOT NULL
)
/
INSERT INTO KREW_APP_DOC_STAT_TRAN_T SELECT * FROM OLD_KREW_APP_DOC_STAT_TRAN_T
/
DROP TABLE OLD_KREW_APP_DOC_STAT_TRAN_T
/
ALTER TABLE KREW_APP_DOC_STAT_TRAN_T ADD CONSTRAINT KREW_APP_DOC_STAT_TRAN_TP1 PRIMARY KEY(APP_DOC_STAT_TRAN_ID)
/
ALTER TABLE KREW_APP_DOC_STAT_TRAN_T ADD CONSTRAINT KREW_APP_DOC_STAT_TRAN_TC0 UNIQUE (OBJ_ID)
/
CREATE INDEX KREW_APP_DOC_STAT_TI1 ON KREW_APP_DOC_STAT_TRAN_T (DOC_HDR_ID, STAT_TRANS_DATE)
/
CREATE INDEX KREW_APP_DOC_STAT_TI2 ON KREW_APP_DOC_STAT_TRAN_T (DOC_HDR_ID, APP_DOC_STAT_FROM)
/
CREATE INDEX KREW_APP_DOC_STAT_TI3 ON KREW_APP_DOC_STAT_TRAN_T (DOC_HDR_ID, APP_DOC_STAT_TO)
/

--
-- KREW_DOC_HDR_CNTNT_T 
-- Depending on the size of the table, this conversion can take a long time.  Example - takes 45 minutes for 8 million rows 
-- 

ALTER TABLE KREW_DOC_HDR_CNTNT_T RENAME TO OLD_KREW_DOC_HDR_CNTNT_T
/
CREATE TABLE KREW_DOC_HDR_CNTNT_T ( 
    DOC_HDR_ID      VARCHAR2(40),
    DOC_CNTNT_TXT   CLOB NULL
)
/
INSERT INTO KREW_DOC_HDR_CNTNT_T SELECT * FROM OLD_KREW_DOC_HDR_CNTNT_T
/
DROP TABLE OLD_KREW_DOC_HDR_CNTNT_T
/
ALTER TABLE KREW_DOC_HDR_CNTNT_T ADD CONSTRAINT KREW_DOC_HDR_CNTNT_TP1 PRIMARY KEY (DOC_HDR_ID)
/

--
-- KREW_DOC_HDR_EXT_DT_T 
-- 

ALTER TABLE KREW_DOC_HDR_EXT_DT_T RENAME TO OLD_KREW_DOC_HDR_EXT_DT_T
/
CREATE TABLE KREW_DOC_HDR_EXT_DT_T ( 
    DOC_HDR_EXT_DT_ID   NUMBER(19,0),
    DOC_HDR_ID          VARCHAR2(40) NOT NULL,
    KEY_CD              VARCHAR2(256) NOT NULL,
    VAL                 DATE NULL
)
/
INSERT INTO KREW_DOC_HDR_EXT_DT_T SELECT * FROM OLD_KREW_DOC_HDR_EXT_DT_T
/
DROP TABLE OLD_KREW_DOC_HDR_EXT_DT_T
/
ALTER TABLE KREW_DOC_HDR_EXT_DT_T ADD CONSTRAINT KREW_DOC_HDR_EXT_DT_TP1 PRIMARY KEY (DOC_HDR_EXT_DT_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_DT_TI1 ON KREW_DOC_HDR_EXT_DT_T(KEY_CD, VAL)
/
CREATE INDEX KREW_DOC_HDR_EXT_DT_TI2 ON KREW_DOC_HDR_EXT_DT_T(DOC_HDR_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_DT_TI3 ON KREW_DOC_HDR_EXT_DT_T(VAL)
/

--
-- KREW_DOC_HDR_EXT_LONG_T 
-- 

ALTER TABLE KREW_DOC_HDR_EXT_LONG_T RENAME TO OLD_KREW_DOC_HDR_EXT_LONG_T
/
CREATE TABLE KREW_DOC_HDR_EXT_LONG_T ( 
    DOC_HDR_EXT_LONG_ID NUMBER(19,0),
    DOC_HDR_ID          VARCHAR2(40) NOT NULL,
    KEY_CD              VARCHAR2(256) NOT NULL,
    VAL                 NUMBER(22,0) NULL
)
/
INSERT INTO KREW_DOC_HDR_EXT_LONG_T SELECT * FROM OLD_KREW_DOC_HDR_EXT_LONG_T
/
DROP TABLE OLD_KREW_DOC_HDR_EXT_LONG_T
/
ALTER TABLE KREW_DOC_HDR_EXT_LONG_T ADD CONSTRAINT KREW_DOC_HDR_EXT_LONG_TP1 PRIMARY KEY (DOC_HDR_EXT_LONG_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_LONG_TI1 ON KREW_DOC_HDR_EXT_LONG_T(KEY_CD, VAL)
/
CREATE INDEX KREW_DOC_HDR_EXT_LONG_TI2 ON KREW_DOC_HDR_EXT_LONG_T(DOC_HDR_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_LONG_TI3 ON KREW_DOC_HDR_EXT_LONG_T(VAL)
/

--
-- KREW_DOC_HDR_EXT_FLT_T 
-- 

ALTER TABLE KREW_DOC_HDR_EXT_FLT_T RENAME TO OLD_KREW_DOC_HDR_EXT_FLT_T
/
CREATE TABLE KREW_DOC_HDR_EXT_FLT_T ( 
    DOC_HDR_EXT_FLT_ID  NUMBER(19,0),
    DOC_HDR_ID          VARCHAR2(40) NOT NULL,
    KEY_CD              VARCHAR2(256) NOT NULL,
    VAL                 NUMBER(30,15) NULL
)
/
INSERT INTO KREW_DOC_HDR_EXT_FLT_T SELECT * FROM OLD_KREW_DOC_HDR_EXT_FLT_T
/
DROP TABLE OLD_KREW_DOC_HDR_EXT_FLT_T
/
ALTER TABLE KREW_DOC_HDR_EXT_FLT_T ADD CONSTRAINT KREW_DOC_HDR_EXT_FLT_TP1 PRIMARY KEY (DOC_HDR_EXT_FLT_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_FLT_TI1 ON KREW_DOC_HDR_EXT_FLT_T(KEY_CD, VAL)
/
CREATE INDEX KREW_DOC_HDR_EXT_FLT_TI2 ON KREW_DOC_HDR_EXT_FLT_T(DOC_HDR_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_FLT_TI3 ON KREW_DOC_HDR_EXT_FLT_T(VAL)
/

--
-- KREW_DOC_HDR_EXT_T 
-- 

ALTER TABLE KREW_DOC_HDR_EXT_T RENAME TO OLD_KREW_DOC_HDR_EXT_T
/
CREATE TABLE KREW_DOC_HDR_EXT_T ( 
    DOC_HDR_EXT_ID  NUMBER(19,0),
    DOC_HDR_ID      VARCHAR2(40) NOT NULL,
    KEY_CD          VARCHAR2(256) NOT NULL,
    VAL             VARCHAR2(2000)
)
/
INSERT INTO KREW_DOC_HDR_EXT_T SELECT * FROM OLD_KREW_DOC_HDR_EXT_T
/
DROP TABLE OLD_KREW_DOC_HDR_EXT_T
/
ALTER TABLE KREW_DOC_HDR_EXT_T ADD CONSTRAINT KREW_DOC_HDR_EXT_TP1 PRIMARY KEY (DOC_HDR_EXT_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_TI1 ON KREW_DOC_HDR_EXT_T(KEY_CD, VAL)
/
CREATE INDEX KREW_DOC_HDR_EXT_TI2 ON KREW_DOC_HDR_EXT_T(DOC_HDR_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_TI3 ON KREW_DOC_HDR_EXT_T(VAL)
/

--
-- KREW_DOC_HDR_T 
-- This SQL works in such a way that the column does not change positions in the table.
-- Done this way to limit disruption to existing indexes.
--

ALTER TABLE KREW_DOC_HDR_T ADD DOC_HDR_ID_TEMP VARCHAR2(40)
/
UPDATE KREW_DOC_HDR_T SET DOC_HDR_ID_TEMP = DOC_HDR_ID
/
ALTER TABLE KREW_DOC_HDR_T DROP CONSTRAINT KREW_DOC_HDR_TP1
/
UPDATE KREW_DOC_HDR_T SET DOC_HDR_ID = NULL
/
ALTER TABLE KREW_DOC_HDR_T MODIFY (DOC_HDR_ID VARCHAR2(40))
/
UPDATE KREW_DOC_HDR_T SET DOC_HDR_ID = DOC_HDR_ID_TEMP
/
ALTER TABLE KREW_DOC_HDR_T ADD CONSTRAINT KREW_DOC_HDR_TP1 PRIMARY KEY (DOC_HDR_ID)
/
ALTER TABLE KREW_DOC_HDR_T DROP COLUMN DOC_HDR_ID_TEMP
/

--
-- KREW_DOC_NTE_T 
--

ALTER TABLE KREW_DOC_NTE_T RENAME TO OLD_KREW_DOC_NTE_T
/
CREATE TABLE KREW_DOC_NTE_T ( 
    DOC_NTE_ID      NUMBER(19,0),
    DOC_HDR_ID      VARCHAR2(40) NOT NULL,
    AUTH_PRNCPL_ID  VARCHAR2(40) NOT NULL,
    CRT_DT          DATE NOT NULL,
    TXT             VARCHAR2(4000) NULL,
    VER_NBR         NUMBER(8,0) DEFAULT 0 NULL
)
/
INSERT INTO KREW_DOC_NTE_T SELECT * FROM OLD_KREW_DOC_NTE_T
/
DROP TABLE OLD_KREW_DOC_NTE_T
/
ALTER TABLE KREW_DOC_NTE_T ADD CONSTRAINT KREW_DOC_NTE_TP1 PRIMARY KEY (DOC_NTE_ID)
/
CREATE INDEX KREW_DOC_NTE_TI1 ON KREW_DOC_NTE_T (DOC_HDR_ID)
/

--
-- KREW_DOC_TYP_T 
-- After this conversion, the doc_hdr_id column will be at the end of the table. 
-- Done this way to limit disruption to existing indexes.
--

ALTER TABLE KREW_DOC_TYP_T RENAME COLUMN DOC_HDR_ID TO DOC_HDR_ID_OLD
/
ALTER TABLE KREW_DOC_TYP_T ADD DOC_HDR_ID VARCHAR2(40)
/
UPDATE KREW_DOC_TYP_T SET DOC_HDR_ID = DOC_HDR_ID_OLD
/
ALTER TABLE KREW_DOC_TYP_T DROP COLUMN DOC_HDR_ID_OLD
/

--
-- KREW_EDL_DMP_T 
-- 

ALTER TABLE KREW_EDL_DMP_T RENAME TO OLD_KREW_EDL_DMP_T
/
CREATE TABLE KREW_EDL_DMP_T ( 
    DOC_HDR_ID              VARCHAR2(40),
    DOC_TYP_NM              VARCHAR2(64) NOT NULL,
    DOC_HDR_STAT_CD         CHAR(1) NOT NULL,
    DOC_HDR_MDFN_DT         DATE NOT NULL,
    DOC_HDR_CRTE_DT         DATE NOT NULL,
    DOC_HDR_TTL             VARCHAR2(255) NULL,
    DOC_HDR_INITR_PRNCPL_ID VARCHAR2(40) NOT NULL,
    CRNT_NODE_NM            VARCHAR2(30) NOT NULL,
    VER_NBR                 NUMBER(8,0) DEFAULT 0 NULL
)
/
INSERT INTO KREW_EDL_DMP_T SELECT * FROM OLD_KREW_EDL_DMP_T
/
DROP TABLE OLD_KREW_EDL_DMP_T
/
ALTER TABLE KREW_EDL_DMP_T ADD CONSTRAINT KREW_EDL_DMP_TP1 PRIMARY KEY (DOC_HDR_ID)
/
CREATE INDEX KREW_EDL_DMP_TI1 ON KREW_EDL_DMP_T(DOC_TYP_NM, DOC_HDR_ID)
/

--
-- KREW_EDL_FLD_DMP_T 
--

ALTER TABLE KREW_EDL_FLD_DMP_T RENAME TO OLD_KREW_EDL_FLD_DMP_T
/
CREATE TABLE KREW_EDL_FLD_DMP_T ( 
    EDL_FIELD_DMP_ID    NUMBER(14,0),
    DOC_HDR_ID          VARCHAR2(40) NOT NULL,
    FLD_NM              VARCHAR2(255) NOT NULL,
    FLD_VAL             VARCHAR2(4000) NULL,
    VER_NBR             NUMBER(8,0) DEFAULT 0 NULL
)
/
INSERT INTO KREW_EDL_FLD_DMP_T SELECT * FROM OLD_KREW_EDL_FLD_DMP_T
/
DROP TABLE OLD_KREW_EDL_FLD_DMP_T
/
ALTER TABLE KREW_EDL_FLD_DMP_T ADD CONSTRAINT KREW_EDL_FLD_DMP_TP1 PRIMARY KEY (EDL_FIELD_DMP_ID)
/

--
-- KREW_INIT_RTE_NODE_INSTN_T 
-- 

ALTER TABLE KREW_INIT_RTE_NODE_INSTN_T RENAME TO OLD_INIT_RTE_NODE_INSTN_T
/
CREATE TABLE KREW_INIT_RTE_NODE_INSTN_T ( 
    DOC_HDR_ID          VARCHAR2(40),
    RTE_NODE_INSTN_ID   NUMBER(19,0)
)
/
INSERT INTO KREW_INIT_RTE_NODE_INSTN_T SELECT * FROM OLD_INIT_RTE_NODE_INSTN_T
/
DROP TABLE OLD_INIT_RTE_NODE_INSTN_T
/
ALTER TABLE KREW_INIT_RTE_NODE_INSTN_T ADD CONSTRAINT KREW_INIT_RTE_NODE_INSTN_TP1 PRIMARY KEY (DOC_HDR_ID, RTE_NODE_INSTN_ID)
/
CREATE INDEX KREW_INIT_RTE_NODE_INSTN_TI1 ON KREW_INIT_RTE_NODE_INSTN_T(DOC_HDR_ID)
/
CREATE INDEX KREW_INIT_RTE_NODE_INSTN_TI2 ON KREW_INIT_RTE_NODE_INSTN_T(RTE_NODE_INSTN_ID)
/

--
-- KREW_OUT_BOX_ITM_T 
-- 

ALTER TABLE KREW_OUT_BOX_ITM_T RENAME TO OLD_KREW_OUT_BOX_ITM_T
/
CREATE TABLE KREW_OUT_BOX_ITM_T ( 
    ACTN_ITM_ID     NUMBER(14,0),
    PRNCPL_ID       VARCHAR2(40) NOT NULL,
    ASND_DT         DATE NOT NULL,
    RQST_CD         CHAR(1) NOT NULL,
    ACTN_RQST_ID    NUMBER(14,0) NOT NULL,
    DOC_HDR_ID      VARCHAR2(40) NOT NULL,
    ROLE_NM         VARCHAR2(2000) NULL,
    DLGN_PRNCPL_ID  VARCHAR2(40) NULL,
    DOC_HDR_TTL     VARCHAR2(255) NULL,
    DOC_TYP_LBL     VARCHAR2(128) NOT NULL,
    DOC_HDLR_URL    VARCHAR2(255) NOT NULL,
    DOC_TYP_NM      VARCHAR2(64) NOT NULL,
    RSP_ID          NUMBER(14,0) NOT NULL,
    DLGN_TYP        VARCHAR2(1) NULL,
    VER_NBR         NUMBER(8,0) DEFAULT 0 NULL,
    GRP_ID          VARCHAR2(40) NULL,
    DLGN_GRP_ID     VARCHAR2(40) NULL,
    RQST_LBL        VARCHAR2(255) NULL
)
/
INSERT INTO KREW_OUT_BOX_ITM_T SELECT * FROM OLD_KREW_OUT_BOX_ITM_T
/
DROP TABLE OLD_KREW_OUT_BOX_ITM_T
/
ALTER TABLE KREW_OUT_BOX_ITM_T ADD CONSTRAINT KREW_OUT_BOX_ITM_TP1 PRIMARY KEY (ACTN_ITM_ID)
/
CREATE INDEX KREW_OUT_BOX_ITM_TI1 ON KREW_OUT_BOX_ITM_T(PRNCPL_ID)
/
CREATE INDEX KREW_OUT_BOX_ITM_TI2 ON KREW_OUT_BOX_ITM_T(DOC_HDR_ID)
/
CREATE INDEX KREW_OUT_BOX_ITM_TI3 ON KREW_OUT_BOX_ITM_T(ACTN_RQST_ID)
/

--
-- KREW_RMV_RPLC_DOC_T 
--

ALTER TABLE KREW_RMV_RPLC_DOC_T RENAME TO OLD_KREW_RMV_RPLC_DOC_T
/
CREATE TABLE KREW_RMV_RPLC_DOC_T ( 
    DOC_HDR_ID      VARCHAR2(40),
    OPRN            CHAR(1) NOT NULL,
    PRNCPL_ID       VARCHAR2(40) NOT NULL,
    RPLC_PRNCPL_ID  VARCHAR2(40) NULL,
    VER_NBR         NUMBER(8,0) DEFAULT 0 NULL
)
/
INSERT INTO KREW_RMV_RPLC_DOC_T SELECT * FROM OLD_KREW_RMV_RPLC_DOC_T
/
DROP TABLE OLD_KREW_RMV_RPLC_DOC_T
/
ALTER TABLE KREW_RMV_RPLC_DOC_T ADD CONSTRAINT KREW_RMV_RPLC_DOC_TP1 PRIMARY KEY (DOC_HDR_ID)
/

--
-- KREW_RMV_RPLC_GRP_T 
--

ALTER TABLE KREW_RMV_RPLC_GRP_T RENAME TO OLD_KREW_RMV_RPLC_GRP_T
/
CREATE TABLE KREW_RMV_RPLC_GRP_T ( 
    DOC_HDR_ID  VARCHAR2(40),
    GRP_ID      NUMBER(14,0)
)
/
INSERT INTO KREW_RMV_RPLC_GRP_T SELECT * FROM OLD_KREW_RMV_RPLC_GRP_T
/
DROP TABLE OLD_KREW_RMV_RPLC_GRP_T
/
ALTER TABLE KREW_RMV_RPLC_GRP_T ADD CONSTRAINT KREW_RMV_RPLC_GRP_TP1 PRIMARY KEY (DOC_HDR_ID, GRP_ID)
/

--
-- KREW_RMV_RPLC_RULE_T 
--

ALTER TABLE KREW_RMV_RPLC_RULE_T RENAME TO OLD_KREW_RMV_RPLC_RULE_T
/
CREATE TABLE KREW_RMV_RPLC_RULE_T ( 
    DOC_HDR_ID  VARCHAR2(40),
    RULE_ID     NUMBER(19,0)
)
/
INSERT INTO KREW_RMV_RPLC_RULE_T SELECT * FROM OLD_KREW_RMV_RPLC_RULE_T
/
DROP TABLE OLD_KREW_RMV_RPLC_RULE_T
/
ALTER TABLE KREW_RMV_RPLC_RULE_T ADD CONSTRAINT KREW_RMV_RPLC_RULE_TP1 PRIMARY KEY (DOC_HDR_ID, RULE_ID)
/

--
-- KREW_RTE_NODE_INSTN_T 
-- 

ALTER TABLE KREW_RTE_NODE_INSTN_T RENAME TO OLD_KREW_RTE_NODE_INSTN_T
/
CREATE TABLE KREW_RTE_NODE_INSTN_T ( 
    RTE_NODE_INSTN_ID       NUMBER(19,0),
    DOC_HDR_ID              VARCHAR2(40) NOT NULL,
    RTE_NODE_ID             NUMBER(19,0) NOT NULL,
    BRCH_ID                 NUMBER(19,0) NULL,
    PROC_RTE_NODE_INSTN_ID  NUMBER(19,0) NULL,
    ACTV_IND                NUMBER(1,0) DEFAULT 0 NOT NULL,
    CMPLT_IND               NUMBER(1,0) DEFAULT 0 NOT NULL,
    INIT_IND                NUMBER(1,0) DEFAULT 0 NOT NULL,
    VER_NBR                 NUMBER(8,0) DEFAULT 0 NULL
)
/
INSERT INTO KREW_RTE_NODE_INSTN_T SELECT * FROM OLD_KREW_RTE_NODE_INSTN_T
/
DROP TABLE OLD_KREW_RTE_NODE_INSTN_T
/
ALTER TABLE KREW_RTE_NODE_INSTN_T ADD CONSTRAINT KREW_RTE_NODE_INSTN_TP1 PRIMARY KEY (RTE_NODE_INSTN_ID)
/
CREATE INDEX KREW_RTE_NODE_INSTN_TI1 ON KREW_RTE_NODE_INSTN_T(DOC_HDR_ID, ACTV_IND, CMPLT_IND)
/
CREATE INDEX KREW_RTE_NODE_INSTN_TI2 ON KREW_RTE_NODE_INSTN_T(RTE_NODE_ID)
/
CREATE INDEX KREW_RTE_NODE_INSTN_TI3 ON KREW_RTE_NODE_INSTN_T(BRCH_ID)
/
CREATE INDEX KREW_RTE_NODE_INSTN_TI4 ON KREW_RTE_NODE_INSTN_T(PROC_RTE_NODE_INSTN_ID)
/

--
-- KREW_RULE_T
--

ALTER TABLE KREW_RULE_T RENAME TO OLD_KREW_RULE_T
/
CREATE TABLE KREW_RULE_T ( 
    RULE_ID             NUMBER(19,0),
    NM                  VARCHAR2(256) NULL,
    RULE_TMPL_ID        NUMBER(19,0) NULL,
    RULE_EXPR_ID        NUMBER(19,0) NULL,
    ACTV_IND            NUMBER(1,0) NOT NULL,
    RULE_BASE_VAL_DESC  VARCHAR2(2000) NULL,
    FRC_ACTN            NUMBER(1,0) NOT NULL,
    DOC_TYP_NM          VARCHAR2(64) NOT NULL,
    DOC_HDR_ID          VARCHAR2(40) NULL,
    TMPL_RULE_IND       NUMBER(1,0) NULL,
    FRM_DT              DATE NULL,
    TO_DT               DATE NULL,
    DACTVN_DT           DATE NULL,
    CUR_IND             NUMBER(1,0) DEFAULT 0 NULL,
    RULE_VER_NBR        NUMBER(8,0) DEFAULT 0 NULL,
    DLGN_IND            NUMBER(1,0) NULL,
    PREV_RULE_VER_NBR   NUMBER(19,0) NULL,
    ACTVN_DT            DATE NULL,
    VER_NBR             NUMBER(8,0) DEFAULT 0 NULL,
    OBJ_ID              VARCHAR2(36) NOT NULL
)
/
INSERT INTO KREW_RULE_T SELECT * FROM OLD_KREW_RULE_T
/
DROP TABLE OLD_KREW_RULE_T
/
ALTER TABLE KREW_RULE_T ADD CONSTRAINT KREW_RULE_TP1 PRIMARY KEY (RULE_ID)
/
ALTER TABLE KREW_RULE_T ADD CONSTRAINT KREW_RULE_TC0 UNIQUE (OBJ_ID)
/
ALTER TABLE KREW_RULE_T ADD CONSTRAINT KREW_RULE_TR1 FOREIGN KEY (RULE_EXPR_ID)
    REFERENCES KREW_RULE_EXPR_T (RULE_EXPR_ID)
/

--
-- KREW_DOC_LNK_T 
--

ALTER TABLE KREW_DOC_LNK_T RENAME TO OLD_KREW_DOC_LNK_T
/
create table KREW_DOC_LNK_T(
           DOC_LNK_ID NUMBER(19),
           ORGN_DOC_ID VARCHAR2(40) NOT NULL,
           DEST_DOC_ID VARCHAR2(40) NOT NULL
)
/
INSERT INTO KREW_DOC_LNK_T SELECT * FROM OLD_KREW_DOC_LNK_T
/
DROP TABLE OLD_KREW_DOC_LNK_T
/
ALTER TABLE KREW_DOC_LNK_T ADD CONSTRAINT KREW_DOC_LNK_TP1 PRIMARY KEY (DOC_LNK_ID)
/
create INDEX KREW_DOC_LNK_TI1 on krew_doc_lnk_t(ORGN_DOC_ID)
/





-- 
-- 2011-05-09.sql
-- 



--
--
-- DDL for KRMS repository
--
--

-- -----------------------------------------------------
-- Table KRMS_TYP_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_TYP_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_TYP_T (
  TYP_ID VARCHAR2(40)  NOT NULL ,
  NM VARCHAR2(100)  NOT NULL ,
  NMSPC_CD VARCHAR2(40)  NOT NULL ,
  SRVC_NM VARCHAR2(200) NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y'  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (TYP_ID) )
/



-- -----------------------------------------------------
-- Table KRMS_ATTR_DEFN_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_ATTR_DEFN_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_ATTR_DEFN_T (
  ATTR_DEFN_ID VARCHAR2(255)  NOT NULL ,
  NM VARCHAR2(100)  NOT NULL ,
  NMSPC_CD VARCHAR2(40)  NOT NULL ,
  LBL VARCHAR2(40) NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y'  NOT NULL ,
  CMPNT_NM VARCHAR2(100) NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (ATTR_DEFN_ID) )
/


-- -----------------------------------------------------
-- Table KRMS_TYP_ATTR_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_TYP_ATTR_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_TYP_ATTR_T (
  TYP_ATTR_ID VARCHAR2(40)  NOT NULL ,
  SEQ_NO NUMBER(5)  NOT NULL ,
  TYP_ID VARCHAR2(40)  NOT NULL ,
  ATTR_DEFN_ID VARCHAR2(255)  NOT NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y'  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (TYP_ATTR_ID) ,
  -- CREATE INDEX KRMS_TYP_ATTR_TI1 (ATTR_DEFN_ID ASC) ,
  -- CREATE INDEX KRMS_TYP_ATTR_TI2 (TYP_ID ASC) ,
  CONSTRAINT KRMS_TYP_ATTR_TC1 UNIQUE (TYP_ID, ATTR_DEFN_ID) ,
  CONSTRAINT KRMS_TYP_ATTR_FK1
    FOREIGN KEY (ATTR_DEFN_ID )
    REFERENCES KRMS_ATTR_DEFN_T (ATTR_DEFN_ID ),
  CONSTRAINT KRMS_TYP_ATTR_FK2
    FOREIGN KEY (TYP_ID )
    REFERENCES KRMS_TYP_T (TYP_ID ))
/

CREATE INDEX KRMS_TYP_ATTR_TI1 ON KRMS_TYP_ATTR_T (ATTR_DEFN_ID ASC) 
/
CREATE INDEX KRMS_TYP_ATTR_TI2 ON KRMS_TYP_ATTR_T (TYP_ID ASC) 
/


-- -----------------------------------------------------
-- Table KRMS_RULE_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_RULE_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_RULE_T (
  RULE_ID VARCHAR2(40)  NOT NULL ,
  NMSPC_CD VARCHAR2(40)  NOT NULL ,
  NM VARCHAR2(100)  NOT NULL ,
  TYP_ID VARCHAR2(40)  NOT NULL ,
  PROP_ID VARCHAR2(40)  NOT NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y'  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  DESCR_TXT VARCHAR2(4000) NULL ,
  PRIMARY KEY (RULE_ID) 
  -- CREATE INDEX KRMS_RULE_TI1 (PROP_ID ASC) ,
)
/

CREATE INDEX KRMS_RULE_TI1 ON KRMS_RULE_T (PROP_ID ASC)
/

-- -----------------------------------------------------
-- Table KRMS_PROP_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_PROP_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_PROP_T (
  PROP_ID VARCHAR2(40)  NOT NULL ,
  DESC_TXT VARCHAR2(100) NULL ,
  TYP_ID VARCHAR2(40)  NOT NULL ,
  DSCRM_TYP_CD VARCHAR2(10)  NOT NULL ,
  CMPND_OP_CD VARCHAR2(40) NULL ,
  RULE_ID VARCHAR2(40)  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (PROP_ID) ,
  -- CREATE INDEX KRMS_PROP_TI1 (RULE_ID ASC) ,
  -- CREATE INDEX KRMS_PROP_FK2 (TYP_ID ASC) ,
  CONSTRAINT KRMS_PROP_FK1
    FOREIGN KEY (RULE_ID )
    REFERENCES KRMS_RULE_T (RULE_ID ) ,
  CONSTRAINT KRMS_PROP_FK2
    FOREIGN KEY (TYP_ID )
    REFERENCES KRMS_TYP_T (TYP_ID ) )
/

CREATE INDEX KRMS_PROP_TI1 ON KRMS_PROP_T (RULE_ID ASC)
/
CREATE INDEX KRMS_PROP_FK2 ON KRMS_PROP_T (TYP_ID ASC)
/


ALTER TABLE KRMS_RULE_T ADD CONSTRAINT KRMS_RULE_FK1
    FOREIGN KEY (PROP_ID )
    REFERENCES KRMS_PROP_T (PROP_ID )
/


-- -----------------------------------------------------
-- Table KRMS_RULE_ATTR_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_RULE_ATTR_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_RULE_ATTR_T (
  RULE_ATTR_ID VARCHAR2(40)  NOT NULL ,
  RULE_ID VARCHAR2(40)  NOT NULL ,
  ATTR_DEFN_ID VARCHAR2(40)  NOT NULL ,
  ATTR_VAL VARCHAR2(400) NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (RULE_ATTR_ID) ,
  -- CREATE INDEX KRMS_RULE_ATTR_TI1 (RULE_ID ASC) ,
  -- CREATE INDEX KRMS_RULE_ATTR_TI2 (ATTR_DEFN_ID ASC) ,
  CONSTRAINT KRMS_RULE_ATTR_FK1
    FOREIGN KEY (RULE_ID )
    REFERENCES KRMS_RULE_T (RULE_ID ) ,
  CONSTRAINT KRMS_RULE_ATTR_FK2
    FOREIGN KEY (ATTR_DEFN_ID )
    REFERENCES KRMS_ATTR_DEFN_T (ATTR_DEFN_ID ) )
/

CREATE INDEX KRMS_RULE_ATTR_TI1 ON KRMS_RULE_ATTR_T (RULE_ID ASC) 
/
CREATE INDEX KRMS_RULE_ATTR_TI2 ON KRMS_RULE_ATTR_T (ATTR_DEFN_ID ASC) 
/


-- -----------------------------------------------------
-- Table KRMS_ACTN_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_ACTN_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_ACTN_T (
  ACTN_ID VARCHAR2(40)  NOT NULL ,
  NM VARCHAR2(40) NULL ,
  DESC_TXT VARCHAR2(4000) NULL ,
  TYP_ID VARCHAR2(40)  NOT NULL ,
  RULE_ID VARCHAR2(40) NULL ,
  SEQ_NO NUMBER(5) NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (ACTN_ID) ,
  -- CREATE INDEX KRMS_ACTN_TI2 (RULE_ID ASC) ,
  -- CREATE INDEX KRMS_ACTN_TI1 (TYP_ID ASC) ,
  CONSTRAINT KRMS_ACTN_TC2 UNIQUE (ACTN_ID, RULE_ID, SEQ_NO) ,
  -- CREATE INDEX KRMS_ACTN_TI3 (RULE_ID ASC, SEQ_NO ASC) ,
  CONSTRAINT KRMS_ACTN_FK1
    FOREIGN KEY (RULE_ID )
    REFERENCES KRMS_RULE_T (RULE_ID ) )
/

CREATE INDEX KRMS_ACTN_TI2 ON KRMS_ACTN_T (RULE_ID ASC)
/
CREATE INDEX KRMS_ACTN_TI1 ON KRMS_ACTN_T (TYP_ID ASC)
/
CREATE INDEX KRMS_ACTN_TI3 ON KRMS_ACTN_T (RULE_ID ASC, SEQ_NO ASC)
/


-- -----------------------------------------------------
-- Table KRMS_ACTN_ATTR_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_ACTN_ATTR_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_ACTN_ATTR_T (
  ACTN_ATTR_DATA_ID VARCHAR2(40)  NOT NULL ,
  ACTN_ID VARCHAR2(40)  NOT NULL ,
  ATTR_DEFN_ID VARCHAR2(40)  NOT NULL ,
  ATTR_VAL VARCHAR2(400) NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (ACTN_ATTR_DATA_ID) ,
  -- CREATE INDEX KRMS_ACTN_ATTR_TI1 (ACTN_ID ASC) ,
  -- CREATE INDEX KRMS_ACTN_ATTR_TI2 (ATTR_DEFN_ID ASC) ,
  CONSTRAINT KRMS_ACTN_ATTR_FK1
    FOREIGN KEY (ACTN_ID )
    REFERENCES KRMS_ACTN_T (ACTN_ID ) ,
  CONSTRAINT KRMS_ACTN_ATTR_FK2
    FOREIGN KEY (ATTR_DEFN_ID )
    REFERENCES KRMS_ATTR_DEFN_T (ATTR_DEFN_ID ) )
/

CREATE INDEX KRMS_ACTN_ATTR_TI1 ON KRMS_ACTN_ATTR_T (ACTN_ID ASC) 
/
CREATE INDEX KRMS_ACTN_ATTR_TI2 ON KRMS_ACTN_ATTR_T (ATTR_DEFN_ID ASC) 
/


-- -----------------------------------------------------
-- Table KRMS_CMPND_PROP_PROPS_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_CMPND_PROP_PROPS_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_CMPND_PROP_PROPS_T (
  CMPND_PROP_ID VARCHAR2(40)  NOT NULL ,
  PROP_ID VARCHAR2(40)  NOT NULL ,
  SEQ_NO NUMBER(5)  NOT NULL ,
  PRIMARY KEY (CMPND_PROP_ID, PROP_ID) ,
  -- CREATE INDEX KRMS_CMPND_PROP_PROPS_TI1 (PROP_ID ASC) ,
  -- CREATE INDEX KRMS_CMPND_PROP_PROPS_FK2 (CMPND_PROP_ID ASC) ,
  CONSTRAINT KRMS_CMPND_PROP_PROPS_FK1
    FOREIGN KEY (PROP_ID )
    REFERENCES KRMS_PROP_T (PROP_ID ) ,
  CONSTRAINT KRMS_CMPND_PROP_PROPS_FK2
    FOREIGN KEY (CMPND_PROP_ID )
    REFERENCES KRMS_PROP_T (PROP_ID ) )
/

CREATE INDEX KRMS_CMPND_PROP_PROPS_TI1 ON KRMS_CMPND_PROP_PROPS_T (PROP_ID ASC)
/
CREATE INDEX KRMS_CMPND_PROP_PROPS_FK2 ON KRMS_CMPND_PROP_PROPS_T (CMPND_PROP_ID ASC)
/


-- -----------------------------------------------------
-- Table KRMS_PROP_PARM_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_PROP_PARM_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_PROP_PARM_T (
  PROP_PARM_ID VARCHAR2(40)  NOT NULL ,
  PROP_ID VARCHAR2(40)  NOT NULL ,
  PARM_VAL VARCHAR2(255) NULL ,
  PARM_TYP_CD VARCHAR2(1)  NOT NULL ,
  SEQ_NO NUMBER(5)  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (PROP_PARM_ID) ,
  -- CREATE INDEX KRMS_PROP_PARM_TI1 (PROP_ID ASC) ,
  CONSTRAINT KRMS_PROP_PARM_FK1
    FOREIGN KEY (PROP_ID )
    REFERENCES KRMS_PROP_T (PROP_ID ))
/

CREATE INDEX KRMS_PROP_PARM_TI1 ON KRMS_PROP_PARM_T (PROP_ID ASC)
/




-- -----------------------------------------------------
-- Table KRMS_CNTXT_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_CNTXT_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_CNTXT_T (
  CNTXT_ID VARCHAR2(40)  NOT NULL ,
  NMSPC_CD VARCHAR2(40)  NOT NULL ,
  NM VARCHAR2(100)  NOT NULL ,
  TYP_ID VARCHAR2(40)  NOT NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y'  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (CNTXT_ID) )
/




-- -----------------------------------------------------
-- Table KRMS_AGENDA_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_AGENDA_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_AGENDA_T (
  AGENDA_ID VARCHAR2(40)  NOT NULL ,
  NMSPC_CD VARCHAR2(40)  NOT NULL ,
  NM VARCHAR2(100)  NOT NULL ,
  CNTXT_ID VARCHAR2(40)  NOT NULL ,
  INIT_AGENDA_ITM_ID VARCHAR2(40) NULL ,
  TYP_ID VARCHAR2(40)  NOT NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y'  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (AGENDA_ID) ,
  -- CREATE INDEX KRMS_AGENDA_TI1 (CNTXT_ID ASC) ,
  CONSTRAINT KRMS_AGENDA_FK1
    FOREIGN KEY (CNTXT_ID )
    REFERENCES KRMS_CNTXT_T (CNTXT_ID ) )
/

CREATE INDEX KRMS_AGENDA_TI1 ON KRMS_AGENDA_T (CNTXT_ID ASC)
/




-- -----------------------------------------------------
-- Table KRMS_AGENDA_ATTR_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_AGENDA_ATTR_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_AGENDA_ATTR_T (
  AGENDA_ATTR_ID VARCHAR2(40)  NOT NULL ,
  AGENDA_ID VARCHAR2(40)  NOT NULL ,
  ATTR_VAL VARCHAR2(400) NULL ,
  ATTR_DEFN_ID VARCHAR2(40)  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (AGENDA_ATTR_ID) ,
  -- CREATE INDEX KRMS_AGENDA_ATTR_TI1 (AGENDA_ID ASC) ,
  -- CREATE INDEX KRMS_AGENDA_ATTR_T12 (ATTR_DEFN_ID ASC) ,
  CONSTRAINT KRMS_AGENDA_ATTR_FK1
    FOREIGN KEY (AGENDA_ID )
    REFERENCES KRMS_AGENDA_T (AGENDA_ID ),
  CONSTRAINT KRMS_AGENDA_ATTR_FK2
    FOREIGN KEY (ATTR_DEFN_ID )
    REFERENCES KRMS_ATTR_DEFN_T (ATTR_DEFN_ID ))
/

CREATE INDEX KRMS_AGENDA_ATTR_TI1 ON KRMS_AGENDA_ATTR_T (AGENDA_ID ASC)
/
CREATE INDEX KRMS_AGENDA_ATTR_T12 ON KRMS_AGENDA_ATTR_T (ATTR_DEFN_ID ASC)
/


-- -----------------------------------------------------
-- Table KRMS_AGENDA_ITM_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_AGENDA_ITM_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_AGENDA_ITM_T (
  AGENDA_ITM_ID VARCHAR2(40)  NOT NULL ,
  RULE_ID VARCHAR2(40) NULL ,
  SUB_AGENDA_ID VARCHAR2(40) NULL ,
  AGENDA_ID VARCHAR2(40)  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  WHEN_TRUE VARCHAR2(40) NULL ,
  WHEN_FALSE VARCHAR2(40) NULL ,
  ALWAYS VARCHAR2(40) NULL ,
  PRIMARY KEY (AGENDA_ITM_ID) ,
  -- CREATE INDEX KRMS_AGENDA_ITM_TI1 (RULE_ID ASC) ,
  -- CREATE INDEX KRMS_AGENDA_ITM_TI2 (AGENDA_ID ASC) ,
  -- CREATE INDEX KRMS_AGENDA_ITM_TI3 (SUB_AGENDA_ID ASC) ,
  -- CREATE INDEX KRMS_AGENDA_ITM_TI4 (WHEN_TRUE ASC) ,
  -- CREATE INDEX KRMS_AGENDA_ITM_TI5 (WHEN_FALSE ASC) ,
  -- CREATE INDEX KRMS_AGENDA_ITM_TI6 (ALWAYS ASC) ,
  CONSTRAINT KRMS_AGENDA_ITM_FK1
    FOREIGN KEY (RULE_ID )
    REFERENCES KRMS_RULE_T (RULE_ID ) ,
  CONSTRAINT KRMS_AGENDA_ITM_FK2
    FOREIGN KEY (AGENDA_ID )
    REFERENCES KRMS_AGENDA_T (AGENDA_ID ) ,
  CONSTRAINT KRMS_AGENDA_ITM_FK3
    FOREIGN KEY (SUB_AGENDA_ID )
    REFERENCES KRMS_AGENDA_T (AGENDA_ID ) ,
  CONSTRAINT KRMS_AGENDA_ITM_FK4
    FOREIGN KEY (WHEN_TRUE )
    REFERENCES KRMS_AGENDA_ITM_T (AGENDA_ITM_ID ) ,
  CONSTRAINT KRMS_AGENDA_ITM_FK5
    FOREIGN KEY (WHEN_FALSE )
    REFERENCES KRMS_AGENDA_ITM_T (AGENDA_ITM_ID ) ,
  CONSTRAINT KRMS_AGENDA_ITM_FK6
    FOREIGN KEY (ALWAYS )
    REFERENCES KRMS_AGENDA_ITM_T (AGENDA_ITM_ID ) )
/

CREATE INDEX KRMS_AGENDA_ITM_TI1 ON KRMS_AGENDA_ITM_T (RULE_ID ASC) 
/
CREATE INDEX KRMS_AGENDA_ITM_TI2 ON KRMS_AGENDA_ITM_T (AGENDA_ID ASC) 
/
CREATE INDEX KRMS_AGENDA_ITM_TI3 ON KRMS_AGENDA_ITM_T (SUB_AGENDA_ID ASC) 
/
CREATE INDEX KRMS_AGENDA_ITM_TI4 ON KRMS_AGENDA_ITM_T (WHEN_TRUE ASC) 
/
CREATE INDEX KRMS_AGENDA_ITM_TI5 ON KRMS_AGENDA_ITM_T (WHEN_FALSE ASC) 
/
CREATE INDEX KRMS_AGENDA_ITM_TI6 ON KRMS_AGENDA_ITM_T (ALWAYS ASC) 
/



-- -----------------------------------------------------
-- Table KRMS_FUNC_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_FUNC_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_FUNC_T (
  FUNC_ID VARCHAR2(40)  NOT NULL ,
  NMSPC_CD VARCHAR2(40)  NOT NULL ,
  NM VARCHAR2(100)  NOT NULL ,
  DESC_TXT VARCHAR2(255) NULL ,
  RTRN_TYP VARCHAR2(255)  NOT NULL ,
  TYP_ID VARCHAR2(40)  NOT NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y'  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (FUNC_ID) ,
  -- CREATE INDEX KRMS_FUNC_TI1 (TYP_ID ASC) ,
  CONSTRAINT KRMS_FUNC_FK1
    FOREIGN KEY (TYP_ID )
    REFERENCES KRMS_TYP_T (TYP_ID ))
/

CREATE INDEX KRMS_FUNC_TI1 ON KRMS_FUNC_T (TYP_ID ASC)
/



-- -----------------------------------------------------
-- Table KRMS_FUNC_PARM_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_FUNC_PARM_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_FUNC_PARM_T (
  FUNC_PARM_ID VARCHAR2(40)  NOT NULL ,
  NM VARCHAR2(100)  NOT NULL ,
  DESC_TXT VARCHAR2(255) NULL ,
  TYP VARCHAR2(255)  NOT NULL ,
  FUNC_ID VARCHAR2(40)  NOT NULL ,
  SEQ_NO NUMBER(5)  NOT NULL ,
  PRIMARY KEY (FUNC_PARM_ID) ,
  -- CREATE INDEX KRMS_FUNC_PARM_TI1 (FUNC_ID ASC) ,
  CONSTRAINT KRMS_FUNC_PARM_FK1
    FOREIGN KEY (FUNC_ID )
    REFERENCES KRMS_FUNC_T (FUNC_ID ) )
/

CREATE INDEX KRMS_FUNC_PARM_TI1 ON KRMS_FUNC_PARM_T (FUNC_ID ASC)
/

-- -----------------------------------------------------
-- Table KRMS_TERM_SPEC_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_TERM_SPEC_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_TERM_SPEC_T (
  TERM_SPEC_ID VARCHAR2(40)  NOT NULL ,
  CNTXT_ID VARCHAR2(40) NULL ,
  NM VARCHAR2(255)  NOT NULL ,
  TYP VARCHAR2(255)  NOT NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y'  NOT NULL ,
  VER_NBR NUMBER(8)  NOT NULL ,
  PRIMARY KEY (TERM_SPEC_ID) ,
  CONSTRAINT KRMS_ASSET_TC1 UNIQUE (NM, CNTXT_ID) ,
  -- CREATE INDEX KRMS_ASSET_TI1 (CNTXT_ID ASC) ,
  CONSTRAINT KRMS_ASSET_FK1
    FOREIGN KEY (CNTXT_ID )
    REFERENCES KRMS_CNTXT_T (CNTXT_ID ) )
/

CREATE INDEX KRMS_ASSET_TI1 ON KRMS_TERM_SPEC_T (CNTXT_ID ASC)
/




-- -----------------------------------------------------
-- Table KRMS_TERM_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_TERM_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_TERM_T (
  TERM_ID VARCHAR2(40)  NOT NULL ,
  TERM_SPEC_ID VARCHAR2(40)  NOT NULL ,
  VER_NBR NUMBER(8)  NOT NULL ,
  PRIMARY KEY (TERM_ID) ,
  -- CREATE INDEX KRMS_TERM_TI1 (TERM_SPEC_ID ASC) ,
  CONSTRAINT KRMS_TERM_T__FK1
    FOREIGN KEY (TERM_SPEC_ID )
    REFERENCES KRMS_TERM_SPEC_T (TERM_SPEC_ID ) )
/

CREATE INDEX KRMS_TERM_TI1 ON KRMS_TERM_T (TERM_SPEC_ID ASC)
/


-- -----------------------------------------------------
-- Table KRMS_TERM_PARM_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_TERM_PARM_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_TERM_PARM_T (
  TERM_PARM_ID VARCHAR2(40)  NOT NULL ,
  TERM_ID VARCHAR2(40)  NOT NULL ,
  NM VARCHAR2(255)  NOT NULL ,
  VAL VARCHAR2(255) NULL ,
  VER_NBR NUMBER(8)  NOT NULL ,
  PRIMARY KEY (TERM_PARM_ID) ,
  -- CREATE INDEX KRMS_TERM_PARM_TI1 (TERM_ID ASC) ,
  CONSTRAINT KRMS_TERM_PARM_FK1
    FOREIGN KEY (TERM_ID )
    REFERENCES KRMS_TERM_T (TERM_ID ))
/

CREATE INDEX KRMS_TERM_PARM_TI1 ON KRMS_TERM_PARM_T (TERM_ID ASC)
/


-- -----------------------------------------------------
-- Table KRMS_CNTXT_TERM_SPEC_PREREQ_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_CNTXT_TERM_SPEC_PREREQ_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_CNTXT_TERM_SPEC_PREREQ_T (
  CNTXT_TERM_SPEC_PREREQ_ID VARCHAR2(40)  NOT NULL ,
  CNTXT_ID VARCHAR2(40)  NOT NULL ,
  TERM_SPEC_ID VARCHAR2(40)  NOT NULL ,
  PRIMARY KEY (CNTXT_TERM_SPEC_PREREQ_ID) ,
  -- CREATE INDEX KRMS_CNTXT_ASSET_PREREQ_TI1 (CNTXT_ID ASC) ,
  -- CREATE INDEX KRMS_CNTXT_ASSET_PREREQ_TI2 (TERM_SPEC_ID ASC) ,
  CONSTRAINT KRMS_CNTXT_ASSET_PREREQ_FK1
    FOREIGN KEY (CNTXT_ID )
    REFERENCES KRMS_CNTXT_T (CNTXT_ID ) ,
  CONSTRAINT KRMS_CNTXT_ASSET_PREREQ_FK2
    FOREIGN KEY (TERM_SPEC_ID )
    REFERENCES KRMS_TERM_SPEC_T (TERM_SPEC_ID ) )
/

CREATE INDEX KRMS_CNTXT_ASSET_PREREQ_TI1 ON KRMS_CNTXT_TERM_SPEC_PREREQ_T (CNTXT_ID ASC)
/
CREATE INDEX KRMS_CNTXT_ASSET_PREREQ_TI2 ON KRMS_CNTXT_TERM_SPEC_PREREQ_T (TERM_SPEC_ID ASC)
/



-- -----------------------------------------------------
-- Table KRMS_TERM_RSLVR_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_TERM_RSLVR_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_TERM_RSLVR_T (
  TERM_RSLVR_ID VARCHAR2(40)  NOT NULL ,
  NMSPC_CD VARCHAR2(40)  NOT NULL ,
  NM VARCHAR2(100)  NOT NULL ,
  TYP_ID VARCHAR2(40)  NOT NULL ,
  OUTPUT_TERM_SPEC_ID VARCHAR2(40)  NOT NULL ,
  CNTXT_ID VARCHAR2(40) NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y'  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (TERM_RSLVR_ID) ,
  -- CREATE INDEX KRMS_TERM_RSLVR_TI1 (CNTXT_ID ASC) ,
  -- CREATE INDEX KRMS_TERM_RSLVR_TI2 (TYP_ID ASC) ,
  CONSTRAINT KRMS_TERM_RSLVR_TC1 UNIQUE (NMSPC_CD, NM, CNTXT_ID) ,
  CONSTRAINT KRMS_TERM_RSLVR_FK1
    FOREIGN KEY (OUTPUT_TERM_SPEC_ID )
    REFERENCES KRMS_TERM_SPEC_T (TERM_SPEC_ID ) ,
  CONSTRAINT KRMS_TERM_RSLVR_FK2
    FOREIGN KEY (CNTXT_ID )
    REFERENCES KRMS_CNTXT_T (CNTXT_ID ) ,
  CONSTRAINT KRMS_TERM_RSLVR_FK3
    FOREIGN KEY (TYP_ID )
    REFERENCES KRMS_TYP_T (TYP_ID ) )
/

CREATE INDEX KRMS_TERM_RSLVR_TI1 ON KRMS_TERM_RSLVR_T (CNTXT_ID ASC) 
/
CREATE INDEX KRMS_TERM_RSLVR_TI2 ON KRMS_TERM_RSLVR_T (TYP_ID ASC) 
/

     --
     ----
------------
---------------
------------
     ----
     --


-- -----------------------------------------------------
-- Table KRMS_CNTXT_ATTR_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_CNTXT_ATTR_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_CNTXT_ATTR_T (
  CNTXT_ATTR_ID VARCHAR2(40)  NOT NULL ,
  CNTXT_ID VARCHAR2(40)  NOT NULL ,
  ATTR_VAL VARCHAR2(400) NULL ,
  ATTR_DEFN_ID VARCHAR2(40) NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (CNTXT_ATTR_ID) ,
  -- CREATE INDEX KRMS_CNTXT_ATTR_TI1 (CNTXT_ID ASC) ,
  -- CREATE INDEX KRMS_CNTXT_ATTR_TI2 (ATTR_DEFN_ID ASC) ,
  CONSTRAINT KRMS_CNTXT_ATTR_FK1
    FOREIGN KEY (CNTXT_ID )
    REFERENCES KRMS_CNTXT_T (CNTXT_ID ) ,
  CONSTRAINT KRMS_CNTXT_ATTR_FK2
    FOREIGN KEY (ATTR_DEFN_ID )
    REFERENCES KRMS_ATTR_DEFN_T (ATTR_DEFN_ID ) )
/

CREATE INDEX KRMS_CNTXT_ATTR_TI1 ON KRMS_CNTXT_ATTR_T (CNTXT_ID ASC)
/
CREATE INDEX KRMS_CNTXT_ATTR_TI2 ON KRMS_CNTXT_ATTR_T (ATTR_DEFN_ID ASC)
/


-- -----------------------------------------------------
-- Table KRMS_CNTXT_VLD_ACTN_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_CNTXT_VLD_ACTN_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_CNTXT_VLD_ACTN_T (
  CNTXT_VLD_ACTN_ID VARCHAR2(40)  NOT NULL ,
  CNTXT_ID VARCHAR2(40)  NOT NULL ,
  ACTN_TYP_ID VARCHAR2(40)  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (CNTXT_VLD_ACTN_ID) ,
  -- CREATE INDEX KRMS_CNTXT_VLD_ACTN_TI1 (CNTXT_ID ASC) ,
  CONSTRAINT KRMS_CNTXT_VLD_ACTN_FK1
    FOREIGN KEY (CNTXT_ID )
    REFERENCES KRMS_CNTXT_T (CNTXT_ID ) )
/

CREATE INDEX KRMS_CNTXT_VLD_ACTN_TI1 ON KRMS_CNTXT_VLD_ACTN_T (CNTXT_ID ASC)
/


-- -----------------------------------------------------
-- Table KRMS_TERM_RSLVR_ATTR_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_TERM_RSLVR_ATTR_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_TERM_RSLVR_ATTR_T (
  TERM_RSLVR_ATTR_ID VARCHAR2(40)  NOT NULL ,
  TERM_RSLVR_ID VARCHAR2(40)  NOT NULL ,
  ATTR_DEFN_ID VARCHAR2(40)  NOT NULL ,
  ATTR_VAL VARCHAR2(400) NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (TERM_RSLVR_ATTR_ID) ,
  -- CREATE INDEX KRMS_ASSET_RSLVR_ATTR_TI1 (TERM_RSLVR_ID ASC) ,
  -- CREATE INDEX KRMS_ASSET_RSLVR_ATTR_TI2 (ATTR_DEFN_ID ASC) ,
  CONSTRAINT KRMS_ASSET_RSLVR_ATTR_FK1
    FOREIGN KEY (TERM_RSLVR_ID )
    REFERENCES KRMS_TERM_RSLVR_T (TERM_RSLVR_ID ) ,
  CONSTRAINT KRMS_ASSET_RSLVR_ATTR_FK2
    FOREIGN KEY (ATTR_DEFN_ID )
    REFERENCES KRMS_ATTR_DEFN_T (ATTR_DEFN_ID ) )
/

CREATE INDEX KRMS_ASSET_RSLVR_ATTR_TI1 ON KRMS_TERM_RSLVR_ATTR_T (TERM_RSLVR_ID ASC)
/
CREATE INDEX KRMS_ASSET_RSLVR_ATTR_TI2 ON KRMS_TERM_RSLVR_ATTR_T (ATTR_DEFN_ID ASC)
/


-- -----------------------------------------------------
-- Table KRMS_TERM_RSLVR_INPUT_SPEC_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_TERM_RSLVR_INPUT_SPEC_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_TERM_RSLVR_INPUT_SPEC_T (
  TERM_SPEC_ID VARCHAR2(40)  NOT NULL ,
  TERM_RSLVR_ID VARCHAR2(40)  NOT NULL ,
  -- CREATE INDEX KRMS_INPUT_ASSET_TI1 (TERM_SPEC_ID ASC) ,
  -- CREATE INDEX KRMS_INPUT_ASSET_TI2 (TERM_RSLVR_ID ASC) ,
  PRIMARY KEY (TERM_SPEC_ID, TERM_RSLVR_ID) ,
  CONSTRAINT KRMS_INPUT_ASSET_FK2
    FOREIGN KEY (TERM_SPEC_ID )
    REFERENCES KRMS_TERM_SPEC_T (TERM_SPEC_ID ) ,
  CONSTRAINT KRMS_INPUT_ASSET_FK1
    FOREIGN KEY (TERM_RSLVR_ID )
    REFERENCES KRMS_TERM_RSLVR_T (TERM_RSLVR_ID ) )
/

CREATE INDEX KRMS_INPUT_ASSET_TI1 ON KRMS_TERM_RSLVR_INPUT_SPEC_T (TERM_SPEC_ID ASC)
/
CREATE INDEX KRMS_INPUT_ASSET_TI2 ON KRMS_TERM_RSLVR_INPUT_SPEC_T (TERM_RSLVR_ID ASC)
/



-- -----------------------------------------------------
-- Table KRMS_TERM_RSLVR_PARM_SPEC_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_TERM_RSLVR_PARM_SPEC_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_TERM_RSLVR_PARM_SPEC_T (
  TERM_RSLVR_PARM_SPEC_ID VARCHAR2(40)  NOT NULL ,
  TERM_RSLVR_ID VARCHAR2(40)  NOT NULL ,
  NM VARCHAR2(45)  NOT NULL ,
  VER_NBR NUMBER(8)  NOT NULL ,
  PRIMARY KEY (TERM_RSLVR_PARM_SPEC_ID) ,
  -- CREATE INDEX KRMS_TERM_RESLV_PARM_FK1 (TERM_RSLVR_ID ASC) ,
  CONSTRAINT KRMS_TERM_RESLV_PARM_FK1
    FOREIGN KEY (TERM_RSLVR_ID )
    REFERENCES KRMS_TERM_RSLVR_T (TERM_RSLVR_ID ) )
/

CREATE INDEX KRMS_TERM_RESLV_PARM_FK1 ON KRMS_TERM_RSLVR_PARM_SPEC_T (TERM_RSLVR_ID ASC)
/

-- -----------------------------------------------------
-- TABLE KRMS_CNTXT_VLD_FUNC_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_CNTXT_VLD_FUNC_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_CNTXT_VLD_FUNC_T (
  CNTXT_VLD_FUNC_ID VARCHAR2(40)  NOT NULL ,
  CNTXT_ID VARCHAR2(40)  NOT NULL ,
  FUNC_ID VARCHAR2(40)  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (CNTXT_VLD_FUNC_ID) ,
  -- CREATE INDEX KRMS_CNTXT_VLD_FUNC_TI1 (CNTXT_ID ASC) ,
  CONSTRAINT KRMS_CNTXT_VLD_FUNC_FK1
    FOREIGN KEY (CNTXT_ID )
    REFERENCES KRMS_CNTXT_T (CNTXT_ID ) )
/

CREATE INDEX KRMS_CNTXT_VLD_FUNC_TI1 ON KRMS_CNTXT_VLD_FUNC_T (CNTXT_ID ASC)
/


-- -----------------------------------------------------
-- Table KRMS_CNTXT_VLD_RULE_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_CNTXT_VLD_RULE_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_CNTXT_VLD_RULE_T (
  CNTXT_VLD_RULE_ID VARCHAR2(40)  NOT NULL ,
  CNTXT_ID VARCHAR2(40)  NOT NULL ,
  RULE_ID VARCHAR2(40)  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (CNTXT_VLD_RULE_ID) ,
  -- CREATE INDEX KRMS_CNTXT_VLD_RULE_TI1 (CNTXT_ID ASC) ,
  CONSTRAINT KRMS_CNTXT_VLD_RULE_FK1
    FOREIGN KEY (CNTXT_ID )
    REFERENCES KRMS_CNTXT_T (CNTXT_ID ) )
/

CREATE INDEX KRMS_CNTXT_VLD_RULE_TI1 ON KRMS_CNTXT_VLD_RULE_T (CNTXT_ID ASC)
/

-- -----------------------------------------------------
-- Table KRMS_CNTXT_VLD_EVENT_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_CNTXT_VLD_EVENT_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_CNTXT_VLD_EVENT_T (
  CNTXT_VLD_EVENT_ID VARCHAR2(40)  NOT NULL ,
  CNTXT_ID VARCHAR2(40)  NOT NULL ,
  EVENT_NM VARCHAR2(255)  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (CNTXT_VLD_EVENT_ID) ,
  -- CREATE INDEX KRMS_CNTXT_VLD_EVENT_TI1 (CNTXT_ID ASC) ,
  CONSTRAINT KRMS_CNTXT_VLD_EVENT_FK1
    FOREIGN KEY (CNTXT_ID )
    REFERENCES KRMS_CNTXT_T (CNTXT_ID ) )
/

CREATE INDEX KRMS_CNTXT_VLD_EVENT_TI1 ON KRMS_CNTXT_VLD_EVENT_T (CNTXT_ID ASC)
/


--
--
-- sequences
--
--


CREATE SEQUENCE KRMS_TYP_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_PROP_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_RULE_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_CNTXT_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_AGENDA_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_ATTR_DEFN_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_TYP_ATTR_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_ACTN_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_ACTN_ATTR_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_AGENDA_ITM_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_RULE_ATTR_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_CNTXT_ATTR_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_CNTXT_VLD_ACTN_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_AGENDA_ATTR_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_CMPND_PROP_PROPS_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_PROP_PARM_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_TERM_SPEC_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_TERM_RSLVR_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_TERM_RSLVR_ATTR_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_TERM_RSLVR_INPUT_SPEC_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_CNTXT_TERM_SPEC_PREREQ_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_TERM_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_TERM_RSLVR_PARM_SPEC_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_TERM_PARM_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_FUNC_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_FUNC_PARM_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_CNTXT_VLD_FUNC_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_CNTXT_VLD_RULE_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE SEQUENCE KRMS_CNTXT_VLD_EVENT_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/





-- 
-- 2011-05-13.sql
-- 


DROP TABLE KRSB_SVC_DEF_T
/
DROP TABLE KRSB_FLT_SVC_DEF_T
/
DROP SEQUENCE KRSB_SVC_DEF_S
/
DROP SEQUENCE KRSB_FLT_SVC_DEF_S
/
CREATE TABLE KRSB_SVC_DSCRPTR_T (
  SVC_DSCRPTR_ID VARCHAR2(40) NOT NULL,
  DSCRPTR CLOB NOT NULL,
  PRIMARY KEY (SVC_DSCRPTR_ID)
)
/
CREATE SEQUENCE KRSB_SVC_DSCRPTR_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/
CREATE TABLE KRSB_SVC_DEF_T (
  SVC_DEF_ID VARCHAR2(40) NOT NULL,
  SVC_NM VARCHAR2(255) NOT NULL,
  SVC_URL VARCHAR2(500) NOT NULL,
  INSTN_ID VARCHAR2(255) NOT NULL,
  APPL_NMSPC VARCHAR2(255) NOT NULL,
  SRVR_IP VARCHAR2(40) NOT NULL,
  TYP_CD VARCHAR2(40) NOT NULL,
  SVC_VER VARCHAR2(40) NOT NULL,
  STAT_CD VARCHAR2(1) NOT NULL,
  SVC_DSCRPTR_ID VARCHAR2(40) NOT NULL,
  CHKSM VARCHAR2(30) NOT NULL,
  VER_NBR NUMBER(8) DEFAULT 0 NOT NULL,
  PRIMARY KEY (SVC_DEF_ID),
  CONSTRAINT KRSB_SVC_DEF_FK1
    FOREIGN KEY (SVC_DSCRPTR_ID)
    REFERENCES KRSB_SVC_DSCRPTR_T(SVC_DSCRPTR_ID) ON DELETE CASCADE
)
/
CREATE SEQUENCE KRSB_SVC_DEF_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/
CREATE INDEX KRSB_SVC_DEF_TI1 ON KRSB_SVC_DEF_T (INSTN_ID)
/
CREATE INDEX KRSB_SVC_DEF_TI2 ON KRSB_SVC_DEF_T (SVC_NM, STAT_CD)
/
CREATE INDEX KRSB_SVC_DEF_TI3 ON KRSB_SVC_DEF_T (STAT_CD)
/





-- 
-- 2011-06-06.sql
-- 


ALTER TABLE KREW_DOC_TYP_T RENAME COLUMN SVC_NMSPC TO APPL_ID
/
ALTER TABLE KREW_RULE_ATTR_T RENAME COLUMN SVC_NMSPC TO APPL_ID
/
ALTER TABLE KRSB_SVC_DEF_T RENAME COLUMN APPL_NMSPC TO APPL_ID
/
ALTER TABLE KRSB_MSG_QUE_T RENAME COLUMN SVC_NMSPC TO APPL_ID
/
ALTER TABLE KRNS_NMSPC_T RENAME COLUMN APPL_NMSPC_CD TO APPL_ID
/
ALTER TABLE KRNS_PARM_T RENAME COLUMN APPL_NMSPC_CD TO APPL_ID
/

ALTER TABLE KRNS_NMSPC_T RENAME TO KRCR_NMSPC_T
/
ALTER TABLE KRNS_PARM_TYP_T RENAME TO KRCR_PARM_TYP_T
/
ALTER TABLE KRNS_PARM_DTL_TYP_T RENAME TO KRCR_PARM_DTL_TYP_T
/
ALTER TABLE KRNS_PARM_T RENAME TO KRCR_PARM_T
/

ALTER TABLE KRNS_CAMPUS_T RENAME TO KRLC_CMP_T
/
ALTER TABLE KRNS_CMP_TYP_T RENAME TO KRLC_CMP_TYP_T
/
ALTER TABLE KR_COUNTRY_T RENAME TO KRLC_CNTRY_T
/
ALTER TABLE KR_STATE_T RENAME TO KRLC_ST_T
/
ALTER TABLE KR_POSTAL_CODE_T RENAME TO KRLC_PSTL_CD_T
/
ALTER TABLE KR_COUNTY_T RENAME TO KRLC_CNTY_T
/





-- 
-- 2011-06-08.sql
-- 


-- make krms_rule_t.prop_id nullable
ALTER TABLE KRMS_RULE_T MODIFY (PROP_ID NULL)
/

-- add krms_actn_t.nmspc_cd
ALTER TABLE KRMS_ACTN_T ADD NMSPC_CD VARCHAR2(40) NOT NULL
/

-- make krms_agenda_t default to 'Y'
ALTER TABLE KRMS_AGENDA_T MODIFY ACTV VARCHAR2(1) DEFAULT 'Y'
/

-- make krms_prop_t.typ_id nullable 
ALTER TABLE KRMS_PROP_T MODIFY (TYP_ID NULL)
/

-- change krms_rule_t.descr_txt to desc_t for consistency
ALTER TABLE KRMS_RULE_T RENAME COLUMN DESCR_TXT TO DESC_TXT
/





-- 
-- 2011-06-13-m6.sql
-- 


UPDATE KREW_DOC_TYP_T SET POST_PRCSR = 'org.kuali.rice.krad.workflow.postprocessor.KualiPostProcessor' WHERE POST_PRCSR = 'org.kuali.rice.kns.workflow.postprocessor.KualiPostProcessor'
/
UPDATE KREW_RULE_ATTR_T SET CLS_NM = 'org.kuali.rice.krad.workflow.attribute.KualiXmlSearchableAttributeImpl' WHERE CLS_NM = 'org.kuali.rice.kns.workflow.attribute.KualiXmlSearchableAttributeImpl'
/
UPDATE KREW_RULE_ATTR_T SET CLS_NM = 'org.kuali.rice.kns.workflow.attribute.KualiXMLBooleanTranslatorSearchableAttributeImpl' WHERE CLS_NM = 'org.kuali.rice.kns.workflow.attribute.KualiXMLBooleanTranslatorSearchableAttributeImpl'
/
UPDATE KREW_RULE_ATTR_T SET CLS_NM = 'org.kuali.rice.kns.workflow.attribute.KualiXmlRuleAttributeImpl' WHERE CLS_NM = 'org.kuali.rice.kns.workflow.attribute.KualiXmlRuleAttributeImpl'
/





-- 
-- 2011-06-17-m6.sql
-- 


--
-- NOTE: when assembling this script for release, please merge any table rebuilds with those from 2011-04-28.sql
--

-----------------------------------------------------------------------------
-- KREW_DOC_TYP_T
-----------------------------------------------------------------------------

DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_TYP_TC0' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_TYP_T DROP CONSTRAINT KREW_DOC_TYP_TC0';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_TC0 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_TYP_TC0' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_TYP_TC0';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_TC0 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_TYP_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_TYP_T DROP CONSTRAINT KREW_DOC_TYP_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_TYP_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_TYP_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_DOC_TYP_T RENAME TO OLD_KREW_DOC_TYP_T
/

CREATE TABLE KREW_DOC_TYP_T
(
      DOC_TYP_ID VARCHAR2(40)
        , PARNT_ID VARCHAR2(40)
        , DOC_TYP_NM VARCHAR2(64)
        , DOC_TYP_VER_NBR NUMBER(10) default 0
        , ACTV_IND NUMBER(1)
        , CUR_IND NUMBER(1)
        , LBL VARCHAR2(128)
        , PREV_DOC_TYP_VER_NBR VARCHAR2(40)
        , DOC_TYP_DESC VARCHAR2(4000)
        , DOC_HDLR_URL VARCHAR2(255)
        , POST_PRCSR VARCHAR2(255)
        , JNDI_URL VARCHAR2(255)
        , BLNKT_APPR_PLCY VARCHAR2(10)
        , ADV_DOC_SRCH_URL VARCHAR2(255)
        , CSTM_ACTN_LIST_ATTRIB_CLS_NM VARCHAR2(255)
        , CSTM_ACTN_EMAIL_ATTRIB_CLS_NM VARCHAR2(255)
        , CSTM_DOC_NTE_ATTRIB_CLS_NM VARCHAR2(255)
        , RTE_VER_NBR VARCHAR2(2) default '1'
        , NOTIFY_ADDR VARCHAR2(255)
        , APPL_ID VARCHAR2(255)
        , EMAIL_XSL VARCHAR2(255)
        , SEC_XML CLOB
        , VER_NBR NUMBER(8) default 0
        , BLNKT_APPR_GRP_ID VARCHAR2(40)
        , RPT_GRP_ID VARCHAR2(40)
        , GRP_ID VARCHAR2(40)
        , HELP_DEF_URL VARCHAR2(4000)
        , OBJ_ID VARCHAR2(36) NOT NULL
        , DOC_SEARCH_HELP_URL VARCHAR2(4000)
        , DOC_HDR_ID VARCHAR2(40)
    , CONSTRAINT KREW_DOC_TYP_TC0 UNIQUE (OBJ_ID)
    , CONSTRAINT KREW_DOC_TYP_TI1 UNIQUE (DOC_TYP_NM, DOC_TYP_VER_NBR)
)
/

INSERT INTO KREW_DOC_TYP_T(
        DOC_TYP_ID
        , PARNT_ID
        , DOC_TYP_NM
        , DOC_TYP_VER_NBR
        , ACTV_IND
        , CUR_IND
        , LBL
        , PREV_DOC_TYP_VER_NBR
        , DOC_TYP_DESC
        , DOC_HDLR_URL
        , POST_PRCSR
        , JNDI_URL
        , BLNKT_APPR_PLCY
        , ADV_DOC_SRCH_URL
        , CSTM_ACTN_LIST_ATTRIB_CLS_NM
        , CSTM_ACTN_EMAIL_ATTRIB_CLS_NM
        , CSTM_DOC_NTE_ATTRIB_CLS_NM
        , RTE_VER_NBR
        , NOTIFY_ADDR
        , APPL_ID
        , EMAIL_XSL
        , SEC_XML
        , VER_NBR
        , BLNKT_APPR_GRP_ID
        , RPT_GRP_ID
        , GRP_ID
        , HELP_DEF_URL
        , OBJ_ID
        , DOC_SEARCH_HELP_URL
        , DOC_HDR_ID
)
SELECT DOC_TYP_ID
        , PARNT_ID
        , DOC_TYP_NM
        , DOC_TYP_VER_NBR
        , ACTV_IND
        , CUR_IND
        , LBL
        , PREV_DOC_TYP_VER_NBR
        , DOC_TYP_DESC
        , DOC_HDLR_URL
        , POST_PRCSR
        , JNDI_URL
        , BLNKT_APPR_PLCY
        , ADV_DOC_SRCH_URL
        , CSTM_ACTN_LIST_ATTRIB_CLS_NM
        , CSTM_ACTN_EMAIL_ATTRIB_CLS_NM
        , CSTM_DOC_NTE_ATTRIB_CLS_NM
        , RTE_VER_NBR
        , NOTIFY_ADDR
        , APPL_ID
        , EMAIL_XSL
        , SEC_XML
        , VER_NBR
        , BLNKT_APPR_GRP_ID
        , RPT_GRP_ID
        , GRP_ID
        , HELP_DEF_URL
        , OBJ_ID
        , DOC_SEARCH_HELP_URL
        , DOC_HDR_ID
FROM OLD_KREW_DOC_TYP_T
/

DROP TABLE OLD_KREW_DOC_TYP_T CASCADE CONSTRAINTS PURGE
/


ALTER TABLE KREW_DOC_TYP_T
    ADD CONSTRAINT KREW_DOC_TYP_TP1
PRIMARY KEY (DOC_TYP_ID)
/

CREATE INDEX KREW_DOC_TYP_TI2 
  ON KREW_DOC_TYP_T 
  (PARNT_ID)
/
CREATE INDEX KREW_DOC_TYP_TI3 
  ON KREW_DOC_TYP_T 
  (DOC_TYP_ID, PARNT_ID)
/
CREATE INDEX KREW_DOC_TYP_TI4 
  ON KREW_DOC_TYP_T 
  (PREV_DOC_TYP_VER_NBR)
/
CREATE INDEX KREW_DOC_TYP_TI5 
  ON KREW_DOC_TYP_T 
  (CUR_IND)
/
CREATE INDEX KREW_DOC_TYP_TI6 
  ON KREW_DOC_TYP_T 
  (DOC_TYP_NM)
/

-----------------------------------------------------------------------------
-- KREW_DOC_HDR_T
-----------------------------------------------------------------------------

DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_HDR_TC0' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_HDR_T DROP CONSTRAINT KREW_DOC_HDR_TC0';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_TC0 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_TC0' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_TC0';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_TC0 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_DOC_HDR_T RENAME TO OLD_KREW_DOC_HDR_T
/

CREATE TABLE KREW_DOC_HDR_T
(
      DOC_HDR_ID VARCHAR2(40)
        , DOC_TYP_ID VARCHAR2(40)
        , DOC_HDR_STAT_CD CHAR(1) NOT NULL
        , RTE_LVL NUMBER(8) NOT NULL
        , STAT_MDFN_DT DATE NOT NULL
        , CRTE_DT DATE NOT NULL
        , APRV_DT DATE
        , FNL_DT DATE
        , RTE_STAT_MDFN_DT DATE
        , RTE_LVL_MDFN_DT DATE
        , TTL VARCHAR2(255)
        , APP_DOC_ID VARCHAR2(255)
        , DOC_VER_NBR NUMBER(8) NOT NULL
        , INITR_PRNCPL_ID VARCHAR2(40) NOT NULL
        , VER_NBR NUMBER(8) default 0
        , RTE_PRNCPL_ID VARCHAR2(40)
        , DTYPE VARCHAR2(50)
        , OBJ_ID VARCHAR2(36) NOT NULL
        , APP_DOC_STAT VARCHAR2(64)
        , APP_DOC_STAT_MDFN_DT DATE
    , CONSTRAINT KREW_DOC_HDR_TC0 UNIQUE (OBJ_ID)
)
/

INSERT INTO KREW_DOC_HDR_T(DOC_HDR_ID, DOC_TYP_ID, DOC_HDR_STAT_CD, RTE_LVL, STAT_MDFN_DT, CRTE_DT, APRV_DT, FNL_DT, RTE_STAT_MDFN_DT, RTE_LVL_MDFN_DT, TTL, APP_DOC_ID, DOC_VER_NBR, INITR_PRNCPL_ID, VER_NBR, RTE_PRNCPL_ID, DTYPE, OBJ_ID, APP_DOC_STAT, APP_DOC_STAT_MDFN_DT)
SELECT DOC_HDR_ID, DOC_TYP_ID, DOC_HDR_STAT_CD, RTE_LVL, STAT_MDFN_DT, CRTE_DT, APRV_DT, FNL_DT, RTE_STAT_MDFN_DT, RTE_LVL_MDFN_DT, TTL, APP_DOC_ID, DOC_VER_NBR, INITR_PRNCPL_ID, VER_NBR, RTE_PRNCPL_ID, DTYPE, OBJ_ID, APP_DOC_STAT, APP_DOC_STAT_MDFN_DT
FROM OLD_KREW_DOC_HDR_T
/

DROP TABLE OLD_KREW_DOC_HDR_T CASCADE CONSTRAINTS PURGE
/

ALTER TABLE KREW_DOC_HDR_T
    ADD CONSTRAINT KREW_DOC_HDR_TP1
PRIMARY KEY (DOC_HDR_ID)
/

CREATE INDEX KREW_DOC_HDR_T10 
  ON KREW_DOC_HDR_T 
  (APP_DOC_STAT)
/
  
CREATE INDEX KREW_DOC_HDR_T12 
  ON KREW_DOC_HDR_T 
  (APP_DOC_STAT_MDFN_DT)
/
  
CREATE INDEX KREW_DOC_HDR_TI1 
  ON KREW_DOC_HDR_T 
  (DOC_TYP_ID)
/
  
CREATE INDEX KREW_DOC_HDR_TI2 
  ON KREW_DOC_HDR_T 
  (INITR_PRNCPL_ID)
/
  
CREATE INDEX KREW_DOC_HDR_TI3 
  ON KREW_DOC_HDR_T 
  (DOC_HDR_STAT_CD)
/
  
CREATE INDEX KREW_DOC_HDR_TI4 
  ON KREW_DOC_HDR_T 
  (TTL)
/
  
CREATE INDEX KREW_DOC_HDR_TI5 
  ON KREW_DOC_HDR_T 
  (CRTE_DT)
/
  
CREATE INDEX KREW_DOC_HDR_TI6 
  ON KREW_DOC_HDR_T 
  (RTE_STAT_MDFN_DT)
/
  
CREATE INDEX KREW_DOC_HDR_TI7 
  ON KREW_DOC_HDR_T 
  (APRV_DT)
/
  
CREATE INDEX KREW_DOC_HDR_TI8 
  ON KREW_DOC_HDR_T 
  (FNL_DT)
/
  
CREATE INDEX KREW_DOC_HDR_TI9 
  ON KREW_DOC_HDR_T 
  (APP_DOC_ID)
/

-----------------------------------------------------------------------------
-- KREW_DOC_TYP_PLCY_RELN_T
-----------------------------------------------------------------------------

DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_TYP_PLCY_RELN_TC0' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_TYP_PLCY_RELN_T DROP CONSTRAINT KREW_DOC_TYP_PLCY_RELN_TC0';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_PLCY_RELN_TC0 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_TYP_PLCY_RELN_TC0' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_TYP_PLCY_RELN_TC0';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_PLCY_RELN_TC0 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_DOC_TYP_PLCY_RELN_T RENAME TO OLD_KREW_DOC_TYP_PLCY_RELN_T
/

CREATE TABLE KREW_DOC_TYP_PLCY_RELN_T
(
      DOC_TYP_ID VARCHAR2(40)
        , DOC_PLCY_NM VARCHAR2(255)
        , PLCY_NM NUMBER(1) NOT NULL
        , VER_NBR NUMBER(8) default 0
        , OBJ_ID VARCHAR2(36) NOT NULL
        , PLCY_VAL VARCHAR2(64)

    , CONSTRAINT KREW_DOC_TYP_PLCY_RELN_TC0 UNIQUE (OBJ_ID)
)
/

INSERT INTO KREW_DOC_TYP_PLCY_RELN_T(
DOC_TYP_ID
        , DOC_PLCY_NM
        , PLCY_NM
        , VER_NBR
        , OBJ_ID
        , PLCY_VAL
)
SELECT DOC_TYP_ID
        , DOC_PLCY_NM
        , PLCY_NM
        , VER_NBR
        , OBJ_ID
        , PLCY_VAL
FROM OLD_KREW_DOC_TYP_PLCY_RELN_T
/

DROP TABLE OLD_KREW_DOC_TYP_PLCY_RELN_T CASCADE CONSTRAINTS PURGE
/

ALTER TABLE KREW_DOC_TYP_PLCY_RELN_T
    ADD CONSTRAINT KREW_DOC_TYP_PLCY_RELN_TP1
PRIMARY KEY (DOC_TYP_ID,DOC_PLCY_NM)
/

-----------------------------------------------------------------------------
-- KREW_DOC_TYP_APP_DOC_STAT_T
-----------------------------------------------------------------------------

DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_TYP_APP_DOC_STAT_TC0' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_TYP_APP_DOC_STAT_T DROP CONSTRAINT KREW_DOC_TYP_APP_DOC_STAT_TC0';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_APP_DOC_STAT_TC0 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_TYP_APP_DOC_STAT_TC0' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_TYP_APP_DOC_STAT_TC0';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_APP_DOC_STAT_TC0 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_DOC_TYP_APP_DOC_STAT_T RENAME TO O_KREW_DOC_TYP_APP_DOC_STAT_T
/

CREATE TABLE KREW_DOC_TYP_APP_DOC_STAT_T
(
      DOC_TYP_ID VARCHAR2(40)
        , DOC_STAT_NM VARCHAR2(64)
        , VER_NBR NUMBER(8) default 0
        , OBJ_ID VARCHAR2(36) NOT NULL
    , CONSTRAINT KREW_DOC_TYP_APP_DOC_STAT_TC0 UNIQUE (OBJ_ID)
)
/

INSERT INTO KREW_DOC_TYP_APP_DOC_STAT_T(
DOC_TYP_ID
        , DOC_STAT_NM
        , VER_NBR
        , OBJ_ID
)
SELECT DOC_TYP_ID
        , DOC_STAT_NM
        , VER_NBR
        , OBJ_ID
FROM O_KREW_DOC_TYP_APP_DOC_STAT_T
/

DROP TABLE O_KREW_DOC_TYP_APP_DOC_STAT_T CASCADE CONSTRAINTS PURGE
/

ALTER TABLE KREW_DOC_TYP_APP_DOC_STAT_T
    ADD CONSTRAINT KREW_DOC_TYP_APP_DOC_STAT_TP1
PRIMARY KEY (DOC_TYP_ID,DOC_STAT_NM)
/

CREATE INDEX KREW_DOC_TYP_APP_DOC_STAT_T1 
  ON KREW_DOC_TYP_APP_DOC_STAT_T 
  (DOC_TYP_ID)
/

-----------------------------------------------------------------------------
-- KREW_DOC_TYP_ATTR_T
-----------------------------------------------------------------------------

ALTER TABLE KREW_DOC_TYP_ATTR_T RENAME TO OLD_KREW_DOC_TYP_ATTR_T
/
CREATE TABLE KREW_DOC_TYP_ATTR_T
(
      DOC_TYP_ATTRIB_ID NUMBER(19)
        , DOC_TYP_ID VARCHAR2(40) NOT NULL
        , RULE_ATTR_ID NUMBER(19) NOT NULL
        , ORD_INDX NUMBER(4) default 0
)
/

INSERT INTO KREW_DOC_TYP_ATTR_T(
DOC_TYP_ATTRIB_ID
        , DOC_TYP_ID
        , RULE_ATTR_ID
        , ORD_INDX
)
SELECT DOC_TYP_ATTRIB_ID
        , DOC_TYP_ID
        , RULE_ATTR_ID
        , ORD_INDX
FROM OLD_KREW_DOC_TYP_ATTR_T
/

DROP TABLE OLD_KREW_DOC_TYP_ATTR_T CASCADE CONSTRAINTS PURGE
/

ALTER TABLE KREW_DOC_TYP_ATTR_T
    ADD CONSTRAINT KREW_DOC_TYP_ATTR_TP1
PRIMARY KEY (DOC_TYP_ATTRIB_ID)
/

CREATE INDEX KREW_DOC_TYP_ATTR_TI1 
  ON KREW_DOC_TYP_ATTR_T 
  (DOC_TYP_ID)
/

-----------------------------------------------------------------------------
-- KREW_RTE_NODE_T
-----------------------------------------------------------------------------

ALTER TABLE KREW_RTE_NODE_T RENAME TO OLD_KREW_RTE_NODE_T
/

CREATE TABLE KREW_RTE_NODE_T
(
      RTE_NODE_ID NUMBER(19)
        , DOC_TYP_ID VARCHAR2(40)
        , NM VARCHAR2(255) NOT NULL
        , TYP VARCHAR2(255) NOT NULL
        , RTE_MTHD_NM VARCHAR2(255)
        , RTE_MTHD_CD VARCHAR2(2)
        , FNL_APRVR_IND NUMBER(1)
        , MNDTRY_RTE_IND NUMBER(1)
        , ACTVN_TYP VARCHAR2(250)
        , BRCH_PROTO_ID NUMBER(19)
        , VER_NBR NUMBER(8) default 0
        , CONTENT_FRAGMENT VARCHAR2(4000)
        , GRP_ID VARCHAR2(40)
        , NEXT_DOC_STAT VARCHAR2(64)
)
/

INSERT INTO KREW_RTE_NODE_T(
RTE_NODE_ID
        , DOC_TYP_ID
        , NM
        , TYP
        , RTE_MTHD_NM
        , RTE_MTHD_CD
        , FNL_APRVR_IND
        , MNDTRY_RTE_IND
        , ACTVN_TYP
        , BRCH_PROTO_ID
        , VER_NBR
        , CONTENT_FRAGMENT
        , GRP_ID
        , NEXT_DOC_STAT
)
SELECT RTE_NODE_ID
        , DOC_TYP_ID
        , NM
        , TYP
        , RTE_MTHD_NM
        , RTE_MTHD_CD
        , FNL_APRVR_IND
        , MNDTRY_RTE_IND
        , ACTVN_TYP
        , BRCH_PROTO_ID
        , VER_NBR
        , CONTENT_FRAGMENT
        , GRP_ID
        , NEXT_DOC_STAT
FROM OLD_KREW_RTE_NODE_T
/

DROP TABLE OLD_KREW_RTE_NODE_T CASCADE CONSTRAINTS PURGE
/

ALTER TABLE KREW_RTE_NODE_T
    ADD CONSTRAINT KREW_RTE_NODE_TP1
PRIMARY KEY (RTE_NODE_ID)
/

CREATE INDEX KREW_RTE_NODE_TI1 
  ON KREW_RTE_NODE_T 
  (NM, DOC_TYP_ID)
/
CREATE INDEX KREW_RTE_NODE_TI2 
  ON KREW_RTE_NODE_T 
  (DOC_TYP_ID, FNL_APRVR_IND)
/
CREATE INDEX KREW_RTE_NODE_TI3 
  ON KREW_RTE_NODE_T 
  (BRCH_PROTO_ID)
/
CREATE INDEX KREW_RTE_NODE_TI4 
  ON KREW_RTE_NODE_T 
  (DOC_TYP_ID)
/
  
-----------------------------------------------------------------------------
-- KREW_DOC_TYP_PROC_T
-----------------------------------------------------------------------------

ALTER TABLE KREW_DOC_TYP_PROC_T RENAME TO OLD_KREW_DOC_TYP_PROC_T
/

CREATE TABLE KREW_DOC_TYP_PROC_T
(
      DOC_TYP_PROC_ID NUMBER(19)
        , DOC_TYP_ID VARCHAR2(40) NOT NULL
        , INIT_RTE_NODE_ID NUMBER(22)
        , NM VARCHAR2(255) NOT NULL
        , INIT_IND NUMBER(1) default 0 NOT NULL
        , VER_NBR NUMBER(8) default 0
)
/

INSERT INTO KREW_DOC_TYP_PROC_T(
DOC_TYP_PROC_ID
        , DOC_TYP_ID
        , INIT_RTE_NODE_ID
        , NM
        , INIT_IND
        , VER_NBR
)
SELECT DOC_TYP_PROC_ID
        , DOC_TYP_ID
        , INIT_RTE_NODE_ID
        , NM
        , INIT_IND
        , VER_NBR
FROM OLD_KREW_DOC_TYP_PROC_T
/

DROP TABLE OLD_KREW_DOC_TYP_PROC_T CASCADE CONSTRAINTS PURGE
/

ALTER TABLE KREW_DOC_TYP_PROC_T
    ADD CONSTRAINT KREW_DOC_TYP_PROC_TP1
PRIMARY KEY (DOC_TYP_PROC_ID)
/

CREATE INDEX KREW_DOC_TYP_PROC_TI1 
  ON KREW_DOC_TYP_PROC_T 
  (DOC_TYP_ID)
/
CREATE INDEX KREW_DOC_TYP_PROC_TI2 
  ON KREW_DOC_TYP_PROC_T 
  (INIT_RTE_NODE_ID)
/
CREATE INDEX KREW_DOC_TYP_PROC_TI3 
  ON KREW_DOC_TYP_PROC_T 
  (NM)
/





-- 
-- 2011-06-21.sql
-- 


ALTER TABLE KRIM_PERM_TMPL_T MODIFY NMSPC_CD VARCHAR2(40) NOT NULL
/
ALTER TABLE KRIM_PERM_TMPL_T MODIFY NM VARCHAR2(100) NOT NULL
/
ALTER TABLE KRIM_PERM_TMPL_T ADD CONSTRAINT KRIM_PERM_TMPL_TC1 UNIQUE (NM, NMSPC_CD)
/

ALTER TABLE KRIM_RSP_TMPL_T MODIFY NMSPC_CD VARCHAR2(40) NOT NULL
/
ALTER TABLE KRIM_RSP_TMPL_T MODIFY NM VARCHAR2(100) NOT NULL
/
ALTER TABLE KRIM_RSP_TMPL_T ADD CONSTRAINT KRIM_RSP_TMPL_TC1 UNIQUE (NM, NMSPC_CD)
/





-- 
-- 2011-06-23.sql
-- 


CREATE SEQUENCE KRMS_CTGRY_S INCREMENT BY 1 START WITH 1 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

CREATE TABLE KRMS_CTGRY_T
(
    CTGRY_ID VARCHAR2(40) NOT NULL
      , NM VARCHAR2(255) NOT NULL
      , NMSPC_CD VARCHAR2(40) NOT NULL
      , VER_NBR NUMBER(8) DEFAULT 0
    , PRIMARY KEY (CTGRY_ID)
    , CONSTRAINT KRMS_CTGRY_TC0 UNIQUE (NM, NMSPC_CD)
)
/

CREATE TABLE KRMS_TERM_SPEC_CTGRY_T
(
  TERM_SPEC_ID VARCHAR2(40) NOT NULL
      , CTGRY_ID VARCHAR2(40) NOT NULL
  , PRIMARY KEY (TERM_SPEC_ID, CTGRY_ID)
  , CONSTRAINT KRMS_TERM_SPEC_CTGRY_FK1 FOREIGN KEY (TERM_SPEC_ID) REFERENCES KRMS_TERM_SPEC_T (TERM_SPEC_ID)
  , CONSTRAINT KRMS_TERM_SPEC_CTGRY_FK2 FOREIGN KEY (CTGRY_ID) REFERENCES KRMS_CTGRY_T (CTGRY_ID)
)
/

CREATE TABLE KRMS_FUNC_CTGRY_T
(
  FUNC_ID VARCHAR2(40) NOT NULL
  , CTGRY_ID VARCHAR2(40) NOT NULL
  , PRIMARY KEY (FUNC_ID, CTGRY_ID)
  , CONSTRAINT KRMS_FUNC_CTGRY_FK1 FOREIGN KEY (FUNC_ID) REFERENCES KRMS_FUNC_T (FUNC_ID)
  , CONSTRAINT KRMS_FUNC_CTGRY_FK2 FOREIGN KEY (CTGRY_ID) REFERENCES KRMS_CTGRY_T (CTGRY_ID)
)
/





-- 
-- 2011-06-29.sql
-- 


UPDATE KRIM_PERM_T t SET NM='Use Document Operation Screen' WHERE PERM_ID = '140'
/
UPDATE KRIM_PERM_T t SET NM='Use Java Security Management Screen' WHERE PERM_ID = '141'
/
UPDATE KRIM_PERM_T t SET NM='Use Message Queue Screen' WHERE PERM_ID = '142'
/
UPDATE KRIM_PERM_T t SET NM='Use Service Registry Screen' WHERE PERM_ID = '143'
/
UPDATE KRIM_PERM_T t SET NM='Use Thread Pool Screen' WHERE PERM_ID = '144'
/
UPDATE KRIM_PERM_T t SET NM='Use Quartz Queue Screen' WHERE PERM_ID = '145'
/
UPDATE KRIM_PERM_T t SET NM='Ad Hoc Review RICE Document' WHERE PERM_ID = '146'
/
UPDATE KRIM_PERM_T t SET NM='Administer Routing RICE Document' WHERE PERM_ID = '147'
/
UPDATE KRIM_PERM_T t SET NM='Blanket Approve RICE Document' WHERE PERM_ID = '148'
/
UPDATE KRIM_PERM_T t SET NM='Initiate RICE Document' WHERE PERM_ID = '149'
/
UPDATE KRIM_PERM_T t SET NM='Assign Role' WHERE PERM_ID = '150'
/
UPDATE KRIM_PERM_T t SET NM='Grant Permission' WHERE PERM_ID = '151'
/
UPDATE KRIM_PERM_T t SET NM='Grant Responsibility' WHERE PERM_ID = '152'
/
UPDATE KRIM_PERM_T t SET NM='Populate Group' WHERE PERM_ID = '155'
/
UPDATE KRIM_PERM_T t SET NM='Copy RICE Document' WHERE PERM_ID = '156'
/
UPDATE KRIM_PERM_T t SET NM='Inquire Into RICE Records' WHERE PERM_ID = '161'
/
UPDATE KRIM_PERM_T t SET NM='Look Up RICE Records' WHERE PERM_ID = '162'
/
UPDATE KRIM_PERM_T t SET NM='Maintain System Parameter' WHERE PERM_ID = '163'
/
UPDATE KRIM_PERM_T t SET NM='Modify Batch Job' WHERE PERM_ID = '164'
/
UPDATE KRIM_PERM_T t SET NM='Open RICE Document' WHERE PERM_ID = '165'
/
UPDATE KRIM_PERM_T t SET NM='Use all RICE Screen' WHERE PERM_ID = '166'
/
UPDATE KRIM_PERM_T t SET NM='Cancel Document' WHERE PERM_ID = '167'
/
UPDATE KRIM_PERM_T t SET NM='Route Document' WHERE PERM_ID = '168'
/
UPDATE KRIM_PERM_T t SET NM='Take Requested Apprive Action' WHERE PERM_ID = '170'
/
UPDATE KRIM_PERM_T t SET NM='Take Requested FYI Action' WHERE PERM_ID = '172'
/
UPDATE KRIM_PERM_T t SET NM='Take Requested Acknowledge Action' WHERE PERM_ID = '173'
/
UPDATE KRIM_PERM_T t SET NM='Log In Kuali Portal' WHERE PERM_ID = '174'
/
UPDATE KRIM_PERM_T t SET NM='Edit Kuali ENROUTE Document Node Name PreRoute' WHERE PERM_ID = '180'
/
UPDATE KRIM_PERM_T t SET NM='Edit Kuali ENROUTE Document Route Status Code R' WHERE PERM_ID = '181'
/
UPDATE KRIM_PERM_T t SET NM='Full Unmask Tax Identification Number Payee ACH Document'  WHERE PERM_ID = '183'
/
UPDATE KRIM_PERM_T t SET NM='Add Note  Attachment Kuali Document' WHERE PERM_ID = '259'
/
UPDATE KRIM_PERM_T t SET NM='View Note  Attachment Kuali Document' WHERE PERM_ID = '261'
/
UPDATE KRIM_PERM_T t SET NM='Delete Note  Attachment Kuali Document' WHERE PERM_ID = '264'
/
UPDATE KRIM_PERM_T t SET NM='Use Screen XML Ingester Screen' WHERE PERM_ID = '265'
/
UPDATE KRIM_PERM_T t SET NM='Administer Pessimistic Locking' WHERE PERM_ID = '289'
/
UPDATE KRIM_PERM_T t SET NM='Save RICE Document' WHERE PERM_ID = '290'
/
UPDATE KRIM_PERM_T t SET NM='View Other Action List' WHERE PERM_ID = '298'
/
UPDATE KRIM_PERM_T t SET NM='Unrestricted Document Search' WHERE PERM_ID = '299'
/
UPDATE KRIM_PERM_T t SET NM='Full Unmask Tax Identification Number Person Document' WHERE PERM_ID = '306'
/
UPDATE KRIM_PERM_T t SET NM='Modify Entity' WHERE PERM_ID = '307'
/
UPDATE KRIM_PERM_T t SET NM='Send FYI Request Kuali Document' WHERE PERM_ID = '332'
/
UPDATE KRIM_PERM_T t SET NM='Send Acknowledge Request Kuali Document' WHERE PERM_ID = '333'
/
UPDATE KRIM_PERM_T t SET NM='Send Approve Request Kuali Document' WHERE PERM_ID = '334'
/
UPDATE KRIM_PERM_T t SET NM='Override Entity Privacy Preferences' WHERE PERM_ID = '378'
/
UPDATE KRIM_PERM_T t SET NM='Look Up Rule Template' WHERE PERM_ID = '701'
/
UPDATE KRIM_PERM_T t SET NM='Look Up Stylesheet' WHERE PERM_ID = '702'
/
UPDATE KRIM_PERM_T t SET NM='Look Up eDocLite' WHERE PERM_ID = '703'
/
UPDATE KRIM_PERM_T t SET NM='Look Up Rule Attribute' WHERE PERM_ID = '707'
/
UPDATE KRIM_PERM_T t SET NM='Look Up Parameter Component' WHERE PERM_ID = '719'
/
UPDATE KRIM_PERM_T t SET NM='Look Up Namespace' WHERE PERM_ID = '720'
/
UPDATE KRIM_PERM_T t SET NM='Look Up Parameter Type' WHERE PERM_ID = '721'
/
UPDATE KRIM_PERM_T t SET NM='Inquire Into Rule Template' WHERE PERM_ID = '801'
/
UPDATE KRIM_PERM_T t SET NM='Inquire Into Stylesheet' WHERE PERM_ID = '802'
/
UPDATE KRIM_PERM_T t SET NM='Inquire Into eDocLite' WHERE PERM_ID = '803'
/
UPDATE KRIM_PERM_T t SET NM='Inquire Into Rule Attribute' WHERE PERM_ID = '807'
/
UPDATE KRIM_PERM_T t SET NM='Inquire Into Pessimistic' WHERE PERM_ID = '814'
/
UPDATE KRIM_PERM_T t SET NM='Inquire Into Parameter Component' WHERE PERM_ID = '819'
/
UPDATE KRIM_PERM_T t SET NM='Inquire Into Namespace' WHERE PERM_ID = '820'
/
UPDATE KRIM_PERM_T t SET NM='Inquire Into Parameter Type' WHERE PERM_ID = '821'
/
UPDATE KRIM_PERM_T t SET NM='Populate Group KUALI Namespace' WHERE PERM_ID = '833'
/
UPDATE KRIM_PERM_T t SET NM='Assign Role KUALI Namespace' WHERE PERM_ID = '834'
/
UPDATE KRIM_PERM_T t SET NM='Grant Permission KUALI Namespace' WHERE PERM_ID = '835'
/
UPDATE KRIM_PERM_T t SET NM='Grant Responsibility KUALI Namespace' WHERE PERM_ID = '836'
/
UPDATE KRIM_PERM_T t SET NM='Use Configuration Viewer Screen' WHERE PERM_ID = '840'
/
UPDATE KRIM_PERM_T t SET NM='Add Message to Route Log'  WHERE PERM_ID = '841'
/
ALTER TABLE KRIM_PERM_T MODIFY NMSPC_CD VARCHAR2(40) NOT NULL
/
ALTER TABLE KRIM_PERM_T MODIFY NM VARCHAR2(100) NOT NULL
/
ALTER TABLE KRIM_PERM_T ADD CONSTRAINT KRIM_PERM_T_TC1 UNIQUE (NM, NMSPC_CD)
/
ALTER TABLE KRIM_RSP_T MODIFY NMSPC_CD VARCHAR2(40) NOT NULL
/
ALTER TABLE KRIM_RSP_T MODIFY NM VARCHAR2(100) NOT NULL
/
ALTER TABLE KRIM_RSP_T ADD CONSTRAINT KRIM_RSP_T_TC1 UNIQUE (NM, NMSPC_CD)
/





-- 
-- 2011-07-07-m6.sql
-- 


--
-- NOTE: when assembling this script for release, please merge any table rebuilds with those from 2011-04-28.sql
--

-----------------------------------------------------------------------------
-- KREW_DOC_NTE_T
-----------------------------------------------------------------------------
ALTER TABLE KREW_DOC_NTE_T RENAME TO TEMP_KREW_DOC_NTE_T
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_NTE_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE TEMP_KREW_DOC_NTE_T DROP CONSTRAINT KREW_DOC_NTE_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_NTE_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_NTE_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_NTE_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_NTE_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
CREATE TABLE KREW_DOC_NTE_T ( 
    DOC_NTE_ID      VARCHAR2(40),
    DOC_HDR_ID      VARCHAR2(40) NOT NULL,
    AUTH_PRNCPL_ID  VARCHAR2(40) NOT NULL,
    CRT_DT          DATE NOT NULL,
    TXT             VARCHAR2(4000) NULL,
    VER_NBR         NUMBER(8,0) DEFAULT 0 NULL
)
/
ALTER TABLE KREW_DOC_NTE_T ADD CONSTRAINT KREW_DOC_NTE_TP1 PRIMARY KEY (DOC_NTE_ID)
/
CREATE INDEX KREW_DOC_NTE_TI1 ON KREW_DOC_NTE_T (DOC_HDR_ID)
/
INSERT INTO KREW_DOC_NTE_T
(DOC_NTE_ID, DOC_HDR_ID, AUTH_PRNCPL_ID, CRT_DT, TXT, VER_NBR)
SELECT CAST(DOC_NTE_ID as VARCHAR2(40)), DOC_HDR_ID, AUTH_PRNCPL_ID, CRT_DT, TXT, VER_NBR
FROM TEMP_KREW_DOC_NTE_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_NTE_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_NTE_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_ATT_T
-----------------------------------------------------------------------------
ALTER TABLE KREW_ATT_T RENAME TO TEMP_KREW_ATT_T
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_ATT_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE TEMP_KREW_ATT_T DROP CONSTRAINT KREW_ATT_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ATT_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ATT_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ATT_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ATT_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
CREATE TABLE KREW_ATT_T (
    ATTACHMENT_ID   VARCHAR2(40),
    NTE_ID          VARCHAR2(40) NULL,
    FILE_NM         VARCHAR2(255) NOT NULL,
    FILE_LOC        VARCHAR2(255) NOT NULL,
    MIME_TYP        VARCHAR2(255) NOT NULL,
    VER_NBR         NUMBER(8,0) DEFAULT 0 NULL
)
/
ALTER TABLE KREW_ATT_T ADD CONSTRAINT KREW_ATT_TP1 PRIMARY KEY (ATTACHMENT_ID)
/
CREATE INDEX KREW_ATT_TI1 ON KREW_ATT_T(NTE_ID)
/
INSERT INTO KREW_ATT_T
(ATTACHMENT_ID, NTE_ID, FILE_NM, FILE_LOC, MIME_TYP, VER_NBR)
SELECT CAST(ATTACHMENT_ID as VARCHAR2(40)), CAST(NTE_ID as VARCHAR2(40)), FILE_NM, FILE_LOC, MIME_TYP, VER_NBR
FROM TEMP_KREW_ATT_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_ATT_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_ATT_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_ACTN_ITM_T
-----------------------------------------------------------------------------

DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_ACTN_ITM_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_ACTN_ITM_T DROP CONSTRAINT KREW_ACTN_ITM_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_ITM_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_ITM_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_ITM_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_ITM_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_ITM_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_ITM_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_ITM_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_ITM_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_ITM_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_ITM_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_ITM_TI5' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_ITM_TI5';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_ITM_TI5 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_ACTN_ITM_T RENAME TO TEMP_KREW_ACTN_ITM_T
/
CREATE TABLE KREW_ACTN_ITM_T
(
      ACTN_ITM_ID VARCHAR2(40)
        , PRNCPL_ID VARCHAR2(40) NOT NULL
        , ASND_DT DATE NOT NULL
        , RQST_CD CHAR(1) NOT NULL
        , ACTN_RQST_ID VARCHAR2(40) NOT NULL
        , DOC_HDR_ID VARCHAR2(40) NOT NULL
        , ROLE_NM VARCHAR2(2000)
        , DLGN_PRNCPL_ID VARCHAR2(40)
        , DOC_HDR_TTL VARCHAR2(255)
        , DOC_TYP_LBL VARCHAR2(128) NOT NULL
        , DOC_HDLR_URL VARCHAR2(255) NOT NULL
        , DOC_TYP_NM VARCHAR2(64) NOT NULL
        , RSP_ID VARCHAR2(40) NOT NULL
        , DLGN_TYP VARCHAR2(1)
        , VER_NBR NUMBER(8) default 0
        , DTYPE VARCHAR2(50)
        , GRP_ID VARCHAR2(40)
        , DLGN_GRP_ID VARCHAR2(40)
        , RQST_LBL VARCHAR2(255)
)
/
ALTER TABLE KREW_ACTN_ITM_T
    ADD CONSTRAINT KREW_ACTN_ITM_TP1
PRIMARY KEY (ACTN_ITM_ID)
/
CREATE INDEX KREW_ACTN_ITM_TI1
  ON KREW_ACTN_ITM_T 
  (PRNCPL_ID)
/
CREATE INDEX KREW_ACTN_ITM_TI2
  ON KREW_ACTN_ITM_T
  (DOC_HDR_ID)
/
CREATE INDEX KREW_ACTN_ITM_TI3
  ON KREW_ACTN_ITM_T
  (ACTN_RQST_ID)
/
CREATE INDEX KREW_ACTN_ITM_TI5
  ON KREW_ACTN_ITM_T
  (PRNCPL_ID, DLGN_TYP, DOC_HDR_ID)
/
INSERT INTO KREW_ACTN_ITM_T
(ACTN_ITM_ID, PRNCPL_ID, ASND_DT, RQST_CD, ACTN_RQST_ID, DOC_HDR_ID, ROLE_NM, DLGN_PRNCPL_ID, 
 DOC_HDR_TTL, DOC_TYP_LBL, DOC_HDLR_URL, DOC_TYP_NM, RSP_ID, DLGN_TYP, VER_NBR, DTYPE, 
 GRP_ID, DLGN_GRP_ID, RQST_LBL)
SELECT CAST(ACTN_ITM_ID as VARCHAR2(40)), PRNCPL_ID, ASND_DT, RQST_CD, CAST(ACTN_RQST_ID as VARCHAR2(40)), DOC_HDR_ID, 
 ROLE_NM, DLGN_PRNCPL_ID, 
 DOC_HDR_TTL, DOC_TYP_LBL, DOC_HDLR_URL, DOC_TYP_NM, CAST(RSP_ID as VARCHAR2(40)), DLGN_TYP, VER_NBR, DTYPE, 
 GRP_ID, DLGN_GRP_ID, RQST_LBL
FROM TEMP_KREW_ACTN_ITM_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_ACTN_ITM_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_ACTN_ITM_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_ACTN_TKN_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_ACTN_TKN_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_ACTN_TKN_T DROP CONSTRAINT KREW_ACTN_TKN_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_TKN_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_TKN_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_TKN_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_TKN_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_TKN_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_TKN_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_TKN_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_TKN_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_TKN_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_TKN_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_TKN_TI4' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_TKN_TI4';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_TKN_TI4 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_TKN_TI5' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_TKN_TI5';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_TKN_TI5 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_ACTN_TKN_T RENAME TO TEMP_KREW_ACTN_TKN_T
/
CREATE TABLE KREW_ACTN_TKN_T
(
      ACTN_TKN_ID VARCHAR2(40)
        , DOC_HDR_ID VARCHAR2(40) NOT NULL
        , PRNCPL_ID VARCHAR2(40) NOT NULL
        , DLGTR_PRNCPL_ID VARCHAR2(40)
        , ACTN_CD CHAR(1) NOT NULL
        , ACTN_DT DATE NOT NULL
        , DOC_VER_NBR NUMBER(8) NOT NULL
        , ANNOTN VARCHAR2(2000)
        , CUR_IND NUMBER(1) default 1
        , VER_NBR NUMBER(8) default 0
        , DLGTR_GRP_ID VARCHAR2(40)
)
/
ALTER TABLE KREW_ACTN_TKN_T
    ADD CONSTRAINT KREW_ACTN_TKN_TP1
PRIMARY KEY (ACTN_TKN_ID)
/
CREATE INDEX KREW_ACTN_TKN_TI1 
  ON KREW_ACTN_TKN_T 
  (DOC_HDR_ID, PRNCPL_ID)
/
CREATE INDEX KREW_ACTN_TKN_TI2 
  ON KREW_ACTN_TKN_T 
  (DOC_HDR_ID, PRNCPL_ID, ACTN_CD)
/
CREATE INDEX KREW_ACTN_TKN_TI3 
  ON KREW_ACTN_TKN_T 
  (PRNCPL_ID)
/
CREATE INDEX KREW_ACTN_TKN_TI4 
  ON KREW_ACTN_TKN_T 
  (DLGTR_PRNCPL_ID)
/
CREATE INDEX KREW_ACTN_TKN_TI5 
  ON KREW_ACTN_TKN_T 
  (DOC_HDR_ID)
/
INSERT INTO KREW_ACTN_TKN_T
(ACTN_TKN_ID, DOC_HDR_ID, PRNCPL_ID, DLGTR_PRNCPL_ID, ACTN_CD, ACTN_DT, DOC_VER_NBR, ANNOTN, 
CUR_IND, VER_NBR, DLGTR_GRP_ID)
SELECT CAST(ACTN_TKN_ID as VARCHAR2(40)), DOC_HDR_ID, PRNCPL_ID, DLGTR_PRNCPL_ID, ACTN_CD, ACTN_DT, DOC_VER_NBR, ANNOTN, 
CUR_IND, VER_NBR, DLGTR_GRP_ID
FROM TEMP_KREW_ACTN_TKN_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_ACTN_TKN_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_ACTN_TKN_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_ACTN_RQST_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_ACTN_RQST_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_ACTN_RQST_T DROP CONSTRAINT KREW_ACTN_RQST_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_RQST_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_RQST_T11' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_RQST_T11';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_RQST_T11 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_RQST_T12' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_RQST_T12';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_RQST_T12 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_RQST_T13' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_RQST_T13';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_RQST_T13 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_RQST_T14' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_RQST_T14';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_RQST_T14 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_RQST_T15' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_RQST_T15';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_RQST_T15 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_RQST_T16' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_RQST_T16';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_RQST_T16 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_RQST_T17' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_RQST_T17';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_RQST_T17 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_ACTN_RQST_T19' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_ACTN_RQST_T19';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_ACTN_RQST_T19 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_ACTN_RQST_T RENAME TO TEMP_KREW_ACTN_RQST_T
/
CREATE TABLE KREW_ACTN_RQST_T
(
      ACTN_RQST_ID VARCHAR2(40)
        , PARNT_ID VARCHAR2(40)
        , ACTN_RQST_CD CHAR(1) NOT NULL
        , DOC_HDR_ID VARCHAR2(40) NOT NULL
        , RULE_ID VARCHAR2(40)
        , STAT_CD CHAR(1) NOT NULL
        , RSP_ID VARCHAR2(40) NOT NULL
        , PRNCPL_ID VARCHAR2(40)
        , ROLE_NM VARCHAR2(2000)
        , QUAL_ROLE_NM VARCHAR2(2000)
        , QUAL_ROLE_NM_LBL_TXT VARCHAR2(2000)
        , RECIP_TYP_CD CHAR(1)
        , PRIO_NBR NUMBER(8) NOT NULL
        , RTE_TYP_NM VARCHAR2(255)
        , RTE_LVL_NBR NUMBER(8) NOT NULL
        , RTE_NODE_INSTN_ID VARCHAR2(40)
        , ACTN_TKN_ID VARCHAR2(40)
        , DOC_VER_NBR NUMBER(8) NOT NULL
        , CRTE_DT DATE NOT NULL
        , RSP_DESC_TXT VARCHAR2(200)
        , FRC_ACTN NUMBER(1) default 0
        , ACTN_RQST_ANNOTN_TXT VARCHAR2(2000)
        , DLGN_TYP CHAR(1)
        , APPR_PLCY CHAR(1)
        , CUR_IND NUMBER(1) default 1
        , VER_NBR NUMBER(8) default 0
        , GRP_ID VARCHAR2(40)
        , RQST_LBL VARCHAR2(255)
)
/
ALTER TABLE KREW_ACTN_RQST_T
    ADD CONSTRAINT KREW_ACTN_RQST_TP1
PRIMARY KEY (ACTN_RQST_ID)
/
CREATE INDEX KREW_ACTN_RQST_T11 
  ON KREW_ACTN_RQST_T 
  (DOC_HDR_ID)
/
CREATE INDEX KREW_ACTN_RQST_T12 
  ON KREW_ACTN_RQST_T 
  (PRNCPL_ID)
/
CREATE INDEX KREW_ACTN_RQST_T13 
  ON KREW_ACTN_RQST_T 
  (ACTN_TKN_ID)
/
CREATE INDEX KREW_ACTN_RQST_T14 
  ON KREW_ACTN_RQST_T 
  (PARNT_ID)
/
CREATE INDEX KREW_ACTN_RQST_T15 
  ON KREW_ACTN_RQST_T 
  (RSP_ID)
/
CREATE INDEX KREW_ACTN_RQST_T16 
  ON KREW_ACTN_RQST_T 
  (STAT_CD, RSP_ID)
/
CREATE INDEX KREW_ACTN_RQST_T17 
  ON KREW_ACTN_RQST_T 
  (RTE_NODE_INSTN_ID)
/
CREATE INDEX KREW_ACTN_RQST_T19 
  ON KREW_ACTN_RQST_T 
  (STAT_CD, DOC_HDR_ID)
/
INSERT INTO KREW_ACTN_RQST_T
(ACTN_RQST_ID, PARNT_ID, ACTN_RQST_CD, DOC_HDR_ID, RULE_ID, STAT_CD, RSP_ID, PRNCPL_ID, 
ROLE_NM, QUAL_ROLE_NM, QUAL_ROLE_NM_LBL_TXT, RECIP_TYP_CD, PRIO_NBR, RTE_TYP_NM, 
RTE_LVL_NBR, RTE_NODE_INSTN_ID, ACTN_TKN_ID, DOC_VER_NBR, CRTE_DT, RSP_DESC_TXT, 
FRC_ACTN, ACTN_RQST_ANNOTN_TXT, DLGN_TYP, APPR_PLCY, CUR_IND, VER_NBR, GRP_ID, RQST_LBL)
SELECT CAST(ACTN_RQST_ID as VARCHAR2(40)), CAST(PARNT_ID as VARCHAR2(40)), 
ACTN_RQST_CD, DOC_HDR_ID, CAST(RULE_ID as VARCHAR2(40)), STAT_CD, CAST(RSP_ID as VARCHAR2(40)), PRNCPL_ID, 
ROLE_NM, QUAL_ROLE_NM, QUAL_ROLE_NM_LBL_TXT, RECIP_TYP_CD, PRIO_NBR, RTE_TYP_NM, 
RTE_LVL_NBR, CAST(RTE_NODE_INSTN_ID as VARCHAR2(40)), CAST(ACTN_TKN_ID as VARCHAR2(40)), DOC_VER_NBR, 
CRTE_DT, RSP_DESC_TXT, 
FRC_ACTN, ACTN_RQST_ANNOTN_TXT, DLGN_TYP, APPR_PLCY, CUR_IND, VER_NBR, GRP_ID, RQST_LBL
FROM TEMP_KREW_ACTN_RQST_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_ACTN_RQST_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_ACTN_RQST_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RULE_TMPL_T
-----------------------------------------------------------------------------
ALTER TABLE KREW_RULE_TMPL_T DROP CONSTRAINT KREW_RULE_TMPL_TC0
/
ALTER TABLE KREW_RULE_TMPL_T DROP CONSTRAINT KREW_RULE_TMPL_TI1
/
ALTER TABLE KREW_RULE_TMPL_T RENAME TO TEMP_KREW_RULE_TMPL_T
/
ALTER TABLE TEMP_KREW_RULE_TMPL_T DROP CONSTRAINT KREW_RULE_TMPL_TP1
/
CREATE TABLE KREW_RULE_TMPL_T
(
      RULE_TMPL_ID VARCHAR2(40)
        , NM VARCHAR2(250) NOT NULL
        , RULE_TMPL_DESC VARCHAR2(2000)
        , DLGN_RULE_TMPL_ID VARCHAR2(40)
        , VER_NBR NUMBER(8) default 0
        , OBJ_ID VARCHAR2(36) NOT NULL
    
    , CONSTRAINT KREW_RULE_TMPL_TC0 UNIQUE (OBJ_ID)
    , CONSTRAINT KREW_RULE_TMPL_TI1 UNIQUE (NM)
)
/
ALTER TABLE KREW_RULE_TMPL_T
    ADD CONSTRAINT KREW_RULE_TMPL_TP1
PRIMARY KEY (RULE_TMPL_ID)
/
INSERT INTO KREW_RULE_TMPL_T
(RULE_TMPL_ID, NM, RULE_TMPL_DESC, DLGN_RULE_TMPL_ID, VER_NBR, OBJ_ID)
SELECT CAST(RULE_TMPL_ID as VARCHAR2(40)), NM, RULE_TMPL_DESC, CAST(DLGN_RULE_TMPL_ID as VARCHAR2(40)), 
VER_NBR, OBJ_ID
FROM TEMP_KREW_RULE_TMPL_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_TMPL_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_TMPL_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RULE_TMPL_ATTR_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RULE_TMPL_ATTR_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RULE_TMPL_ATTR_T DROP CONSTRAINT KREW_RULE_TMPL_ATTR_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RULE_TMPL_ATTR_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RULE_TMPL_ATTR_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RULE_TMPL_ATTR_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RULE_TMPL_ATTR_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RULE_TMPL_ATTR_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RULE_TMPL_ATTR_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RULE_TMPL_ATTR_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RULE_TMPL_ATTR_T RENAME TO TEMP_KREW_RULE_TMPL_ATTR_T
/
ALTER TABLE TEMP_KREW_RULE_TMPL_ATTR_T DROP CONSTRAINT KREW_RULE_TMPL_ATTR_TC0
/
CREATE TABLE KREW_RULE_TMPL_ATTR_T
(
      RULE_TMPL_ATTR_ID VARCHAR2(40)
        , RULE_TMPL_ID VARCHAR2(40) NOT NULL
        , RULE_ATTR_ID VARCHAR2(40) NOT NULL
        , REQ_IND NUMBER(1) NOT NULL
        , ACTV_IND NUMBER(1) NOT NULL
        , DSPL_ORD NUMBER(5) NOT NULL
        , DFLT_VAL VARCHAR2(2000)
        , VER_NBR NUMBER(8) default 0
        , OBJ_ID VARCHAR2(36) NOT NULL
    , CONSTRAINT KREW_RULE_TMPL_ATTR_TC0 UNIQUE (OBJ_ID)
)
/
ALTER TABLE KREW_RULE_TMPL_ATTR_T
    ADD CONSTRAINT KREW_RULE_TMPL_ATTR_TP1
PRIMARY KEY (RULE_TMPL_ATTR_ID)
/
CREATE INDEX KREW_RULE_TMPL_ATTR_TI1 
  ON KREW_RULE_TMPL_ATTR_T 
  (RULE_TMPL_ID)
/
CREATE INDEX KREW_RULE_TMPL_ATTR_TI2 
  ON KREW_RULE_TMPL_ATTR_T 
  (RULE_ATTR_ID)
/
INSERT INTO KREW_RULE_TMPL_ATTR_T
(RULE_TMPL_ATTR_ID, RULE_TMPL_ID, RULE_ATTR_ID, REQ_IND, ACTV_IND, DSPL_ORD, DFLT_VAL, VER_NBR, OBJ_ID)
SELECT 
CAST(RULE_TMPL_ATTR_ID as VARCHAR2(40)), CAST(RULE_TMPL_ID as VARCHAR2(40)), 
CAST(RULE_ATTR_ID as VARCHAR2(40)), REQ_IND, ACTV_IND, DSPL_ORD, DFLT_VAL, VER_NBR, OBJ_ID
FROM TEMP_KREW_RULE_TMPL_ATTR_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_TMPL_ATTR_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_TMPL_ATTR_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RULE_T
-----------------------------------------------------------------------------
ALTER TABLE KREW_RULE_T DROP CONSTRAINT KREW_RULE_TC0
/
ALTER TABLE KREW_RULE_T DROP CONSTRAINT KREW_RULE_TP1
/
ALTER TABLE KREW_RULE_T DROP CONSTRAINT KREW_RULE_TR1
/
ALTER TABLE KREW_RULE_T RENAME TO TEMP_KREW_RULE_T
/
CREATE TABLE KREW_RULE_T
(
      RULE_ID VARCHAR2(40)
        , NM VARCHAR2(256)
        , RULE_TMPL_ID VARCHAR2(40)
        , RULE_EXPR_ID VARCHAR2(40)
        , ACTV_IND NUMBER(1) NOT NULL
        , RULE_BASE_VAL_DESC VARCHAR2(2000)
        , FRC_ACTN NUMBER(1) NOT NULL
        , DOC_TYP_NM VARCHAR2(64) NOT NULL
        , DOC_HDR_ID VARCHAR2(40)
        , TMPL_RULE_IND NUMBER(1)
        , FRM_DT DATE
        , TO_DT DATE
        , DACTVN_DT DATE
        , CUR_IND NUMBER(1) default 0
        , RULE_VER_NBR NUMBER(8) default 0
        , DLGN_IND NUMBER(1)
        , PREV_RULE_VER_NBR VARCHAR2(40)
        , ACTVN_DT DATE
        , VER_NBR NUMBER(8) default 0
        , OBJ_ID VARCHAR2(36) NOT NULL
    , CONSTRAINT KREW_RULE_TC0 UNIQUE (OBJ_ID)
)
/
ALTER TABLE KREW_RULE_T
    ADD CONSTRAINT KREW_RULE_TP1
PRIMARY KEY (RULE_ID)
/
INSERT INTO KREW_RULE_T
(RULE_ID, NM, RULE_TMPL_ID, RULE_EXPR_ID, ACTV_IND, RULE_BASE_VAL_DESC, FRC_ACTN, 
DOC_TYP_NM, DOC_HDR_ID, TMPL_RULE_IND, FRM_DT, TO_DT, DACTVN_DT, CUR_IND, RULE_VER_NBR, 
DLGN_IND, PREV_RULE_VER_NBR, ACTVN_DT, VER_NBR, OBJ_ID)
SELECT 
CAST(RULE_ID as VARCHAR2(40)), NM, CAST(RULE_TMPL_ID as VARCHAR2(40)), CAST(RULE_EXPR_ID as VARCHAR2(40)), 
ACTV_IND, RULE_BASE_VAL_DESC, FRC_ACTN, 
DOC_TYP_NM, DOC_HDR_ID, TMPL_RULE_IND, FRM_DT, TO_DT, DACTVN_DT, CUR_IND, RULE_VER_NBR, 
DLGN_IND, CAST(PREV_RULE_VER_NBR as VARCHAR2(40)), ACTVN_DT, VER_NBR, OBJ_ID
FROM TEMP_KREW_RULE_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_DLGN_RSP_T
-----------------------------------------------------------------------------
ALTER TABLE KREW_DLGN_RSP_T DROP CONSTRAINT KREW_DLGN_RSP_TC0
/
ALTER TABLE KREW_DLGN_RSP_T DROP CONSTRAINT KREW_DLGN_RSP_TP1
/
ALTER TABLE KREW_DLGN_RSP_T RENAME TO TEMP_KREW_DLGN_RSP_T
/
CREATE TABLE KREW_DLGN_RSP_T
(
      DLGN_RULE_ID VARCHAR2(40)
        , RSP_ID VARCHAR2(40) NOT NULL
        , DLGN_RULE_BASE_VAL_ID VARCHAR2(40) NOT NULL
        , DLGN_TYP VARCHAR2(20) NOT NULL
        , VER_NBR NUMBER(8) default 0
        , OBJ_ID VARCHAR2(36) NOT NULL
    , CONSTRAINT KREW_DLGN_RSP_TC0 UNIQUE (OBJ_ID)
)
/
ALTER TABLE KREW_DLGN_RSP_T
    ADD CONSTRAINT KREW_DLGN_RSP_TP1
PRIMARY KEY (DLGN_RULE_ID)
/
INSERT INTO KREW_DLGN_RSP_T
(DLGN_RULE_ID, RSP_ID, DLGN_RULE_BASE_VAL_ID, DLGN_TYP, VER_NBR, OBJ_ID)
SELECT 
CAST(DLGN_RULE_ID as VARCHAR2(40)), CAST(RSP_ID as VARCHAR2(40)), CAST(DLGN_RULE_BASE_VAL_ID as VARCHAR2(40)), 
DLGN_TYP, VER_NBR, OBJ_ID
FROM TEMP_KREW_DLGN_RSP_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DLGN_RSP_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DLGN_RSP_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RULE_RSP_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RULE_RSP_TC0' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RULE_RSP_T DROP CONSTRAINT KREW_RULE_RSP_TC0';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RULE_RSP_TC0 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RULE_RSP_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RULE_RSP_T DROP CONSTRAINT KREW_RULE_RSP_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RULE_RSP_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RULE_RSP_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RULE_RSP_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RULE_RSP_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RULE_RSP_T RENAME TO TEMP_KREW_RULE_RSP_T
/
CREATE TABLE KREW_RULE_RSP_T
(
      RULE_RSP_ID VARCHAR2(40)
        , RSP_ID VARCHAR2(40) NOT NULL
        , RULE_ID VARCHAR2(40) NOT NULL
        , PRIO NUMBER(5)
        , ACTN_RQST_CD VARCHAR2(2000)
        , NM VARCHAR2(200)
        , TYP VARCHAR2(1)
        , APPR_PLCY CHAR(1)
        , VER_NBR NUMBER(8) default 0
        , OBJ_ID VARCHAR2(36) NOT NULL
    , CONSTRAINT KREW_RULE_RSP_TC0 UNIQUE (OBJ_ID)
)
/
ALTER TABLE KREW_RULE_RSP_T
    ADD CONSTRAINT KREW_RULE_RSP_TP1
PRIMARY KEY (RULE_RSP_ID)
/
CREATE INDEX KREW_RULE_RSP_TI1 
  ON KREW_RULE_RSP_T 
  (RULE_ID)
/
INSERT INTO KREW_RULE_RSP_T
(RULE_RSP_ID, RSP_ID, RULE_ID, PRIO, ACTN_RQST_CD, NM, TYP, APPR_PLCY, VER_NBR, OBJ_ID)
SELECT CAST(RULE_RSP_ID as VARCHAR2(40)), CAST(RSP_ID as VARCHAR2(40)), CAST(RULE_ID as VARCHAR2(40)), 
PRIO, ACTN_RQST_CD, NM, TYP, APPR_PLCY, VER_NBR, OBJ_ID
FROM TEMP_KREW_RULE_RSP_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_RSP_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_RSP_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RULE_EXT_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RULE_EXT_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RULE_EXT_T DROP CONSTRAINT KREW_RULE_EXT_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RULE_EXT_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RULE_EXT_T1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RULE_EXT_T1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RULE_EXT_T1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RULE_EXT_T RENAME TO TEMP_KREW_RULE_EXT_T
/
CREATE TABLE KREW_RULE_EXT_T
(
      RULE_EXT_ID VARCHAR2(40)
        , RULE_TMPL_ATTR_ID VARCHAR2(40) NOT NULL
        , RULE_ID VARCHAR2(40) NOT NULL
        , VER_NBR NUMBER(8) default 0
)
/
ALTER TABLE KREW_RULE_EXT_T
    ADD CONSTRAINT KREW_RULE_EXT_TP1
PRIMARY KEY (RULE_EXT_ID)
/
CREATE INDEX KREW_RULE_EXT_T1 
  ON KREW_RULE_EXT_T 
  (RULE_ID)
/
INSERT INTO KREW_RULE_EXT_T
(RULE_EXT_ID, RULE_TMPL_ATTR_ID, RULE_ID, VER_NBR)
SELECT CAST(RULE_EXT_ID as VARCHAR2(40)), CAST(RULE_TMPL_ATTR_ID as VARCHAR2(40)), 
CAST(RULE_ID as VARCHAR2(40)), VER_NBR 
FROM TEMP_KREW_RULE_EXT_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_EXT_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_EXT_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RTE_NODE_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RTE_NODE_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RTE_NODE_T DROP CONSTRAINT KREW_RTE_NODE_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_TI4' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_TI4';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_TI4 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RTE_NODE_T RENAME TO TEMP_KREW_RTE_NODE_T
/
CREATE TABLE KREW_RTE_NODE_T
(
      RTE_NODE_ID VARCHAR2(40)
        , DOC_TYP_ID NUMBER(19)
        , NM VARCHAR2(255) NOT NULL
        , TYP VARCHAR2(255) NOT NULL
        , RTE_MTHD_NM VARCHAR2(255)
        , RTE_MTHD_CD VARCHAR2(2)
        , FNL_APRVR_IND NUMBER(1)
        , MNDTRY_RTE_IND NUMBER(1)
        , ACTVN_TYP VARCHAR2(250)
        , BRCH_PROTO_ID VARCHAR2(40)
        , VER_NBR NUMBER(8) default 0
        , CONTENT_FRAGMENT VARCHAR2(4000)
        , GRP_ID VARCHAR2(40)
        , NEXT_DOC_STAT VARCHAR2(64)
)
/
ALTER TABLE KREW_RTE_NODE_T
    ADD CONSTRAINT KREW_RTE_NODE_TP1
PRIMARY KEY (RTE_NODE_ID)
/
CREATE INDEX KREW_RTE_NODE_TI1 
  ON KREW_RTE_NODE_T 
  (NM, DOC_TYP_ID)
/
CREATE INDEX KREW_RTE_NODE_TI2 
  ON KREW_RTE_NODE_T 
  (DOC_TYP_ID, FNL_APRVR_IND)
/
CREATE INDEX KREW_RTE_NODE_TI3 
  ON KREW_RTE_NODE_T 
  (BRCH_PROTO_ID)
/
CREATE INDEX KREW_RTE_NODE_TI4 
  ON KREW_RTE_NODE_T 
  (DOC_TYP_ID)
/
INSERT INTO KREW_RTE_NODE_T
(RTE_NODE_ID, DOC_TYP_ID, NM, TYP, RTE_MTHD_NM, RTE_MTHD_CD, FNL_APRVR_IND,
MNDTRY_RTE_IND, ACTVN_TYP, BRCH_PROTO_ID, VER_NBR, CONTENT_FRAGMENT, GRP_ID, NEXT_DOC_STAT)
SELECT CAST(RTE_NODE_ID as VARCHAR2(40)), DOC_TYP_ID, NM, TYP, RTE_MTHD_NM, RTE_MTHD_CD, FNL_APRVR_IND,
MNDTRY_RTE_IND, ACTVN_TYP, CAST(BRCH_PROTO_ID as VARCHAR2(40)), VER_NBR, CONTENT_FRAGMENT, GRP_ID, NEXT_DOC_STAT
FROM TEMP_KREW_RTE_NODE_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_NODE_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_NODE_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RTE_NODE_INSTN_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RTE_NODE_INSTN_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RTE_NODE_INSTN_T DROP CONSTRAINT KREW_RTE_NODE_INSTN_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_INSTN_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_INSTN_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_INSTN_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_INSTN_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_INSTN_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_INSTN_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_INSTN_TI4' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_INSTN_TI4';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_TI4 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RTE_NODE_INSTN_T RENAME TO TEMP_KREW_RTE_NODE_INSTN_T
/
CREATE TABLE KREW_RTE_NODE_INSTN_T
(
      RTE_NODE_INSTN_ID VARCHAR2(40)
        , DOC_HDR_ID VARCHAR2(40) NOT NULL
        , RTE_NODE_ID VARCHAR2(40) NOT NULL
        , BRCH_ID VARCHAR2(40)
        , PROC_RTE_NODE_INSTN_ID VARCHAR2(40)
        , ACTV_IND NUMBER(1) default 0 NOT NULL
        , CMPLT_IND NUMBER(1) default 0 NOT NULL
        , INIT_IND NUMBER(1) default 0 NOT NULL
        , VER_NBR NUMBER(8) default 0
)
/
ALTER TABLE KREW_RTE_NODE_INSTN_T
    ADD CONSTRAINT KREW_RTE_NODE_INSTN_TP1
PRIMARY KEY (RTE_NODE_INSTN_ID)
/
CREATE INDEX KREW_RTE_NODE_INSTN_TI1 
  ON KREW_RTE_NODE_INSTN_T 
  (DOC_HDR_ID, ACTV_IND, CMPLT_IND)
/
CREATE INDEX KREW_RTE_NODE_INSTN_TI2 
  ON KREW_RTE_NODE_INSTN_T 
  (RTE_NODE_ID)
/
CREATE INDEX KREW_RTE_NODE_INSTN_TI3 
  ON KREW_RTE_NODE_INSTN_T 
  (BRCH_ID)
/
CREATE INDEX KREW_RTE_NODE_INSTN_TI4 
  ON KREW_RTE_NODE_INSTN_T 
  (PROC_RTE_NODE_INSTN_ID)
/
INSERT INTO KREW_RTE_NODE_INSTN_T
(RTE_NODE_INSTN_ID, DOC_HDR_ID, RTE_NODE_ID, BRCH_ID, PROC_RTE_NODE_INSTN_ID, 
ACTV_IND, CMPLT_IND, INIT_IND, VER_NBR)
SELECT CAST(RTE_NODE_INSTN_ID as VARCHAR2(40)), DOC_HDR_ID, 
CAST(RTE_NODE_ID as VARCHAR2(40)), CAST(BRCH_ID as VARCHAR2(40)), 
CAST(PROC_RTE_NODE_INSTN_ID as VARCHAR2(40)), 
ACTV_IND, CMPLT_IND, INIT_IND, VER_NBR
FROM TEMP_KREW_RTE_NODE_INSTN_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_NODE_INSTN_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_NODE_INSTN_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RTE_NODE_INSTN_LNK_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RTE_NODE_INSTN_LNK_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RTE_NODE_INSTN_LNK_T DROP CONSTRAINT KREW_RTE_NODE_INSTN_LNK_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_LNK_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_INSTN_LNK_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_INSTN_LNK_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_LNK_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_INSTN_LNK_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_INSTN_LNK_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_LNK_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RTE_NODE_INSTN_LNK_T RENAME TO TEMP_KREW_RTE_NODE_INSTN_LNK_T
/
CREATE TABLE KREW_RTE_NODE_INSTN_LNK_T
(
      FROM_RTE_NODE_INSTN_ID VARCHAR2(40)
        , TO_RTE_NODE_INSTN_ID VARCHAR2(40)
)
/
ALTER TABLE KREW_RTE_NODE_INSTN_LNK_T
    ADD CONSTRAINT KREW_RTE_NODE_INSTN_LNK_TP1
PRIMARY KEY (FROM_RTE_NODE_INSTN_ID,TO_RTE_NODE_INSTN_ID)
/
CREATE INDEX KREW_RTE_NODE_INSTN_LNK_TI1 
  ON KREW_RTE_NODE_INSTN_LNK_T 
  (FROM_RTE_NODE_INSTN_ID)
/
CREATE INDEX KREW_RTE_NODE_INSTN_LNK_TI2 
  ON KREW_RTE_NODE_INSTN_LNK_T 
  (TO_RTE_NODE_INSTN_ID)
/
INSERT INTO KREW_RTE_NODE_INSTN_LNK_T
(FROM_RTE_NODE_INSTN_ID,TO_RTE_NODE_INSTN_ID)
SELECT CAST(FROM_RTE_NODE_INSTN_ID as VARCHAR2(40)),CAST(TO_RTE_NODE_INSTN_ID as VARCHAR2(40))
FROM TEMP_KREW_RTE_NODE_INSTN_LNK_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_NODE_INSTN_LNK_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_NODE_INSTN_LNK_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RTE_BRCH_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RTE_BRCH_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RTE_BRCH_T DROP CONSTRAINT KREW_RTE_BRCH_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_BRCH_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_BRCH_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_BRCH_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_BRCH_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_BRCH_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_BRCH_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_BRCH_TI4' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_BRCH_TI4';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_TI4 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_BRCH_TI5' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_BRCH_TI5';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_TI5 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RTE_BRCH_T RENAME TO TEMP_KREW_RTE_BRCH_T
/
CREATE TABLE KREW_RTE_BRCH_T
(
      RTE_BRCH_ID VARCHAR2(40)
        , NM VARCHAR2(255) NOT NULL
        , PARNT_ID VARCHAR2(40)
        , INIT_RTE_NODE_INSTN_ID VARCHAR2(40)
        , SPLT_RTE_NODE_INSTN_ID VARCHAR2(40)
        , JOIN_RTE_NODE_INSTN_ID VARCHAR2(40)
        , VER_NBR NUMBER(8) default 0
)
/
ALTER TABLE KREW_RTE_BRCH_T
    ADD CONSTRAINT KREW_RTE_BRCH_TP1
PRIMARY KEY (RTE_BRCH_ID)
/
CREATE INDEX KREW_RTE_BRCH_TI1 
  ON KREW_RTE_BRCH_T 
  (NM)
/
CREATE INDEX KREW_RTE_BRCH_TI2 
  ON KREW_RTE_BRCH_T 
  (PARNT_ID)
/
CREATE INDEX KREW_RTE_BRCH_TI3 
  ON KREW_RTE_BRCH_T 
  (INIT_RTE_NODE_INSTN_ID)
/
CREATE INDEX KREW_RTE_BRCH_TI4 
  ON KREW_RTE_BRCH_T 
  (SPLT_RTE_NODE_INSTN_ID)
/
CREATE INDEX KREW_RTE_BRCH_TI5 
  ON KREW_RTE_BRCH_T 
  (JOIN_RTE_NODE_INSTN_ID)
/
INSERT INTO KREW_RTE_BRCH_T
(RTE_BRCH_ID, NM, PARNT_ID, INIT_RTE_NODE_INSTN_ID, SPLT_RTE_NODE_INSTN_ID, JOIN_RTE_NODE_INSTN_ID, VER_NBR)
SELECT 
CAST(RTE_BRCH_ID as VARCHAR2(40)), NM, CAST(PARNT_ID as VARCHAR2(40)), 
CAST(INIT_RTE_NODE_INSTN_ID as VARCHAR2(40)), CAST(SPLT_RTE_NODE_INSTN_ID as VARCHAR2(40)), 
CAST(JOIN_RTE_NODE_INSTN_ID as VARCHAR2(40)), VER_NBR
FROM TEMP_KREW_RTE_BRCH_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_BRCH_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_BRCH_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RTE_BRCH_ST_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RTE_BRCH_ST_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RTE_BRCH_ST_T DROP CONSTRAINT KREW_RTE_BRCH_ST_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_ST_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_BRCH_ST_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_BRCH_ST_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_ST_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_BRCH_ST_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_BRCH_ST_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_ST_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_BRCH_ST_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_BRCH_ST_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_ST_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RTE_BRCH_ST_T RENAME TO TEMP_KREW_RTE_BRCH_ST_T
/
CREATE TABLE KREW_RTE_BRCH_ST_T
(
      RTE_BRCH_ST_ID VARCHAR2(40)
        , RTE_BRCH_ID VARCHAR2(40) NOT NULL
        , KEY_CD VARCHAR2(255) NOT NULL
        , VAL VARCHAR2(2000)
        , VER_NBR NUMBER(8) default 0
)
/
ALTER TABLE KREW_RTE_BRCH_ST_T
    ADD CONSTRAINT KREW_RTE_BRCH_ST_TP1
PRIMARY KEY (RTE_BRCH_ST_ID)
/
CREATE INDEX KREW_RTE_BRCH_ST_TI1 
  ON KREW_RTE_BRCH_ST_T 
  (RTE_BRCH_ID, KEY_CD)
/
CREATE INDEX KREW_RTE_BRCH_ST_TI2 
  ON KREW_RTE_BRCH_ST_T 
  (RTE_BRCH_ID)
/
CREATE INDEX KREW_RTE_BRCH_ST_TI3 
  ON KREW_RTE_BRCH_ST_T 
  (KEY_CD, VAL)
/
INSERT INTO KREW_RTE_BRCH_ST_T
(RTE_BRCH_ST_ID, RTE_BRCH_ID, KEY_CD, VAL, VER_NBR)
SELECT 
CAST(RTE_BRCH_ST_ID as VARCHAR2(40)), CAST(RTE_BRCH_ID as VARCHAR2(40)), KEY_CD, VAL, VER_NBR
FROM TEMP_KREW_RTE_BRCH_ST_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_BRCH_ST_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_BRCH_ST_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RTE_NODE_INSTN_ST_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RTE_NODE_INSTN_ST_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RTE_NODE_INSTN_ST_T DROP CONSTRAINT KREW_RTE_NODE_INSTN_ST_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_ST_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_INSTN_ST_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_INSTN_ST_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_ST_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_INSTN_ST_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_INSTN_ST_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_ST_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_INSTN_ST_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_INSTN_ST_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_INSTN_ST_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RTE_NODE_INSTN_ST_T RENAME TO TEMP_KREW_RTE_NODE_INSTN_ST_T
/
CREATE TABLE KREW_RTE_NODE_INSTN_ST_T
(
      RTE_NODE_INSTN_ST_ID VARCHAR2(40)
        , RTE_NODE_INSTN_ID VARCHAR2(40) NOT NULL
        , KEY_CD VARCHAR2(255) NOT NULL
        , VAL VARCHAR2(2000)
        , VER_NBR NUMBER(8) default 0
)
/
ALTER TABLE KREW_RTE_NODE_INSTN_ST_T
    ADD CONSTRAINT KREW_RTE_NODE_INSTN_ST_TP1
PRIMARY KEY (RTE_NODE_INSTN_ST_ID)
/
CREATE INDEX KREW_RTE_NODE_INSTN_ST_TI1 
  ON KREW_RTE_NODE_INSTN_ST_T 
  (RTE_NODE_INSTN_ID, KEY_CD)
/
CREATE INDEX KREW_RTE_NODE_INSTN_ST_TI2 
  ON KREW_RTE_NODE_INSTN_ST_T 
  (RTE_NODE_INSTN_ID)
/
CREATE INDEX KREW_RTE_NODE_INSTN_ST_TI3 
  ON KREW_RTE_NODE_INSTN_ST_T 
  (KEY_CD, VAL)
/
INSERT INTO KREW_RTE_NODE_INSTN_ST_T
(RTE_NODE_INSTN_ST_ID, RTE_NODE_INSTN_ID, KEY_CD, VAL, VER_NBR)
SELECT 
CAST(RTE_NODE_INSTN_ST_ID as VARCHAR2(40)), CAST(RTE_NODE_INSTN_ID as VARCHAR2(40)), KEY_CD, VAL, VER_NBR
FROM TEMP_KREW_RTE_NODE_INSTN_ST_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_NODE_INSTN_ST_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_NODE_INSTN_ST_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_DOC_TYP_ATTR_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_TYP_ATTR_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_TYP_ATTR_T DROP CONSTRAINT KREW_DOC_TYP_ATTR_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_ATTR_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_TYP_ATTR_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_TYP_ATTR_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_ATTR_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_DOC_TYP_ATTR_T RENAME TO TEMP_KREW_DOC_TYP_ATTR_T
/
CREATE TABLE KREW_DOC_TYP_ATTR_T
(
      DOC_TYP_ATTRIB_ID VARCHAR2(40)
        , DOC_TYP_ID VARCHAR2(40) NOT NULL
        , RULE_ATTR_ID VARCHAR2(40) NOT NULL
        , ORD_INDX NUMBER(4) default 0
)
/
ALTER TABLE KREW_DOC_TYP_ATTR_T
    ADD CONSTRAINT KREW_DOC_TYP_ATTR_TP1
PRIMARY KEY (DOC_TYP_ATTRIB_ID)
/
CREATE INDEX KREW_DOC_TYP_ATTR_TI1 
  ON KREW_DOC_TYP_ATTR_T 
  (DOC_TYP_ID)
/
INSERT INTO KREW_DOC_TYP_ATTR_T
(DOC_TYP_ATTRIB_ID, DOC_TYP_ID, RULE_ATTR_ID, ORD_INDX)
SELECT 
CAST(DOC_TYP_ATTRIB_ID as VARCHAR2(40)), CAST(DOC_TYP_ID as VARCHAR2(40)), 
CAST(RULE_ATTR_ID as VARCHAR2(40)), ORD_INDX
FROM TEMP_KREW_DOC_TYP_ATTR_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_TYP_ATTR_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_TYP_ATTR_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RULE_ATTR_T
-----------------------------------------------------------------------------
ALTER TABLE KREW_RULE_ATTR_T DROP CONSTRAINT KREW_RULE_ATTR_TC0
/
ALTER TABLE KREW_RULE_ATTR_T DROP CONSTRAINT KREW_RULE_ATTR_TP1
/
ALTER TABLE KREW_RULE_ATTR_T RENAME TO TEMP_KREW_RULE_ATTR_T
/
CREATE TABLE KREW_RULE_ATTR_T
(
      RULE_ATTR_ID VARCHAR2(40)
        , NM VARCHAR2(255) NOT NULL
        , LBL VARCHAR2(2000) NOT NULL
        , RULE_ATTR_TYP_CD VARCHAR2(2000) NOT NULL
        , DESC_TXT VARCHAR2(2000)
        , CLS_NM VARCHAR2(2000)
        , XML CLOB
        , VER_NBR NUMBER(8) default 0
        , APPL_ID VARCHAR2(255)
        , OBJ_ID VARCHAR2(36) NOT NULL
    , CONSTRAINT KREW_RULE_ATTR_TC0 UNIQUE (OBJ_ID)
)
/
ALTER TABLE KREW_RULE_ATTR_T
    ADD CONSTRAINT KREW_RULE_ATTR_TP1
PRIMARY KEY (RULE_ATTR_ID)
/
INSERT INTO KREW_RULE_ATTR_T
(RULE_ATTR_ID, NM, LBL, RULE_ATTR_TYP_CD, DESC_TXT, CLS_NM, XML, VER_NBR, APPL_ID, OBJ_ID)
SELECT 
CAST(RULE_ATTR_ID as VARCHAR2(40)), NM, LBL, RULE_ATTR_TYP_CD, DESC_TXT, CLS_NM, XML, VER_NBR, APPL_ID, OBJ_ID
FROM TEMP_KREW_RULE_ATTR_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_ATTR_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_ATTR_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RULE_TMPL_OPTN_T
-----------------------------------------------------------------------------
ALTER TABLE KREW_RULE_TMPL_OPTN_T DROP CONSTRAINT KREW_RULE_TMPL_OPTN_TP1
/
ALTER TABLE KREW_RULE_TMPL_OPTN_T RENAME TO TEMP_KREW_RULE_TMPL_OPTN_T
/
CREATE TABLE KREW_RULE_TMPL_OPTN_T
(
      RULE_TMPL_OPTN_ID VARCHAR2(40)
        , RULE_TMPL_ID VARCHAR2(40)
        , KEY_CD VARCHAR2(250)
        , VAL VARCHAR2(2000)
        , VER_NBR NUMBER(8) default 0
)
/
ALTER TABLE KREW_RULE_TMPL_OPTN_T
    ADD CONSTRAINT KREW_RULE_TMPL_OPTN_TP1
PRIMARY KEY (RULE_TMPL_OPTN_ID)
/
INSERT INTO KREW_RULE_TMPL_OPTN_T
(RULE_TMPL_OPTN_ID, RULE_TMPL_ID, KEY_CD, VAL, VER_NBR)
SELECT 
CAST(RULE_TMPL_OPTN_ID as VARCHAR2(40)), CAST(RULE_TMPL_ID as VARCHAR2(40)), KEY_CD, VAL, VER_NBR
FROM TEMP_KREW_RULE_TMPL_OPTN_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_TMPL_OPTN_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_TMPL_OPTN_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_OUT_BOX_ITM_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_OUT_BOX_ITM_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_OUT_BOX_ITM_T DROP CONSTRAINT KREW_OUT_BOX_ITM_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_OUT_BOX_ITM_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_OUT_BOX_ITM_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_OUT_BOX_ITM_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_OUT_BOX_ITM_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_OUT_BOX_ITM_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_OUT_BOX_ITM_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_OUT_BOX_ITM_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_OUT_BOX_ITM_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_OUT_BOX_ITM_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_OUT_BOX_ITM_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_OUT_BOX_ITM_T RENAME TO TEMP_KREW_OUT_BOX_ITM_T
/
CREATE TABLE KREW_OUT_BOX_ITM_T
(
      ACTN_ITM_ID VARCHAR2(40)
        , PRNCPL_ID VARCHAR2(40) NOT NULL
        , ASND_DT DATE NOT NULL
        , RQST_CD CHAR(1) NOT NULL
        , ACTN_RQST_ID VARCHAR2(40) NOT NULL
        , DOC_HDR_ID VARCHAR2(40) NOT NULL
        , ROLE_NM VARCHAR2(2000)
        , DLGN_PRNCPL_ID VARCHAR2(40)
        , DOC_HDR_TTL VARCHAR2(255)
        , DOC_TYP_LBL VARCHAR2(128) NOT NULL
        , DOC_HDLR_URL VARCHAR2(255) NOT NULL
        , DOC_TYP_NM VARCHAR2(64) NOT NULL
        , RSP_ID VARCHAR2(40) NOT NULL
        , DLGN_TYP VARCHAR2(1)
        , VER_NBR NUMBER(8) default 0
        , GRP_ID VARCHAR2(40)
        , DLGN_GRP_ID VARCHAR2(40)
        , RQST_LBL VARCHAR2(255)
)
/
ALTER TABLE KREW_OUT_BOX_ITM_T
    ADD CONSTRAINT KREW_OUT_BOX_ITM_TP1
PRIMARY KEY (ACTN_ITM_ID)
/
CREATE INDEX KREW_OUT_BOX_ITM_TI1 
  ON KREW_OUT_BOX_ITM_T 
  (PRNCPL_ID)
/
CREATE INDEX KREW_OUT_BOX_ITM_TI2 
  ON KREW_OUT_BOX_ITM_T 
  (DOC_HDR_ID)
/
CREATE INDEX KREW_OUT_BOX_ITM_TI3 
  ON KREW_OUT_BOX_ITM_T 
  (ACTN_RQST_ID)
/
INSERT INTO KREW_OUT_BOX_ITM_T
(ACTN_ITM_ID, PRNCPL_ID, ASND_DT, RQST_CD, ACTN_RQST_ID, DOC_HDR_ID, ROLE_NM, 
DLGN_PRNCPL_ID, DOC_HDR_TTL, DOC_TYP_LBL, DOC_HDLR_URL, DOC_TYP_NM, RSP_ID, 
DLGN_TYP, VER_NBR, GRP_ID, DLGN_GRP_ID, RQST_LBL)
SELECT 
CAST(ACTN_ITM_ID as VARCHAR2(40)), PRNCPL_ID, ASND_DT, RQST_CD, CAST(ACTN_RQST_ID as VARCHAR2(40)), 
DOC_HDR_ID, ROLE_NM, 
DLGN_PRNCPL_ID, DOC_HDR_TTL, DOC_TYP_LBL, DOC_HDLR_URL, DOC_TYP_NM, 
CAST(RSP_ID as VARCHAR2(40)), 
DLGN_TYP, VER_NBR, GRP_ID, DLGN_GRP_ID, RQST_LBL
FROM TEMP_KREW_OUT_BOX_ITM_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_OUT_BOX_ITM_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_OUT_BOX_ITM_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RTE_NODE_CFG_PARM_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RTE_NODE_CFG_PARM_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RTE_NODE_CFG_PARM_T DROP CONSTRAINT KREW_RTE_NODE_CFG_PARM_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_CFG_PARM_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_NODE_CFG_PARM_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_NODE_CFG_PARM_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_NODE_CFG_PARM_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RTE_NODE_CFG_PARM_T RENAME TO TEMP_KREW_RTE_NODE_CFG_PARM_T
/
CREATE TABLE KREW_RTE_NODE_CFG_PARM_T
(
      RTE_NODE_CFG_PARM_ID VARCHAR2(40)
        , RTE_NODE_ID VARCHAR2(40) NOT NULL
        , KEY_CD VARCHAR2(255) NOT NULL
        , VAL VARCHAR2(4000)
)
/
ALTER TABLE KREW_RTE_NODE_CFG_PARM_T
    ADD CONSTRAINT KREW_RTE_NODE_CFG_PARM_TP1
PRIMARY KEY (RTE_NODE_CFG_PARM_ID)
/
CREATE INDEX KREW_RTE_NODE_CFG_PARM_TI1 
  ON KREW_RTE_NODE_CFG_PARM_T 
  (RTE_NODE_ID)
/
INSERT INTO KREW_RTE_NODE_CFG_PARM_T
(RTE_NODE_CFG_PARM_ID, RTE_NODE_ID, KEY_CD, VAL)
SELECT 
CAST(RTE_NODE_CFG_PARM_ID as VARCHAR2(40)), CAST(RTE_NODE_ID as VARCHAR2(40)), KEY_CD, VAL
FROM TEMP_KREW_RTE_NODE_CFG_PARM_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_NODE_CFG_PARM_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_NODE_CFG_PARM_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_DOC_TYP_PROC_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_TYP_PROC_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_TYP_PROC_T DROP CONSTRAINT KREW_DOC_TYP_PROC_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_PROC_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_TYP_PROC_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_TYP_PROC_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_PROC_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_TYP_PROC_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_TYP_PROC_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_PROC_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_TYP_PROC_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_TYP_PROC_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_TYP_PROC_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_DOC_TYP_PROC_T RENAME TO TEMP_KREW_DOC_TYP_PROC_T
/
CREATE TABLE KREW_DOC_TYP_PROC_T
(
      DOC_TYP_PROC_ID VARCHAR2(40)
        , DOC_TYP_ID VARCHAR2(40) NOT NULL
        , INIT_RTE_NODE_ID NUMBER(22)
        , NM VARCHAR2(255) NOT NULL
        , INIT_IND NUMBER(1) default 0 NOT NULL
        , VER_NBR NUMBER(8) default 0
)
/
ALTER TABLE KREW_DOC_TYP_PROC_T
    ADD CONSTRAINT KREW_DOC_TYP_PROC_TP1
PRIMARY KEY (DOC_TYP_PROC_ID)
/
CREATE INDEX KREW_DOC_TYP_PROC_TI1 
  ON KREW_DOC_TYP_PROC_T 
  (DOC_TYP_ID)
/
CREATE INDEX KREW_DOC_TYP_PROC_TI2 
  ON KREW_DOC_TYP_PROC_T 
  (INIT_RTE_NODE_ID)
/
CREATE INDEX KREW_DOC_TYP_PROC_TI3 
  ON KREW_DOC_TYP_PROC_T 
  (NM)
/
INSERT INTO KREW_DOC_TYP_PROC_T
(DOC_TYP_PROC_ID, DOC_TYP_ID, INIT_RTE_NODE_ID, NM, INIT_IND, VER_NBR)
SELECT 
CAST(DOC_TYP_PROC_ID as VARCHAR2(40)), CAST(DOC_TYP_ID as VARCHAR2(40)), INIT_RTE_NODE_ID, 
NM, INIT_IND, VER_NBR
FROM TEMP_KREW_DOC_TYP_PROC_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_TYP_PROC_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_TYP_PROC_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_DOC_LNK_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_LNK_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_LNK_T DROP CONSTRAINT KREW_DOC_LNK_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_LNK_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_LNK_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_LNK_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_LNK_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_DOC_LNK_T RENAME TO TEMP_KREW_DOC_LNK_T
/
CREATE TABLE KREW_DOC_LNK_T
(
      DOC_LNK_ID VARCHAR2(40)
        , ORGN_DOC_ID VARCHAR2(40) NOT NULL
        , DEST_DOC_ID VARCHAR2(40) NOT NULL
)
/
ALTER TABLE KREW_DOC_LNK_T
    ADD CONSTRAINT KREW_DOC_LNK_TP1
PRIMARY KEY (DOC_LNK_ID)
/
CREATE INDEX KREW_DOC_LNK_TI1 
  ON KREW_DOC_LNK_T 
  (ORGN_DOC_ID)
/
INSERT INTO KREW_DOC_LNK_T
(DOC_LNK_ID, ORGN_DOC_ID, DEST_DOC_ID)
SELECT 
CAST(DOC_LNK_ID as VARCHAR2(40)), ORGN_DOC_ID, DEST_DOC_ID
FROM TEMP_KREW_DOC_LNK_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_LNK_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_LNK_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RTE_BRCH_PROTO_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RTE_BRCH_PROTO_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RTE_BRCH_PROTO_T DROP CONSTRAINT KREW_RTE_BRCH_PROTO_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_PROTO_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RTE_BRCH_PROTO_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RTE_BRCH_PROTO_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RTE_BRCH_PROTO_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RTE_BRCH_PROTO_T RENAME TO TEMP_KREW_RTE_BRCH_PROTO_T
/
CREATE TABLE KREW_RTE_BRCH_PROTO_T
(
      RTE_BRCH_PROTO_ID VARCHAR2(40)
        , BRCH_NM VARCHAR2(255) NOT NULL
        , VER_NBR NUMBER(8) default 0
)
/
ALTER TABLE KREW_RTE_BRCH_PROTO_T
    ADD CONSTRAINT KREW_RTE_BRCH_PROTO_TP1
PRIMARY KEY (RTE_BRCH_PROTO_ID)
/
CREATE INDEX KREW_RTE_BRCH_PROTO_TI1 
  ON KREW_RTE_BRCH_PROTO_T 
  (BRCH_NM)
/
INSERT INTO KREW_RTE_BRCH_PROTO_T
(RTE_BRCH_PROTO_ID, BRCH_NM, VER_NBR)
SELECT 
CAST(RTE_BRCH_PROTO_ID as VARCHAR2(40)), BRCH_NM, VER_NBR
FROM TEMP_KREW_RTE_BRCH_PROTO_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_BRCH_PROTO_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_BRCH_PROTO_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_HLP_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_HLP_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_HLP_T DROP CONSTRAINT KREW_HLP_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_HLP_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_HLP_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_HLP_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_HLP_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_HLP_T RENAME TO TEMP_KREW_HLP_T
/
CREATE TABLE KREW_HLP_T
(
      HLP_ID VARCHAR2(40)
        , NM VARCHAR2(500) NOT NULL
        , KEY_CD VARCHAR2(500) NOT NULL
        , HLP_TXT VARCHAR2(4000) NOT NULL
        , VER_NBR NUMBER(8) default 0
)
/
ALTER TABLE KREW_HLP_T
    ADD CONSTRAINT KREW_HLP_TP1
PRIMARY KEY (HLP_ID)
/
CREATE INDEX KREW_HLP_TI1 
  ON KREW_HLP_T 
  (KEY_CD)
/
INSERT INTO KREW_HLP_T
(HLP_ID, NM, KEY_CD, HLP_TXT, VER_NBR)
SELECT 
CAST(HLP_ID as VARCHAR2(40)), NM, KEY_CD, HLP_TXT, VER_NBR
FROM TEMP_KREW_HLP_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_HLP_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_HLP_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RULE_EXT_VAL_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_RULE_EXT_VAL_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_RULE_EXT_VAL_T DROP CONSTRAINT KREW_RULE_EXT_VAL_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RULE_EXT_VAL_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RULE_EXT_VAL_T1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RULE_EXT_VAL_T1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RULE_EXT_VAL_T1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_RULE_EXT_VAL_T2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_RULE_EXT_VAL_T2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_RULE_EXT_VAL_T2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_RULE_EXT_VAL_T RENAME TO TEMP_KREW_RULE_EXT_VAL_T
/
CREATE TABLE KREW_RULE_EXT_VAL_T
(
      RULE_EXT_VAL_ID VARCHAR2(40)
        , RULE_EXT_ID VARCHAR2(40) NOT NULL
        , VAL VARCHAR2(2000) NOT NULL
        , KEY_CD VARCHAR2(2000) NOT NULL
        , VER_NBR NUMBER(8) default 0
)
/
ALTER TABLE KREW_RULE_EXT_VAL_T
    ADD CONSTRAINT KREW_RULE_EXT_VAL_TP1
PRIMARY KEY (RULE_EXT_VAL_ID)
/
CREATE INDEX KREW_RULE_EXT_VAL_T1 
  ON KREW_RULE_EXT_VAL_T 
  (RULE_EXT_ID)
/
CREATE INDEX KREW_RULE_EXT_VAL_T2 
  ON KREW_RULE_EXT_VAL_T 
  (RULE_EXT_VAL_ID, KEY_CD)
/
INSERT INTO KREW_RULE_EXT_VAL_T
(RULE_EXT_VAL_ID, RULE_EXT_ID, VAL, KEY_CD, VER_NBR)
SELECT 
CAST(RULE_EXT_VAL_ID as VARCHAR2(40)), CAST(RULE_EXT_ID as VARCHAR2(40)), VAL, KEY_CD, VER_NBR
FROM TEMP_KREW_RULE_EXT_VAL_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_EXT_VAL_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_EXT_VAL_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_RULE_EXPR_T
-----------------------------------------------------------------------------
ALTER TABLE KREW_RULE_EXPR_T DROP CONSTRAINT KREW_RULE_EXPR_TP1
/
ALTER TABLE KREW_RULE_EXPR_T RENAME TO TEMP_KREW_RULE_EXPR_T
/
ALTER TABLE TEMP_KREW_RULE_EXPR_T DROP CONSTRAINT KREW_RULE_EXPR_TC0
/
CREATE TABLE KREW_RULE_EXPR_T
(
      RULE_EXPR_ID VARCHAR2(40)
        , TYP VARCHAR2(256) NOT NULL
        , RULE_EXPR VARCHAR2(4000)
        , OBJ_ID VARCHAR2(36) NOT NULL
        , VER_NBR NUMBER(8) default 0
    , CONSTRAINT KREW_RULE_EXPR_TC0 UNIQUE (OBJ_ID)
)
/
ALTER TABLE KREW_RULE_EXPR_T
    ADD CONSTRAINT KREW_RULE_EXPR_TP1
PRIMARY KEY (RULE_EXPR_ID)
/
INSERT INTO KREW_RULE_EXPR_T
(RULE_EXPR_ID, TYP, RULE_EXPR, OBJ_ID, VER_NBR)
SELECT 
CAST(RULE_EXPR_ID as VARCHAR2(40)), TYP, RULE_EXPR, OBJ_ID, VER_NBR
FROM TEMP_KREW_RULE_EXPR_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RULE_EXPR_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RULE_EXPR_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_APP_DOC_STAT_TRAN_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_APP_DOC_STAT_TRAN_TC0' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_APP_DOC_STAT_TRAN_T DROP CONSTRAINT KREW_APP_DOC_STAT_TRAN_TC0';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_APP_DOC_STAT_TRAN_TC0 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_APP_DOC_STAT_TRAN_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_APP_DOC_STAT_TRAN_T DROP CONSTRAINT KREW_APP_DOC_STAT_TRAN_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_APP_DOC_STAT_TRAN_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_APP_DOC_STAT_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_APP_DOC_STAT_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_APP_DOC_STAT_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_APP_DOC_STAT_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_APP_DOC_STAT_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_APP_DOC_STAT_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_APP_DOC_STAT_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_APP_DOC_STAT_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_APP_DOC_STAT_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_APP_DOC_STAT_TRAN_T RENAME TO TEMP_KREW_APP_DOC_STAT_TRAN_T
/
CREATE TABLE KREW_APP_DOC_STAT_TRAN_T
(
      APP_DOC_STAT_TRAN_ID VARCHAR2(40)
        , DOC_HDR_ID VARCHAR2(40)
        , APP_DOC_STAT_FROM VARCHAR2(64)
        , APP_DOC_STAT_TO VARCHAR2(64)
        , STAT_TRANS_DATE DATE
        , VER_NBR NUMBER(8) default 0
        , OBJ_ID VARCHAR2(36) NOT NULL
    , CONSTRAINT KREW_APP_DOC_STAT_TRAN_TC0 UNIQUE (OBJ_ID)
)
/
ALTER TABLE KREW_APP_DOC_STAT_TRAN_T
    ADD CONSTRAINT KREW_APP_DOC_STAT_TRAN_TP1
PRIMARY KEY (APP_DOC_STAT_TRAN_ID)
/
CREATE INDEX KREW_APP_DOC_STAT_TI1 
  ON KREW_APP_DOC_STAT_TRAN_T 
  (DOC_HDR_ID, STAT_TRANS_DATE)
/
CREATE INDEX KREW_APP_DOC_STAT_TI2 
  ON KREW_APP_DOC_STAT_TRAN_T 
  (DOC_HDR_ID, APP_DOC_STAT_FROM)
/
CREATE INDEX KREW_APP_DOC_STAT_TI3 
  ON KREW_APP_DOC_STAT_TRAN_T 
  (DOC_HDR_ID, APP_DOC_STAT_TO)
/
INSERT INTO KREW_APP_DOC_STAT_TRAN_T
(APP_DOC_STAT_TRAN_ID, DOC_HDR_ID, APP_DOC_STAT_FROM, APP_DOC_STAT_TO, STAT_TRANS_DATE, VER_NBR, OBJ_ID)
SELECT 
CAST(APP_DOC_STAT_TRAN_ID as VARCHAR2(40)), DOC_HDR_ID, APP_DOC_STAT_FROM, APP_DOC_STAT_TO, STAT_TRANS_DATE, VER_NBR, OBJ_ID
FROM TEMP_KREW_APP_DOC_STAT_TRAN_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_APP_DOC_STAT_TRAN_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_APP_DOC_STAT_TRAN_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_DOC_HDR_EXT_DT_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_HDR_EXT_DT_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_HDR_EXT_DT_T DROP CONSTRAINT KREW_DOC_HDR_EXT_DT_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_DT_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_DT_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_DT_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_DT_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_DT_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_DT_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_DT_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_DT_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_DT_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_DT_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_DOC_HDR_EXT_DT_T RENAME TO TEMP_KREW_DOC_HDR_EXT_DT_T
/
CREATE TABLE KREW_DOC_HDR_EXT_DT_T
(
      DOC_HDR_EXT_DT_ID VARCHAR2(40)
        , DOC_HDR_ID VARCHAR2(40) NOT NULL
        , KEY_CD VARCHAR2(256) NOT NULL
        , VAL DATE
)
/
ALTER TABLE KREW_DOC_HDR_EXT_DT_T
    ADD CONSTRAINT KREW_DOC_HDR_EXT_DT_TP1
PRIMARY KEY (DOC_HDR_EXT_DT_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_DT_TI1 
  ON KREW_DOC_HDR_EXT_DT_T 
  (KEY_CD, VAL)
/
CREATE INDEX KREW_DOC_HDR_EXT_DT_TI2 
  ON KREW_DOC_HDR_EXT_DT_T 
  (DOC_HDR_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_DT_TI3 
  ON KREW_DOC_HDR_EXT_DT_T 
  (VAL)
/
INSERT INTO KREW_DOC_HDR_EXT_DT_T
(DOC_HDR_EXT_DT_ID, DOC_HDR_ID, KEY_CD, VAL)
SELECT 
CAST(DOC_HDR_EXT_DT_ID as VARCHAR2(40)), DOC_HDR_ID, KEY_CD, VAL
FROM TEMP_KREW_DOC_HDR_EXT_DT_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_HDR_EXT_DT_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_HDR_EXT_DT_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_DOC_HDR_EXT_LONG_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_HDR_EXT_LONG_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_HDR_EXT_LONG_T DROP CONSTRAINT KREW_DOC_HDR_EXT_LONG_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_LONG_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_LONG_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_LONG_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_LONG_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_LONG_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_LONG_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_LONG_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_LONG_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_LONG_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_LONG_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_DOC_HDR_EXT_LONG_T RENAME TO TEMP_KREW_DOC_HDR_EXT_LONG_T
/
CREATE TABLE KREW_DOC_HDR_EXT_LONG_T
(
      DOC_HDR_EXT_LONG_ID VARCHAR2(40)
        , DOC_HDR_ID VARCHAR2(40) NOT NULL
        , KEY_CD VARCHAR2(256) NOT NULL
        , VAL NUMBER(22)
)
/
ALTER TABLE KREW_DOC_HDR_EXT_LONG_T
    ADD CONSTRAINT KREW_DOC_HDR_EXT_LONG_TP1
PRIMARY KEY (DOC_HDR_EXT_LONG_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_LONG_TI1 
  ON KREW_DOC_HDR_EXT_LONG_T 
  (KEY_CD, VAL)
/
CREATE INDEX KREW_DOC_HDR_EXT_LONG_TI2 
  ON KREW_DOC_HDR_EXT_LONG_T 
  (DOC_HDR_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_LONG_TI3 
  ON KREW_DOC_HDR_EXT_LONG_T 
  (VAL)
/
INSERT INTO KREW_DOC_HDR_EXT_LONG_T
(DOC_HDR_EXT_LONG_ID, DOC_HDR_ID, KEY_CD, VAL)
SELECT 
CAST(DOC_HDR_EXT_LONG_ID as VARCHAR2(40)), DOC_HDR_ID, KEY_CD, VAL
FROM TEMP_KREW_DOC_HDR_EXT_LONG_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_HDR_EXT_LONG_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_HDR_EXT_LONG_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_DOC_HDR_EXT_FLT_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_HDR_EXT_FLT_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_HDR_EXT_FLT_T DROP CONSTRAINT KREW_DOC_HDR_EXT_FLT_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_FLT_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_FLT_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_FLT_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_FLT_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_FLT_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_FLT_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_FLT_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_FLT_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_FLT_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_FLT_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_DOC_HDR_EXT_FLT_T RENAME TO TEMP_KREW_DOC_HDR_EXT_FLT_T
/
CREATE TABLE KREW_DOC_HDR_EXT_FLT_T
(
      DOC_HDR_EXT_FLT_ID VARCHAR2(40)
        , DOC_HDR_ID VARCHAR2(40) NOT NULL
        , KEY_CD VARCHAR2(256) NOT NULL
        , VAL NUMBER(30,15)
)
/
ALTER TABLE KREW_DOC_HDR_EXT_FLT_T
    ADD CONSTRAINT KREW_DOC_HDR_EXT_FLT_TP1
PRIMARY KEY (DOC_HDR_EXT_FLT_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_FLT_TI1 
  ON KREW_DOC_HDR_EXT_FLT_T 
  (KEY_CD, VAL)
/
CREATE INDEX KREW_DOC_HDR_EXT_FLT_TI2 
  ON KREW_DOC_HDR_EXT_FLT_T 
  (DOC_HDR_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_FLT_TI3 
  ON KREW_DOC_HDR_EXT_FLT_T 
  (VAL)
/
INSERT INTO KREW_DOC_HDR_EXT_FLT_T
(DOC_HDR_EXT_FLT_ID, DOC_HDR_ID, KEY_CD, VAL)
SELECT 
CAST(DOC_HDR_EXT_FLT_ID as VARCHAR2(40)), DOC_HDR_ID, KEY_CD, VAL
FROM TEMP_KREW_DOC_HDR_EXT_FLT_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_HDR_EXT_FLT_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_HDR_EXT_FLT_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/
-----------------------------------------------------------------------------
-- KREW_DOC_HDR_EXT_T
-----------------------------------------------------------------------------
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_DOC_HDR_EXT_TP1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_DOC_HDR_EXT_T DROP CONSTRAINT KREW_DOC_HDR_EXT_TP1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_TP1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_TI1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_TI1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_TI1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_TI2' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_TI2';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_TI2 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_indexes where INDEX_NAME = 'KREW_DOC_HDR_EXT_TI3' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'DROP INDEX KREW_DOC_HDR_EXT_TI3';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_DOC_HDR_EXT_TI3 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_DOC_HDR_EXT_T RENAME TO TEMP_KREW_DOC_HDR_EXT_T
/
CREATE TABLE KREW_DOC_HDR_EXT_T
(
      DOC_HDR_EXT_ID VARCHAR2(40)
        , DOC_HDR_ID VARCHAR2(40) NOT NULL
        , KEY_CD VARCHAR2(256) NOT NULL
        , VAL VARCHAR2(2000)
)
/
ALTER TABLE KREW_DOC_HDR_EXT_T
    ADD CONSTRAINT KREW_DOC_HDR_EXT_TP1
PRIMARY KEY (DOC_HDR_EXT_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_TI1 
  ON KREW_DOC_HDR_EXT_T 
  (KEY_CD, VAL)
/
CREATE INDEX KREW_DOC_HDR_EXT_TI2 
  ON KREW_DOC_HDR_EXT_T 
  (DOC_HDR_ID)
/
CREATE INDEX KREW_DOC_HDR_EXT_TI3 
  ON KREW_DOC_HDR_EXT_T 
  (VAL)
/
INSERT INTO KREW_DOC_HDR_EXT_T
(DOC_HDR_EXT_ID, DOC_HDR_ID, KEY_CD, VAL)
SELECT 
CAST(DOC_HDR_EXT_ID as VARCHAR2(40)), DOC_HDR_ID, KEY_CD, VAL
FROM TEMP_KREW_DOC_HDR_EXT_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_DOC_HDR_EXT_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_DOC_HDR_EXT_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/

-----------------------------------------------------------------------------
-- FOREIGN KEY CONSTRAINTS IMPACTED BY CHANGES
-----------------------------------------------------------------------------
ALTER TABLE KREW_RULE_T
    ADD CONSTRAINT KREW_RULE_TR1 FOREIGN KEY (RULE_EXPR_ID)
    REFERENCES KREW_RULE_EXPR_T (RULE_EXPR_ID)
/
ALTER TABLE KREW_RTE_NODE_CFG_PARM_T
    ADD CONSTRAINT EN_RTE_NODE_CFG_PARM_TR1 FOREIGN KEY (RTE_NODE_ID)
    REFERENCES KREW_RTE_NODE_T (RTE_NODE_ID)
/





-- 
-- 2011-07-11-m6.sql
-- 


--
-- NOTE: when assembling this script for release, please merge any table rebuilds with those from 2011-04-28.sql
--

-----------------------------------------------------------------------------
-- KREW_RTE_NODE_LNK_T
-----------------------------------------------------------------------------
ALTER TABLE KREW_RTE_NODE_LNK_T RENAME TO TEMP_KREW_RTE_NODE_LNK_T
/
ALTER TABLE TEMP_KREW_RTE_NODE_LNK_T DROP CONSTRAINT KREW_RTE_NODE_LNK_TP1
/
DROP INDEX KREW_RTE_NODE_LNK_TI1
/
DROP INDEX KREW_RTE_NODE_LNK_TI2
/
CREATE TABLE KREW_RTE_NODE_LNK_T
(
    FROM_RTE_NODE_ID VARCHAR2(40)
    , TO_RTE_NODE_ID VARCHAR2(40)
)
/
ALTER TABLE KREW_RTE_NODE_LNK_T
    ADD CONSTRAINT KREW_RTE_NODE_LNK_TP1
PRIMARY KEY (FROM_RTE_NODE_ID, TO_RTE_NODE_ID)
/
CREATE INDEX KREW_RTE_NODE_LNK_TI1 
  ON KREW_RTE_NODE_LNK_T 
  (FROM_RTE_NODE_ID)
/
CREATE INDEX KREW_RTE_NODE_LNK_TI2 
  ON KREW_RTE_NODE_LNK_T 
  (TO_RTE_NODE_ID)
/
INSERT INTO KREW_RTE_NODE_LNK_T
(FROM_RTE_NODE_ID, TO_RTE_NODE_ID)
SELECT CAST(FROM_RTE_NODE_ID as VARCHAR2(40)), CAST(TO_RTE_NODE_ID as VARCHAR2(40))
FROM TEMP_KREW_RTE_NODE_LNK_T
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_RTE_NODE_LNK_T';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_RTE_NODE_LNK_T CASCADE CONSTRAINTS PURGE'; END IF;
END;
/





-- 
-- 2011-07-13.sql
-- 


-- KRCR_PARM_T
ALTER TABLE KRCR_PARM_T RENAME column PARM_DTL_TYP_CD to CMPNT_CD
/
ALTER TABLE KRCR_PARM_T RENAME column TXT to VAL
/
ALTER TABLE KRCR_PARM_T RENAME column CONS_CD to EVAL_OPRTR_CD
/

-- KRCR_PARM_DTL_TYP_T to KRCR_CMPNT_T
ALTER TABLE KRCR_PARM_DTL_TYP_T RENAME TO KRCR_CMPNT_T
/
ALTER TABLE KRCR_CMPNT_T RENAME COLUMN PARM_DTL_TYP_CD TO CMPNT_CD
/

-- KRLC_CMP_TYP_T
ALTER TABLE KRLC_CMP_TYP_T DROP COLUMN DOBJ_MAINT_CD_ACTV_IND
/





-- 
-- 2011-07-22.sql
-- 


-- Oracle sql for KULRICE-5419:
ALTER TABLE KRMS_CNTXT_T ADD DESC_TXT VARCHAR2(255) DEFAULT NULL
/
ALTER TABLE KRMS_TERM_SPEC_T ADD DESC_TXT VARCHAR2(255) DEFAULT NULL
/
ALTER TABLE KRMS_TERM_T ADD DESC_TXT VARCHAR2(255) DEFAULT NULL
/
ALTER TABLE KRMS_ATTR_DEFN_T ADD DESC_TXT VARCHAR2(255) DEFAULT NULL
/





-- 
-- 2011-07-24-m7.sql
-- 


DROP SEQUENCE KREW_HLP_S 
/
DROP TABLE KREW_HLP_T
/





-- 
-- 2011-07-25-m7.sql
-- 


DROP TABLE KREW_RIA_DOC_T
/
DROP SEQUENCE KREW_RIA_DOCTYPE_MAP_ID_S
/
DROP TABLE KREW_RIA_DOCTYPE_MAP_T
/
DROP TABLE KREW_RMV_RPLC_DOC_T 
/
DROP TABLE KREW_RMV_RPLC_GRP_T
/
DROP TABLE KREW_RMV_RPLC_RULE_T
/





-- 
-- 2011-07-28-m7.sql
-- 


-----------------------------------------------------------------------------
-- KREW_INIT_RTE_NODE_INSTN_T
-----------------------------------------------------------------------------
ALTER TABLE KREW_INIT_RTE_NODE_INSTN_T DROP CONSTRAINT KREW_INIT_RTE_NODE_INSTN_TP1
/
DROP INDEX KREW_INIT_RTE_NODE_INSTN_TI1
/
DROP INDEX KREW_INIT_RTE_NODE_INSTN_TI2
/
ALTER TABLE KREW_INIT_RTE_NODE_INSTN_T RENAME TO TEMP_KREW_INIT_RTE_NODE
/
CREATE TABLE KREW_INIT_RTE_NODE_INSTN_T
(
         DOC_HDR_ID VARCHAR2(40) NOT NULL
        , RTE_NODE_INSTN_ID VARCHAR2(40) NOT NULL
)
/
ALTER TABLE KREW_INIT_RTE_NODE_INSTN_T
    ADD CONSTRAINT KREW_INIT_RTE_NODE_INSTN_TP1
PRIMARY KEY (DOC_HDR_ID, RTE_NODE_INSTN_ID)
/
CREATE INDEX KREW_INIT_RTE_NODE_INSTN_TI1
  ON KREW_INIT_RTE_NODE_INSTN_T
  (DOC_HDR_ID)
/
CREATE INDEX KREW_INIT_RTE_NODE_INSTN_TI2
  ON KREW_INIT_RTE_NODE_INSTN_T
  (RTE_NODE_INSTN_ID)
/
INSERT INTO KREW_INIT_RTE_NODE_INSTN_T
(DOC_HDR_ID, RTE_NODE_INSTN_ID)
SELECT DOC_HDR_ID, CAST(RTE_NODE_INSTN_ID as VARCHAR2(40))
FROM TEMP_KREW_INIT_RTE_NODE
/
DECLARE temp NUMBER;
BEGIN
    SELECT COUNT(*) INTO temp FROM user_tables WHERE table_name = 'TEMP_KREW_INIT_RTE_NODE';
    IF temp > 0 THEN EXECUTE IMMEDIATE 'DROP TABLE TEMP_KREW_INIT_RTE_NODE CASCADE CONSTRAINTS PURGE'; END IF;
END;
/





-- 
-- 2011-07-29-m7.sql
-- 


UPDATE KRIM_PERM_T t SET NM='Take Requested Approve Action' WHERE PERM_ID = '170'
/





-- 
-- 2011-07-29.sql
-- 


--
-- make combo of nm & nmspc_cd unique in all applicable KRMS tables
-- and drop nmspc_cd where it doesn't make sense
--

--
-- break direct fk to krms_cntxt_t from krms_term_rslvr_t & krms_term_spec_t
--

-- remove cntxt_id from krms_term_rslvr_t, fix unique constraint
ALTER TABLE KRMS_TERM_RSLVR_T DROP CONSTRAINT KRMS_TERM_RSLVR_TC1
/
ALTER TABLE KRMS_TERM_RSLVR_T ADD CONSTRAINT KRMS_TERM_RSLVR_TC1 UNIQUE (NM, NMSPC_CD)
/
ALTER TABLE KRMS_TERM_RSLVR_T DROP CONSTRAINT KRMS_TERM_RSLVR_FK2
/
ALTER TABLE KRMS_TERM_RSLVR_T DROP COLUMN CNTXT_ID
/
-- remove fk from krms_term_spec_t to krms_cntxt_t
ALTER TABLE KRMS_TERM_SPEC_T ADD NMSPC_CD VARCHAR2(40) NOT NULL
/
ALTER TABLE KRMS_TERM_SPEC_T DROP CONSTRAINT KRMS_ASSET_FK1
/
DROP INDEX KRMS_ASSET_TI1
/
ALTER TABLE KRMS_TERM_SPEC_T DROP CONSTRAINT KRMS_ASSET_TC1
/
ALTER TABLE KRMS_TERM_SPEC_T ADD CONSTRAINT KRMS_TERM_SPEC_TC1 UNIQUE (NM, NMSPC_CD)
/
ALTER TABLE KRMS_TERM_SPEC_T DROP COLUMN CNTXT_ID
/
--
-- refactor krms_cntxt_term_spec_prereq_t to be a valid term specs table instead
--
-- rename krms_cntxt_term_spec_prereq_t to krms_cntxt_vld_term_spec_t
-- and add prereq column
ALTER TABLE KRMS_CNTXT_TERM_SPEC_PREREQ_T DROP CONSTRAINT KRMS_CNTXT_ASSET_PREREQ_FK1
/
DROP INDEX KRMS_CNTXT_ASSET_PREREQ_TI1
/
ALTER TABLE KRMS_CNTXT_TERM_SPEC_PREREQ_T DROP CONSTRAINT KRMS_CNTXT_ASSET_PREREQ_FK2
/
DROP INDEX KRMS_CNTXT_ASSET_PREREQ_TI2
/
ALTER TABLE KRMS_CNTXT_TERM_SPEC_PREREQ_T RENAME TO KRMS_CNTXT_VLD_TERM_SPEC_T
/
ALTER TABLE KRMS_CNTXT_VLD_TERM_SPEC_T ADD PREREQ VARCHAR2(1) DEFAULT 'N'
/
ALTER TABLE KRMS_CNTXT_VLD_TERM_SPEC_T ADD CONSTRAINT KRMS_CNTXT_VLD_TERM_SPEC_TI1 FOREIGN KEY (CNTXT_ID) REFERENCES KRMS_CNTXT_T(CNTXT_ID)
/
ALTER TABLE KRMS_CNTXT_VLD_TERM_SPEC_T ADD CONSTRAINT KRMS_CNTXT_VLD_TERM_SPEC_TI2 FOREIGN KEY (TERM_SPEC_ID) REFERENCES KRMS_TERM_SPEC_T(TERM_SPEC_ID)
/
--
-- set up some missing unique constraints
--
-- wow, Oracle and MySQL support the same syntax here
ALTER TABLE KRMS_CNTXT_T ADD CONSTRAINT KRMS_CNTXT_TC1 UNIQUE (NM, NMSPC_CD)
/
ALTER TABLE KRMS_FUNC_T ADD CONSTRAINT KRMS_FUNC_TC1 UNIQUE (NM, NMSPC_CD)
/
-- drop namespace code from krms_agenda_t
ALTER TABLE KRMS_AGENDA_T DROP COLUMN NMSPC_CD
/
ALTER TABLE KRMS_AGENDA_T ADD CONSTRAINT KRMS_AGENDA_TC1 UNIQUE (NM, CNTXT_ID)
/
ALTER TABLE KRMS_TYP_T ADD CONSTRAINT KRMS_TYP_TC1 UNIQUE (NM, NMSPC_CD)
/
ALTER TABLE KRMS_ATTR_DEFN_T ADD CONSTRAINT KRMS_ATTR_DEFN_TC1 UNIQUE (NM, NMSPC_CD)
/
ALTER TABLE KRMS_RULE_T ADD CONSTRAINT KRMS_RULE_TC1 UNIQUE (NM, NMSPC_CD)
/
--
-- clean up some crufty index and constraint names
--

ALTER TABLE KRMS_TERM_RSLVR_ATTR_T DROP CONSTRAINT KRMS_ASSET_RSLVR_ATTR_FK1
/
ALTER TABLE KRMS_TERM_RSLVR_ATTR_T DROP CONSTRAINT KRMS_ASSET_RSLVR_ATTR_FK2
/
DROP INDEX KRMS_ASSET_RSLVR_ATTR_TI1
/
CREATE INDEX KRMS_TERM_RSLVR_ATTR_TI1 ON KRMS_TERM_RSLVR_ATTR_T (TERM_RSLVR_ID)
/
DROP INDEX KRMS_ASSET_RSLVR_ATTR_TI2
/
CREATE INDEX KRMS_TERM_RSLVR_ATTR_TI2 ON KRMS_TERM_RSLVR_ATTR_T (ATTR_DEFN_ID)
/
ALTER TABLE KRMS_TERM_RSLVR_ATTR_T ADD CONSTRAINT KRMS_TERM_RSLVR_ATTR_FK1 FOREIGN KEY (TERM_RSLVR_ID) REFERENCES KRMS_TERM_RSLVR_T (TERM_RSLVR_ID)
/
ALTER TABLE KRMS_TERM_RSLVR_ATTR_T ADD CONSTRAINT KRMS_TERM_RSLVR_ATTR_FK2 FOREIGN KEY (ATTR_DEFN_ID) REFERENCES KRMS_ATTR_DEFN_T (ATTR_DEFN_ID)
/





-- 
-- 2011-08-11.sql
-- 




-- -----------------------------------------------------
-- Table KREW_TYP_T
-- -----------------------------------------------------

CREATE  TABLE KREW_TYP_T (
  TYP_ID VARCHAR2(40) NOT NULL ,
  NM VARCHAR2(100) NOT NULL ,
  NMSPC_CD VARCHAR2(40) NOT NULL ,
  SRVC_NM VARCHAR2(200) NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y' NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0 NOT NULL ,
  PRIMARY KEY (TYP_ID) )
/

CREATE UNIQUE INDEX KREW_TYP_TC1 ON KREW_TYP_T (NM, NMSPC_CD)
/


-- -----------------------------------------------------
-- Table KREW_PPL_FLW_T
-- -----------------------------------------------------

CREATE  TABLE KREW_PPL_FLW_T (
  PPL_FLW_ID VARCHAR2(40) NOT NULL ,
  NM VARCHAR2(100) NOT NULL ,
  NMSPC_CD VARCHAR2(40) NOT NULL ,
  TYP_ID VARCHAR2(40) NOT NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y' NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0 NOT NULL ,
  DESC_TXT VARCHAR2(4000) NULL ,
  PRIMARY KEY (PPL_FLW_ID) ,
  CONSTRAINT KREW_PPL_FLW_FK1
    FOREIGN KEY (TYP_ID )
    REFERENCES KREW_TYP_T (TYP_ID ))
/

CREATE UNIQUE INDEX KREW_PPL_FLW_TC1 ON KREW_PPL_FLW_T (NM, NMSPC_CD)
/

CREATE INDEX KREW_PPL_FLW_TI1 ON KREW_PPL_FLW_T (TYP_ID)
/


-- -----------------------------------------------------
-- Table KREW_ATTR_DEFN_T
-- -----------------------------------------------------

CREATE  TABLE KREW_ATTR_DEFN_T (
  ATTR_DEFN_ID VARCHAR2(40) NOT NULL ,
  NM VARCHAR2(100) NOT NULL ,
  NMSPC_CD VARCHAR2(40) NOT NULL ,
  LBL VARCHAR2(40) NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y' NOT NULL ,
  CMPNT_NM VARCHAR2(100) NULL ,
  VER_NBR NUMBER(8) DEFAULT 0 NOT NULL ,
  DESC_TXT VARCHAR2(40) NULL ,
  PRIMARY KEY (ATTR_DEFN_ID) )
/

CREATE UNIQUE INDEX KREW_ATTR_DEFN_TC1 ON KREW_ATTR_DEFN_T (NM, NMSPC_CD)
/


-- -----------------------------------------------------
-- Table KREW_TYP_ATTR_T
-- -----------------------------------------------------

CREATE  TABLE KREW_TYP_ATTR_T (
  TYP_ATTR_ID VARCHAR2(40) NOT NULL ,
  SEQ_NO NUMBER(5) NOT NULL ,
  TYP_ID VARCHAR2(40) NOT NULL ,
  ATTR_DEFN_ID VARCHAR2(255) NOT NULL ,
  ACTV VARCHAR2(1) DEFAULT 'Y' NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0 NOT NULL ,
  PRIMARY KEY (TYP_ATTR_ID) ,
  CONSTRAINT KREW_TYP_ATTR_FK1
    FOREIGN KEY (ATTR_DEFN_ID )
    REFERENCES KREW_ATTR_DEFN_T (ATTR_DEFN_ID ),
  CONSTRAINT KREW_TYP_ATTR_FK2
    FOREIGN KEY (TYP_ID )
    REFERENCES KREW_TYP_T (TYP_ID ))
/

CREATE INDEX KREW_TYP_ATTR_TI1 ON KREW_TYP_ATTR_T (ATTR_DEFN_ID)
/

CREATE INDEX KREW_TYP_ATTR_TI2 ON KREW_TYP_ATTR_T (TYP_ID)
/

CREATE UNIQUE INDEX KREW_TYP_ATTR_TC1 ON KREW_TYP_ATTR_T (TYP_ID, ATTR_DEFN_ID)
/


-- -----------------------------------------------------
-- Table KREW_PPL_FLW_MBR_T
-- -----------------------------------------------------

CREATE  TABLE KREW_PPL_FLW_MBR_T (
  PPL_FLW_MBR_ID VARCHAR2(40) NOT NULL ,
  PPL_FLW_ID VARCHAR2(40) NOT NULL ,
  MBR_TYP_CD VARCHAR2(1) NOT NULL ,
  MBR_ID VARCHAR2(40) NOT NULL ,
  PRIO NUMBER(8) NULL ,
  DLGT_FRM_ID VARCHAR2(40) NULL ,
  VER_NBR NUMBER(8) DEFAULT 0 NOT NULL ,
  PRIMARY KEY (PPL_FLW_MBR_ID) ,
  CONSTRAINT KREW_PPL_FLW_MBR_FK1
    FOREIGN KEY (PPL_FLW_ID )
    REFERENCES KREW_PPL_FLW_T (PPL_FLW_ID ),
  CONSTRAINT KREW_PPL_FLW_MBR_FK2
    FOREIGN KEY (DLGT_FRM_ID )
    REFERENCES KREW_PPL_FLW_MBR_T (PPL_FLW_MBR_ID ))
/

CREATE INDEX KREW_PPL_FLW_MBR_TI1 ON KREW_PPL_FLW_MBR_T (PPL_FLW_ID)
/

CREATE INDEX KREW_PPL_FLW_MBR_TI2 ON KREW_PPL_FLW_MBR_T (PPL_FLW_ID, PRIO)
/

CREATE UNIQUE INDEX KREW_PPL_FLW_MBR_TC1 ON KREW_PPL_FLW_MBR_T (PPL_FLW_ID, MBR_TYP_CD, MBR_ID, DLGT_FRM_ID)
/

CREATE INDEX KREW_PPL_FLW_MBR_TI3 ON KREW_PPL_FLW_MBR_T (DLGT_FRM_ID)
/


-- -----------------------------------------------------
-- Table KREW_PPL_FLW_ATTR_T
-- -----------------------------------------------------

CREATE  TABLE KREW_PPL_FLW_ATTR_T (
  PPL_FLW_ATTR_ID VARCHAR2(40) NOT NULL ,
  PPL_FLW_ID VARCHAR2(40) NOT NULL ,
  ATTR_DEFN_ID VARCHAR2(40) NOT NULL ,
  ATTR_VAL VARCHAR2(400) NULL ,
  VER_NBR NUMBER(8) DEFAULT 0 NOT NULL ,
  PRIMARY KEY (PPL_FLW_ATTR_ID) ,
  CONSTRAINT KREW_PPL_FLW_ATTR_FK1
    FOREIGN KEY (PPL_FLW_ID )
    REFERENCES KREW_PPL_FLW_T (PPL_FLW_ID ),
  CONSTRAINT KREW_PPL_FLW_ATTR_FK2
    FOREIGN KEY (ATTR_DEFN_ID )
    REFERENCES KREW_ATTR_DEFN_T (ATTR_DEFN_ID ))
/

CREATE INDEX KREW_PPL_FLW_ATTR_TI1 ON KREW_PPL_FLW_ATTR_T (PPL_FLW_ID)
/

CREATE INDEX KREW_PPL_FLW_ATTR_TI2 ON KREW_PPL_FLW_ATTR_T (ATTR_DEFN_ID)
/


-- -----------------------------------------------------
-- Table KREW_TYP_S
-- -----------------------------------------------------
CREATE SEQUENCE KREW_TYP_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

-- -----------------------------------------------------
-- Table KREW_TYP_ATTR_S
-- -----------------------------------------------------
CREATE SEQUENCE KREW_TYP_ATTR_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

-- -----------------------------------------------------
-- Table KREW_ATTR_DEFN_S
-- -----------------------------------------------------
CREATE SEQUENCE KREW_ATTR_DEFN_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

-- -----------------------------------------------------
-- Table KREW_PPL_FLW_S
-- -----------------------------------------------------
CREATE SEQUENCE KREW_PPL_FLW_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

-- -----------------------------------------------------
-- Table KREW_PPL_FLW_ATTR_S
-- -----------------------------------------------------
CREATE SEQUENCE KREW_PPL_FLW_ATTR_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/

-- -----------------------------------------------------
-- Table KREW_PPL_FLW_MBR_S
-- -----------------------------------------------------
CREATE SEQUENCE KREW_PPL_FLW_MBR_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/





-- 
-- 2011-08-17.sql
-- 


DELETE FROM KRCR_PARM_T
WHERE NMSPC_CD = 'KR-NS'
AND CMPNT_CD = 'All'
AND PARM_NM IN ('STRING_TO_DATE_FORMATS', 'STRING_TO_TIMESTAMP_FORMATS', 'TIMESTAMP_TO_STRING_FORMAT_FOR_USER_INTERFACE', 'DATE_TO_STRING_FORMAT_FOR_FILE_NAME', 'TIMESTAMP_TO_STRING_FORMAT_FOR_FILE_NAME')
/





-- 
-- 2011-08-29.sql
-- 


DELETE FROM KRCR_PARM_T WHERE PARM_NM = 'CACHING_IND'
/





-- 
-- 2011-09-07.sql
-- 


-- KULRICE-5360 rename KIM entity fields
ALTER TABLE KRIM_ENTITY_NM_T RENAME COLUMN TITLE_NM TO PREFIX_NM
/

ALTER TABLE KRIM_ENTITY_BIO_T RENAME COLUMN BIRTH_STATE_CD TO BIRTH_STATE_PVC_CD
/

ALTER TABLE KRIM_ENTITY_ADDR_T RENAME COLUMN POSTAL_STATE_CD TO STATE_PVC_CD
/
ALTER TABLE KRIM_ENTITY_ADDR_T RENAME COLUMN CITY_NM TO CITY
/

ALTER TABLE KRIM_PND_NM_MT RENAME COLUMN TITLE_NM TO PREFIX_NM
/
ALTER TABLE KRIM_PND_ADDR_MT RENAME COLUMN POSTAL_STATE_CD TO STATE_PVC_CD
/
ALTER TABLE KRIM_PND_ADDR_MT RENAME COLUMN CITY_NM TO CITY
/





-- 
-- 2011-09-15.sql
-- 


DELETE FROM KREW_USR_OPTN_T WHERE PRSN_OPTN_ID LIKE 'DocSearch%'
/





-- 
-- 2011-09-16.sql
-- 


-- KULRICE-5360 add KIM entity fields
ALTER TABLE KRIM_ENTITY_NM_T ADD TITLE_NM VARCHAR(20)
/
ALTER TABLE KRIM_ENTITY_NM_T ADD NOTE_MSG VARCHAR(1024)
/
ALTER TABLE KRIM_ENTITY_NM_T ADD NM_CHNG_DT DATE
/

ALTER TABLE KRIM_ENTITY_ADDR_T ADD ATTN_LINE VARCHAR(45)
/
ALTER TABLE KRIM_ENTITY_ADDR_T ADD ADDR_FMT VARCHAR(256)
/
ALTER TABLE KRIM_ENTITY_ADDR_T ADD MOD_DT DATE DEFAULT SYSDATE
/
ALTER TABLE KRIM_ENTITY_ADDR_T ADD VALID_DT DATE
/
ALTER TABLE KRIM_ENTITY_ADDR_T ADD VALID_IND VARCHAR(1)
/
ALTER TABLE KRIM_ENTITY_ADDR_T ADD NOTE_MSG VARCHAR(1024)
/


ALTER TABLE KRIM_ENTITY_BIO_T ADD NOTE_MSG VARCHAR(1024)
/
ALTER TABLE KRIM_ENTITY_BIO_T ADD GNDR_CHG_CD VARCHAR(20)
/

ALTER TABLE KRIM_PND_NM_MT ADD TITLE_NM VARCHAR(20)
/
ALTER TABLE KRIM_PND_NM_MT ADD NOTE_MSG VARCHAR(1024)
/
ALTER TABLE KRIM_PND_NM_MT ADD NM_CHNG_DT DATE
/

ALTER TABLE KRIM_PND_ADDR_MT ADD ATTN_LINE VARCHAR(45)
/
ALTER TABLE KRIM_PND_ADDR_MT ADD ADDR_FMT VARCHAR(256)
/
ALTER TABLE KRIM_PND_ADDR_MT ADD MOD_DT DATE DEFAULT SYSDATE
/
ALTER TABLE KRIM_PND_ADDR_MT ADD VALID_DT DATE
/
ALTER TABLE KRIM_PND_ADDR_MT ADD VALID_IND VARCHAR(1)
/
ALTER TABLE KRIM_PND_ADDR_MT ADD NOTE_MSG VARCHAR(1024)
/





-- 
-- 2011-09-18.sql
-- 


ALTER TABLE KREW_PPL_FLW_T MODIFY(TYP_ID NULL)
/
DECLARE
c NUMBER;
BEGIN
select count(*) into c from all_constraints where CONSTRAINT_NAME = 'KREW_PPL_FLW_MBR_TC1' ;
IF c>0 THEN
EXECUTE IMMEDIATE 'ALTER TABLE KREW_PPL_FLW_MBR_T DROP CONSTRAINT KREW_PPL_FLW_MBR_TC1';
ELSE
DBMS_OUTPUT.PUT_LINE('KREW_PPL_FLW_MBR_TC1 does not exist, so not running statement to change/drop it.');
END IF;
END;
/
ALTER TABLE KREW_PPL_FLW_MBR_T DROP COLUMN DLGT_FRM_ID
/

-- -----------------------------------------------------
-- Table KREW_PPL_FLW_DLGT_T
-- -----------------------------------------------------

CREATE  TABLE KREW_PPL_FLW_DLGT_T (
  PPL_FLW_DLGT_ID VARCHAR2(40) NOT NULL ,
  PPL_FLW_MBR_ID VARCHAR2(40) NOT NULL ,
  MBR_ID VARCHAR2(40) NOT NULL ,
  MBR_TYP_CD VARCHAR2(1) NOT NULL ,
  DLGN_TYP_CD VARCHAR2(1) NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0 NOT NULL ,
  PRIMARY KEY (PPL_FLW_DLGT_ID) ,
  CONSTRAINT KREW_PPL_FLW_DLGT_FK1
    FOREIGN KEY (PPL_FLW_MBR_ID )
    REFERENCES KREW_PPL_FLW_MBR_T (PPL_FLW_MBR_ID ))
/

CREATE INDEX KREW_PPL_FLW_DLGT_TI1 ON KREW_PPL_FLW_DLGT_T (PPL_FLW_MBR_ID)
/

CREATE SEQUENCE KREW_PPL_FLW_DLGT_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/





-- 
-- 2011-09-26b.sql
-- 


-- KIM permissions
INSERT INTO KRCR_NMSPC_T
(NMSPC_CD, NM, ACTV_IND, APPL_ID, VER_NBR, OBJ_ID)
VALUES ('KR-RULE','Kuali Rules','Y','RICE',1,SYS_GUID())
/

INSERT INTO KRIM_PERM_TMPL_T
(PERM_TMPL_ID, NM, NMSPC_CD, DESC_TXT, KIM_TYP_ID, ACTV_IND, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(PERM_TMPL_ID, '[^0-9]', ''))) + 1) FROM KRIM_PERM_TMPL_T WHERE PERM_TMPL_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(PERM_TMPL_ID, '[^0-9]', '')) < 10000),
        'KRMS Agenda Permission','KR-RULE','View/Maintain Agenda',
        (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NM = 'Namespace' AND NMSPC_CD = 'KR-NS'),
        'Y',1,SYS_GUID())
/

INSERT INTO KRIM_PERM_T
(PERM_ID, PERM_TMPL_ID, NMSPC_CD, NM, DESC_TXT, ACTV_IND, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(PERM_ID, '[^0-9]', ''))) + 1) FROM KRIM_PERM_T WHERE PERM_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(PERM_ID, '[^0-9]', '')) < 10000),
        (SELECT PERM_TMPL_ID FROM KRIM_PERM_TMPL_T WHERE NM = 'KRMS Agenda Permission' AND NMSPC_CD = 'KR-RULE'),
        'KR-RULE','Maintain KRMS Agenda','Allows creation and modification of agendas via the agenda editor','Y',1,SYS_GUID())
/

INSERT INTO KRIM_PERM_ATTR_DATA_T
(ATTR_DATA_ID, PERM_ID, KIM_TYP_ID, KIM_ATTR_DEFN_ID, ATTR_VAL, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ATTR_DATA_ID, '[^0-9]', ''))) + 1) FROM KRIM_PERM_ATTR_DATA_T WHERE ATTR_DATA_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ATTR_DATA_ID, '[^0-9]', '')) < 10000),
        (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Maintain KRMS Agenda' AND NMSPC_CD = 'KR-RULE'),
        (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NM = 'Namespace' AND NMSPC_CD = 'KR-NS'),
        (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NM = 'namespaceCode'),
        'KRMS_TEST',1,SYS_GUID())
/

-- KIM roles
INSERT INTO KRIM_ROLE_T
(ROLE_ID, ROLE_NM, NMSPC_CD, DESC_TXT, KIM_TYP_ID, ACTV_IND, LAST_UPDT_DT, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ROLE_ID, '[^0-9]', ''))) + 1) FROM KRIM_ROLE_T WHERE ROLE_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ROLE_ID, '[^0-9]', '')) < 10000),
        'Kuali Rules Management System Administrator',
        'KR-RULE',
        'This role maintains KRMS agendas and rules.',
        (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NM = 'Default' AND NMSPC_CD = 'KUALI'),
        'Y', CURRENT_DATE, SYS_GUID())
/

INSERT INTO KRIM_ROLE_MBR_T
(ROLE_MBR_ID, ROLE_ID, MBR_ID, MBR_TYP_CD, LAST_UPDT_DT, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ROLE_MBR_ID, '[^0-9]', ''))) + 1) FROM KRIM_ROLE_MBR_T WHERE ROLE_MBR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ROLE_MBR_ID, '[^0-9]', '')) < 10000),
        (SELECT ROLE_ID FROM KRIM_ROLE_T WHERE ROLE_NM = 'Kuali Rules Management System Administrator' AND NMSPC_CD = 'KR-RULE'),
        (SELECT PRNCPL_ID FROM KRIM_PRNCPL_T WHERE PRNCPL_NM = 'admin'),
        'P', CURRENT_DATE, 1, SYS_GUID())
/

INSERT INTO KRIM_ROLE_PERM_T
(ROLE_PERM_ID, ROLE_ID, PERM_ID, ACTV_IND, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ROLE_PERM_ID, '[^0-9]', ''))) + 1) FROM KRIM_ROLE_PERM_T WHERE ROLE_PERM_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ROLE_PERM_ID, '[^0-9]', '')) < 10000),
        (SELECT ROLE_ID FROM KRIM_ROLE_T WHERE ROLE_NM = 'Kuali Rules Management System Administrator' AND NMSPC_CD = 'KR-RULE'),
        (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Maintain KRMS Agenda' AND NMSPC_CD = 'KR-RULE'),
        'Y', 1, SYS_GUID())
/




-- 
-- 2011-09-26.sql
-- 


ALTER TABLE KREW_DOC_TYP_T DROP COLUMN CSTM_ACTN_LIST_ATTRIB_CLS_NM
/
ALTER TABLE KREW_DOC_TYP_T DROP COLUMN CSTM_ACTN_EMAIL_ATTRIB_CLS_NM
/
ALTER TABLE KREW_DOC_TYP_T DROP COLUMN CSTM_DOC_NTE_ATTRIB_CLS_NM
/





-- 
-- 2011-09-30.sql
-- 




-- -----------------------------------------------------
-- Table KRMS_CNTXT_VLD_AGENDA_T
-- -----------------------------------------------------
-- BEGIN EXECUTE IMMEDIATE 'DROP TABLE KRMS_CNTXT_VLD_AGENDA_T'; EXCEPTION WHEN OTHERS THEN NULL; END;

CREATE  TABLE  KRMS_CNTXT_VLD_AGENDA_T (
  CNTXT_VLD_AGENDA_ID VARCHAR2(40)  NOT NULL ,
  CNTXT_ID VARCHAR2(40)  NOT NULL ,
  AGENDA_TYP_ID VARCHAR2(40)  NOT NULL ,
  VER_NBR NUMBER(8) DEFAULT 0  NOT NULL ,
  PRIMARY KEY (CNTXT_VLD_AGENDA_ID) ,
  -- CREATE INDEX KRMS_CNTXT_VLD_AGENDA_TI1 (CNTXT_ID ASC) ,
  CONSTRAINT KRMS_CNTXT_VLD_AGENDA_FK1
    FOREIGN KEY (CNTXT_ID )
    REFERENCES KRMS_CNTXT_T (CNTXT_ID ) )
/

CREATE INDEX KRMS_CNTXT_VLD_AGENDA_TI1 ON KRMS_CNTXT_VLD_AGENDA_T (CNTXT_ID ASC)
/

CREATE SEQUENCE KRMS_CNTXT_VLD_AGENDA_S INCREMENT BY 1 START WITH 10000 NOMAXVALUE NOCYCLE NOCACHE ORDER
/





-- 
-- 2011-10-03.sql
-- 


ALTER TABLE KREW_PPL_FLW_MBR_T ADD ACTN_RQST_PLCY_CD VARCHAR2(1)
/
ALTER TABLE KREW_PPL_FLW_MBR_T ADD RSP_ID VARCHAR2(40) NOT NULL
/
ALTER TABLE KREW_PPL_FLW_DLGT_T ADD ACTN_RQST_PLCY_CD VARCHAR2(1)
/
ALTER TABLE KREW_PPL_FLW_DLGT_T ADD RSP_ID VARCHAR2(40) NOT NULL
/





-- 
-- 2011-10-21.sql
-- 


-- KULRICE-5348
ALTER TABLE KREW_RULE_T RENAME COLUMN PREV_RULE_VER_NBR TO PREV_VER_RULE_ID
/
-- KULRICE-4589
UPDATE KRCR_PARM_T
SET PARM_NM='NOTIFY_GROUPS',
    PARM_DESC_TXT='Defines a group name (in the format "namespace:name") which contains members who should never receive "notifications" action requests from KEW.',
    EVAL_OPRTR_CD='D'
WHERE NMSPC_CD = 'KR-WKFLW'
  AND CMPNT_CD = 'Notification'
  AND PARM_NM = 'NOTIFY_EXCLUDED_USERS_IND'
/





-- 
-- 2011-10-23.sql
-- 


ALTER TABLE KRCR_CMPNT_T ADD CMPNT_SET_ID VARCHAR2(40)
/
CREATE TABLE KRCR_CMPNT_SET_T (
  CMPNT_SET_ID VARCHAR2(40) NOT NULL,
  LAST_UPDT_TS DATE NOT NULL,
  CHKSM VARCHAR2(40) NOT NULL,
  VER_NBR NUMBER(8) DEFAULT 0 NOT NULL,
  PRIMARY KEY (CMPNT_SET_ID) )
/





-- 
-- 2011-10-24.sql
-- 


ALTER TABLE KRCR_CMPNT_T DROP COLUMN CMPNT_SET_ID
/
CREATE TABLE KRCR_DRVD_CMPNT_T (
  NMSPC_CD VARCHAR2(20) NOT NULL,
  CMPNT_CD VARCHAR2(100) NOT NULL,
  NM VARCHAR2(255),
  CMPNT_SET_ID VARCHAR2(40) NOT NULL,
  PRIMARY KEY (NMSPC_CD, CMPNT_CD))
/





-- 
-- 2011-10-25.sql
-- 


UPDATE KREW_RULE_ATTR_T SET RULE_ATTR_TYP_CD='DocumentSecurityAttribute' WHERE RULE_ATTR_TYP_CD='DocumentSearchSecurityFilterAttribute'
/

UPDATE KRCR_PARM_T SET CMPNT_CD='DocumentSearch' WHERE CMPNT_CD='DocSearchCriteriaDTO'
/
INSERT INTO KRCR_CMPNT_T (NMSPC_CD, CMPNT_CD, NM, ACTV_IND, OBJ_ID, VER_NBR)
VALUES ('KR-WKFLW', 'DocumentSearch', 'Document Search', 'Y', SYS_GUID(), 1)
/





-- 
-- 2011-10-26.sql
-- 


INSERT INTO KRCR_CMPNT_T (NMSPC_CD, CMPNT_CD, NM, ACTV_IND, OBJ_ID, VER_NBR)
VALUES ('KR-WKFLW', 'Rule', 'Rule', 'Y', SYS_GUID(), 1)
/
UPDATE KRCR_CMPNT_T SET CMPNT_CD='EDocLite' WHERE CMPNT_CD LIKE 'EDocLite%'
/





-- 
-- 2011-10-27.sql
-- 


-- create a KIM permission for the Cache Administrator screen/controller

INSERT INTO KRIM_PERM_T
(PERM_ID, PERM_TMPL_ID, NMSPC_CD, NM, DESC_TXT, ACTV_IND, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(PERM_ID, '[^0-9]', ''))) + 1) FROM KRIM_PERM_T WHERE PERM_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(PERM_ID, '[^0-9]', '')) < 10000),
        (SELECT PERM_TMPL_ID FROM KRIM_PERM_TMPL_T WHERE NM = 'Use Screen' AND NMSPC_CD = 'KR-NS'),
        'KR-SYS','Use Cache Adminstration Screen','Allows use of the cache administration screen','Y',1,SYS_GUID())
/



INSERT INTO KRIM_PERM_ATTR_DATA_T
(ATTR_DATA_ID, PERM_ID, KIM_TYP_ID, KIM_ATTR_DEFN_ID, ATTR_VAL, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ATTR_DATA_ID, '[^0-9]', ''))) + 1) FROM KRIM_PERM_ATTR_DATA_T WHERE ATTR_DATA_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ATTR_DATA_ID, '[^0-9]', '')) < 10000),
        (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Use Cache Adminstration Screen' AND NMSPC_CD = 'KR-SYS'),
        (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NM = 'Namespace or Action' AND NMSPC_CD = 'KR-NS'),
        (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NM = 'actionClass'),
        'org.kuali.rice.core.web.cache.CacheAdminController',1,SYS_GUID())
/


INSERT INTO KRIM_ROLE_PERM_T
(ROLE_PERM_ID, ROLE_ID, PERM_ID, ACTV_IND, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ROLE_PERM_ID, '[^0-9]', ''))) + 1) FROM KRIM_ROLE_PERM_T WHERE ROLE_PERM_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ROLE_PERM_ID, '[^0-9]', '')) < 10000),
        (SELECT ROLE_ID FROM KRIM_ROLE_T WHERE ROLE_NM = 'Technical Administrator' AND NMSPC_CD = 'KR-SYS'),
        (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Use Cache Adminstration Screen' AND NMSPC_CD = 'KR-SYS'),
        'Y', 1, SYS_GUID())
/





-- 
-- 2011-11-03.sql
-- 


-- Make typ_id column optional where appropriate

ALTER TABLE KRMS_RULE_T MODIFY TYP_ID VARCHAR2(40) NULL
/
ALTER TABLE KRMS_AGENDA_T MODIFY TYP_ID VARCHAR2(40) NULL
/
ALTER TABLE KRMS_CNTXT_T MODIFY TYP_ID VARCHAR2(40) NULL
/





-- 
-- 2011-11-14.sql
-- 


-- Drop foreign key constraint on krms_prop_t table
ALTER TABLE KRMS_PROP_T DROP CONSTRAINT KRMS_PROP_FK1
/





-- 
-- 2011-11-23.sql
-- 


-- give PeopleFlows friendlier names

UPDATE KRMS_TYP_T SET NM='NOTIFY PEOPLEFLOW' WHERE TYP_ID = '1000'
/
UPDATE KRMS_TYP_T SET NM='ROUTE TO PEOPLEFLOW' WHERE TYP_ID = '1001'
/

-- remove constraint that is preventing compound props from persisting

ALTER TABLE KRMS_CMPND_PROP_PROPS_T MODIFY SEQ_NO NUMBER(5) NULL
/





-- 
-- 2011-11-28.sql
-- 


UPDATE KRIM_PERM_T
   SET NMSPC_CD = 'KRMS_TEST'
 WHERE NM = 'Maintain KRMS Agenda'
   AND NMSPC_CD = 'KR-RULE'
/

DELETE FROM KRIM_PERM_ATTR_DATA_T
 WHERE PERM_ID = (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Maintain KRMS Agenda' AND NMSPC_CD = 'KRMS_TEST')
/





-- 
-- 2011-11-29.sql
-- 


ALTER TABLE KREW_RTE_NODE_T MODIFY ACTVN_TYP VARCHAR(1)
/





-- 
-- 2011-12-07.sql
-- 



-- correct fields in krms test data
UPDATE KRMS_PROP_T SET CMPND_OP_CD = '&' WHERE CMPND_OP_CD = 'a'
/
UPDATE KRMS_CMPND_PROP_PROPS_T SET SEQ_NO = '2' WHERE PROP_ID = 'P421C'
/
UPDATE KRMS_CMPND_PROP_PROPS_T SET SEQ_NO = '3' WHERE PROP_ID = 'P421D'
/
UPDATE KRMS_CMPND_PROP_PROPS_T SET SEQ_NO = '3' WHERE PROP_ID = 'P502C'
/

-- move seq_no column from krms_cmpnd_prop_props_t pivot table to krms_prop_t table.
ALTER TABLE KRMS_PROP_T ADD (CMPND_SEQ_NO DECIMAL(5,0) DEFAULT NULL)
/

UPDATE KRMS_PROP_T SET KRMS_PROP_T.CMPND_SEQ_NO = (SELECT SEQ_NO FROM KRMS_CMPND_PROP_PROPS_T WHERE PROP_ID = KRMS_PROP_T.PROP_ID)
/

ALTER TABLE KRMS_CMPND_PROP_PROPS_T DROP (SEQ_NO)
/





-- 
-- 2011-12-21.sql
-- 


UPDATE KRCR_NMSPC_T SET APPL_ID = 'RICE' WHERE NMSPC_CD = 'KUALI'
/




-- 
-- 2012-01-03.sql
-- 


INSERT INTO KRCR_NMSPC_T VALUES ('KR-KRAD', SYS_GUID(), 1, 'Kuali Rapid Application Development', 'Y', 'RICE')
/
INSERT INTO KRIM_ATTR_DEFN_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', ''))) + 1) FROM KRIM_ATTR_DEFN_T WHERE KIM_ATTR_DEFN_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'viewId', null, 'Y', 'KR-KRAD', 'org.kuali.rice.kim.bo.impl.KimAttributes')
/
INSERT INTO KRIM_ATTR_DEFN_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', ''))) + 1) FROM KRIM_ATTR_DEFN_T WHERE KIM_ATTR_DEFN_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'actionEvent', null, 'Y', 'KR-KRAD', 'org.kuali.rice.kim.bo.impl.KimAttributes')
/
INSERT INTO KRIM_ATTR_DEFN_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', ''))) + 1) FROM KRIM_ATTR_DEFN_T WHERE KIM_ATTR_DEFN_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'collectionPropertyName', null, 'Y', 'KR-KRAD', 'org.kuali.rice.kim.bo.impl.KimAttributes')
/
INSERT INTO KRIM_ATTR_DEFN_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', ''))) + 1) FROM KRIM_ATTR_DEFN_T WHERE KIM_ATTR_DEFN_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'fieldId', null, 'Y', 'KR-KRAD', 'org.kuali.rice.kim.bo.impl.KimAttributes')
/
INSERT INTO KRIM_ATTR_DEFN_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', ''))) + 1) FROM KRIM_ATTR_DEFN_T WHERE KIM_ATTR_DEFN_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'groupId', null, 'Y', 'KR-KRAD', 'org.kuali.rice.kim.bo.impl.KimAttributes')
/
INSERT INTO KRIM_ATTR_DEFN_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', ''))) + 1) FROM KRIM_ATTR_DEFN_T WHERE KIM_ATTR_DEFN_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'widgetId', null, 'Y', 'KR-KRAD', 'org.kuali.rice.kim.bo.impl.KimAttributes')
/
INSERT INTO KRIM_ATTR_DEFN_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', ''))) + 1) FROM KRIM_ATTR_DEFN_T WHERE KIM_ATTR_DEFN_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_ATTR_DEFN_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'actionId', null, 'Y', 'KR-KRAD', 'org.kuali.rice.kim.bo.impl.KimAttributes')
/
INSERT INTO KRIM_TYP_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_T WHERE KIM_TYP_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'View', 'viewPermissionTypeService', 'Y', 'KR-KRAD')
/
INSERT INTO KRIM_TYP_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_T WHERE KIM_TYP_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'View Edit Mode', 'viewEditModePermissionTypeService', 'Y', 'KR-KRAD')
/
INSERT INTO KRIM_TYP_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_T WHERE KIM_TYP_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'View Field', 'viewFieldPermissionTypeService', 'Y', 'KR-KRAD')
/
INSERT INTO KRIM_TYP_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_T WHERE KIM_TYP_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'View Group', 'viewGroupPermissionTypeService', 'Y', 'KR-KRAD')
/
INSERT INTO KRIM_TYP_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_T WHERE KIM_TYP_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'View Widget', 'viewWidgetPermissionTypeService', 'Y', 'KR-KRAD')
/
INSERT INTO KRIM_TYP_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_T WHERE KIM_TYP_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'View Action', 'viewActionPermissionTypeService', 'Y', 'KR-KRAD')
/
INSERT INTO KRIM_TYP_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_T WHERE KIM_TYP_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'View Line Field', 'viewLineFieldPermissionTypeService', 'Y', 'KR-KRAD')
/
INSERT INTO KRIM_TYP_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_T WHERE KIM_TYP_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'View Line Action', 'viewLineActionPermissionTypeService', 'Y', 'KR-KRAD')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'a', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='viewId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'a', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Edit Mode'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='viewId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'b', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Edit Mode'), '10', 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'a', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Field'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='viewId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'b', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Field'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='fieldId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'c', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Field'), '6', 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'a', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Group'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='viewId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'b', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Group'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='groupId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'c', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Group'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='fieldId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'a', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Widget'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='viewId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'b', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Widget'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='widgetId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'a', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Action'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='viewId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'b', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Action'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='actionId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'c', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Action'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='actionEvent'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'a', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Field'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='viewId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'b', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Field'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='groupId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'c', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Field'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='collectionPropertyName'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'd', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Field'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='fieldId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'e', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Field'), '6', 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'a', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Action'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='viewId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'b', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Action'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='groupId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'c', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Action'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='collectionPropertyName'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'd', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Action'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='actionId'), 'Y')
/
INSERT INTO KRIM_TYP_ATTR_T VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', ''))) + 1) FROM KRIM_TYP_ATTR_T WHERE KIM_TYP_ATTR_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(KIM_TYP_ATTR_ID, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'e', (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Action'), (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NMSPC_CD='KR-KRAD' AND NM='actionEvent'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'Open View', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'Edit View', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'Use View', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Edit Mode'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'View Field', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Field'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'Edit Field', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Field'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'View Group', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Group'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'Edit Group', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Group'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'View Widget', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Widget'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'Edit Widget', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Widget'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'Perform Action', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Action'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'View Line', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Group'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'Edit Line', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Group'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'View Line Field', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Field'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'Edit Line Field', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Field'), 'Y')
/
INSERT INTO KRIM_PERM_TMPL_T VALUES ((select (max(TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', ''))) + 1) from krim_perm_tmpl_t where perm_tmpl_id is not NULL and TO_NUMBER(REGEXP_REPLACE(perm_tmpl_id, '[^0-9]', '')) < 10000), SYS_GUID(), 1, 'KR-KRAD', 'Perform Line Action', null, (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NMSPC_CD='KR-KRAD' AND NM='View Line Action'), 'Y')
/





-- 
-- 2012-01-04.sql
-- 


UPDATE KRMS_TERM_SPEC_T SET TYP = 'java.lang.String' WHERE TYP = 'T2'
/
    
UPDATE KRMS_TERM_SPEC_T SET TYP = 'java.lang.String' WHERE TYP = 'T1'
/

UPDATE KRMS_TERM_SPEC_T SET TYP = 'java.lang.Integer' WHERE TYP = 'T6'
/





-- 
-- 2012-01-05.sql
-- 


ALTER TABLE KRMS_CNTXT_VLD_ACTN_T RENAME CONSTRAINT KRMS_CNTXT_VLD_ACTN_FK1 TO KRMS_CNTXT_VLD_ACTN_TYP_FK1
/
ALTER INDEX KRMS_CNTXT_VLD_ACTN_TI1 RENAME TO KRMS_CNTXT_VLD_ACTN_TYP_TI1
/
RENAME KRMS_CNTXT_VLD_ACTN_S TO KRMS_CNTXT_VLD_ACTN_TYP_S
/
ALTER TABLE KRMS_CNTXT_VLD_ACTN_T RENAME TO KRMS_CNTXT_VLD_ACTN_TYP_T
/

ALTER TABLE KRMS_CNTXT_VLD_AGENDA_T RENAME CONSTRAINT KRMS_CNTXT_VLD_AGENDA_FK1 TO KRMS_CNTXT_VLD_AGENDA_TYP_FK1
/
ALTER INDEX KRMS_CNTXT_VLD_AGENDA_TI1 RENAME TO KRMS_CNTXT_VLD_AGENDA_TYP_TI1
/
RENAME KRMS_CNTXT_VLD_AGENDA_S TO KRMS_CNTXT_VLD_AGENDA_TYP_S
/
ALTER TABLE KRMS_CNTXT_VLD_AGENDA_T RENAME TO KRMS_CNTXT_VLD_AGENDA_TYP_T
/

ALTER TABLE KRMS_CNTXT_VLD_RULE_T RENAME CONSTRAINT KRMS_CNTXT_VLD_RULE_FK1 TO KRMS_CNTXT_VLD_RULE_TYP_FK1
/
ALTER INDEX KRMS_CNTXT_VLD_RULE_TI1 RENAME TO KRMS_CNTXT_VLD_RULE_TYP_TI1
/
RENAME KRMS_CNTXT_VLD_RULE_S TO KRMS_CNTXT_VLD_RULE_TYP_S
/
ALTER TABLE KRMS_CNTXT_VLD_RULE_T RENAME TO KRMS_CNTXT_VLD_RULE_TYP_T
/

ALTER TABLE KRMS_CNTXT_VLD_RULE_TYP_T RENAME COLUMN RULE_ID TO RULE_TYP_ID
/
UPDATE KRMS_AGENDA_T SET TYP_ID = NULL WHERE TYP_ID = 'T5'
/
UPDATE KRMS_RULE_T SET TYP_ID = NULL
/
DELETE FROM KRMS_CNTXT_VLD_RULE_TYP_T
/





-- 
-- 2012-01-06.sql
-- 


-- KULRICE-6299: New DB index to improve action list performance
CREATE INDEX KREW_ACTN_ITM_TI6 ON KREW_ACTN_ITM_T (DLGN_TYP, DLGN_PRNCPL_ID, DLGN_GRP_ID)
/





-- 
-- 2012-01-11.sql
-- 


-- KULRICE-6452

DROP TABLE KRMS_CNTXT_VLD_EVENT_T
/
DROP SEQUENCE KRMS_CNTXT_VLD_EVENT_S
/
RENAME KRMS_CNTXT_TERM_SPEC_PREREQ_S TO KRMS_CNTXT_VLD_TERM_SPEC_S
/





-- 
-- 2012-01-18.sql
-- 


ALTER TABLE KREW_DOC_HDR_T DROP COLUMN RTE_LVL_MDFN_DT
/





-- 
-- 2012-01-19b.sql
-- 



--
-- KULRICE-5856: KRNS_DOC_HDR_T.FDOC_DESC column is only 40 char
--

ALTER TABLE KRNS_DOC_HDR_T MODIFY (FDOC_DESC varchar2(255))
/

--
-- KULRICE-6463: New DB Indexes for KIM Permission checks
--

CREATE INDEX KRIM_ROLE_PERM_TI2 ON KRIM_ROLE_PERM_T (PERM_ID, ACTV_IND)
/
CREATE INDEX KRIM_PERM_TI1 ON KRIM_PERM_T (PERM_TMPL_ID)
/
CREATE INDEX KRIM_PERM_TI2 ON KRIM_PERM_T (PERM_TMPL_ID, ACTV_IND)
/
CREATE INDEX KRIM_PERM_TMPL_TI1 ON KRIM_PERM_TMPL_T (NMSPC_CD, NM)
/
CREATE INDEX KRIM_ROLE_MBR_TI2 ON KRIM_ROLE_MBR_T (role_id, mbr_id, mbr_typ_cd)
/
CREATE INDEX KRIM_ROLE_MBR_TI3 ON KRIM_ROLE_MBR_T (mbr_id, mbr_typ_cd)
/

--
-- KRMS Sample (and production) Data
--

--
-- Copyright 2005-2012 The Kuali Foundation
--
--

-- Notification PeopleFlowActionType

INSERT INTO KRMS_TYP_T
(TYP_ID, NM, NMSPC_CD, SRVC_NM, ACTV, VER_NBR)
VALUES ('1000', 'Notify PeopleFlow', 'KR-RULE', 'notificationPeopleFlowActionTypeService', 'Y', 1)
/

-- Approval PeopleFlowActionType

INSERT INTO KRMS_TYP_T
(TYP_ID, NM, NMSPC_CD, SRVC_NM, ACTV, VER_NBR)
VALUES ('1001', 'Route to PeopleFlow', 'KR-RULE', 'approvalPeopleFlowActionTypeService', 'Y', 1)
/


-- add a PeopleFlow attribute to the PeopleFlow types
INSERT INTO KRMS_ATTR_DEFN_T (ATTR_DEFN_ID, NM, NMSPC_CD, LBL, CMPNT_NM, DESC_TXT)
VALUES ('1000', 'peopleFlowId', 'KR-RULE', 'PeopleFlow', null,
'An identifier for a PeopleFlow')
/
INSERT INTO KRMS_TYP_ATTR_T (TYP_ATTR_ID, SEQ_NO, TYP_ID, ATTR_DEFN_ID) VALUES ('1000', 1, '1000', '1000')
/
INSERT INTO KRMS_TYP_ATTR_T (TYP_ATTR_ID, SEQ_NO, TYP_ID, ATTR_DEFN_ID) VALUES ('1001', 1, '1001', '1000')
/


-- General validation rule type
INSERT INTO KRMS_TYP_T (TYP_ID, NM, NMSPC_CD, SRVC_NM, ACTV, VER_NBR) VALUES('1002', 'Validation Rule', 'KR-RULE', 'validationRuleTypeService', 'Y', 1)
/
-- General validation action type
INSERT INTO KRMS_TYP_T (TYP_ID, NM, NMSPC_CD, SRVC_NM, ACTV, VER_NBR) VALUES('1003', 'Validation Action', 'KR-RULE', 'validationActionTypeService', 'Y', 1)
/
-- Invalid rule
INSERT INTO KRMS_ATTR_DEFN_T (ATTR_DEFN_ID, NM, NMSPC_CD, LBL, ACTV, CMPNT_NM, VER_NBR, DESC_TXT) VALUES ('1001', 'Invalid Rule', 'KR-RULE', 'Invalid Rule', 'Y', null, 1, 'If true, execute the action')
/
-- Valid rule
INSERT INTO KRMS_ATTR_DEFN_T (ATTR_DEFN_ID, NM, NMSPC_CD, LBL, ACTV, CMPNT_NM, VER_NBR, DESC_TXT) VALUES ('1002', 'Valid Rule', 'KR-RULE', 'Valid Rule', 'Y', null, 1, 'If false, execute the action')
/
-- The General rule subtypes attributes
-- use same sequence number to prove that falling back to natural order when sequences are the same works.
INSERT INTO KRMS_TYP_ATTR_T (TYP_ATTR_ID, SEQ_NO, TYP_ID, ATTR_DEFN_ID, ACTV, VER_NBR) VALUES ('1002', 1, '1002', '1001', 'Y', 1)
/
INSERT INTO KRMS_TYP_ATTR_T (TYP_ATTR_ID, SEQ_NO, TYP_ID, ATTR_DEFN_ID, ACTV, VER_NBR) VALUES ('1003', 1, '1002', '1002', 'Y', 1)
/
-- warning action
INSERT INTO KRMS_ATTR_DEFN_T (ATTR_DEFN_ID, NM, NMSPC_CD, LBL, ACTV, CMPNT_NM, VER_NBR, DESC_TXT) VALUES ('1003', 'Warning Action', 'KR-RULE', 'Warning Action', 'Y', null, 1, 'Warning')
/
-- error action
INSERT INTO KRMS_ATTR_DEFN_T (ATTR_DEFN_ID, NM, NMSPC_CD, LBL, ACTV, CMPNT_NM, VER_NBR, DESC_TXT) VALUES ('1004', 'Error Action', 'KR-RULE', 'Error Action', 'Y', null, 1, 'Error')
/
-- action message
INSERT INTO KRMS_ATTR_DEFN_T (ATTR_DEFN_ID, NM, NMSPC_CD, LBL, ACTV, CMPNT_NM, VER_NBR, DESC_TXT) VALUES ('1005', 'Action Message', 'KR-RULE', 'Action Message', 'Y', null, 1, 'Message validation action returns')
/
-- The General action type attribute
INSERT INTO KRMS_TYP_ATTR_T (TYP_ATTR_ID, SEQ_NO, TYP_ID, ATTR_DEFN_ID, ACTV, VER_NBR) VALUES ('1004', 1, '1003', '1003', 'Y', 1)
/
INSERT INTO KRMS_TYP_ATTR_T (TYP_ATTR_ID, SEQ_NO, TYP_ID, ATTR_DEFN_ID, ACTV, VER_NBR) VALUES ('1005', 2, '1003', '1004', 'Y', 1)
/
INSERT INTO KRMS_TYP_ATTR_T (TYP_ATTR_ID, SEQ_NO, TYP_ID, ATTR_DEFN_ID, ACTV, VER_NBR) VALUES ('1006', 3, '1003', '1005', 'Y', 1)
/


-- change permisison to use new krms test namespace
UPDATE KRIM_PERM_ATTR_DATA_T SET ATTR_VAL = 'KR-RULE-TEST' WHERE ATTR_VAL = 'KRMS_TEST'
/
UPDATE KRIM_PERM_T
   SET NMSPC_CD = 'KR-RULE-TEST'
 WHERE NM = 'Maintain KRMS Agenda'
   AND NMSPC_CD = 'KR-RULE'
/

UPDATE KRIM_PERM_T
   SET NMSPC_CD = 'KR-RULE-TEST'
 WHERE NM = 'Maintain KRMS Agenda'
   AND NMSPC_CD = 'KRMS_TEST'
/

DELETE FROM KRIM_PERM_ATTR_DATA_T
 WHERE PERM_ID = (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Maintain KRMS Agenda' AND NMSPC_CD = 'KRMS_TEST')
/





-- 
-- 2012-01-19c.sql
-- 


-- KULRICE-6537 - increase size of MBR_NM field
ALTER TABLE KRIM_PND_GRP_MBR_T MODIFY (MBR_NM VARCHAR2(100))
/





-- 
-- 2012-01-19.sql
-- 


CREATE TABLE KRCR_STYLE_T
(
      STYLE_ID VARCHAR2(40)
        , NM VARCHAR2(200) NOT NULL
        , XML CLOB NOT NULL
        , ACTV_IND NUMBER(1) NOT NULL
        , VER_NBR NUMBER(8) DEFAULT 0
        , OBJ_ID VARCHAR2(36) NOT NULL
    , CONSTRAINT KRCR_STYLE_TC0 UNIQUE (OBJ_ID)
)
/
INSERT INTO KRCR_STYLE_T SELECT STYLE_ID, NM, XML, ACTV_IND, VER_NBR, OBJ_ID FROM KREW_STYLE_T
/
DROP TABLE KREW_STYLE_T
/
ALTER TABLE KRCR_STYLE_T
    ADD CONSTRAINT KRCR_STYLE_TP1
PRIMARY KEY (STYLE_ID)
/


--
-- 2012-01-24.sql
--



-- PeopleFlow Name
INSERT INTO KRMS_ATTR_DEFN_T (ATTR_DEFN_ID, NM, NMSPC_CD, LBL, ACTV, CMPNT_NM, VER_NBR, DESC_TXT)
VALUES ('1006', 'peopleFlowName', 'KR_RULE', 'PeopleFlow Name', 'Y', null, 1, 'PeopleFlow Name')
/
INSERT INTO KRMS_TYP_ATTR_T (TYP_ATTR_ID, SEQ_NO, TYP_ID, ATTR_DEFN_ID, ACTV, VER_NBR)
VALUES ('1007', 3, '1000', '1006', 'Y', 1)
/
INSERT INTO KRMS_TYP_ATTR_T (TYP_ATTR_ID, SEQ_NO, TYP_ID, ATTR_DEFN_ID, ACTV, VER_NBR)
VALUES ('1008', 3, '1001', '1006', 'Y', 1)
/


--
-- 2010-01-31.sql
--


-- KULRICE-6481
ALTER TABLE KRIM_ROLE_PERM_T MODIFY (ROLE_ID NOT NULL)
/
ALTER TABLE KRIM_ROLE_PERM_T MODIFY (PERM_ID NOT NULL)
/

--
-- 2012-02-08.sql
--

-- create a KIM permission for the Creating a new Term, Context and TermSpecification

INSERT INTO KRIM_PERM_T
(PERM_ID, PERM_TMPL_ID, NMSPC_CD, NM, DESC_TXT, ACTV_IND, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(PERM_ID, '[^0-9]', ''))) + 1) FROM KRIM_PERM_T WHERE PERM_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(PERM_ID, '[^0-9]', '')) < 10000),
        (SELECT PERM_TMPL_ID FROM KRIM_PERM_TMPL_T WHERE NM = 'Create / Maintain Record(s)' AND NMSPC_CD = 'KR-NS'),
        'KR-NS','Create Term Maintenance Document','Allows user to create a new Term maintainence document','Y',1,
        '0dbce939-4f22-4e9b-a4bb-1615c0f411a2')
/
INSERT INTO KRIM_PERM_ATTR_DATA_T
(ATTR_DATA_ID, PERM_ID, KIM_TYP_ID, KIM_ATTR_DEFN_ID, ATTR_VAL, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ATTR_DATA_ID, '[^0-9]', ''))) + 1) FROM KRIM_PERM_ATTR_DATA_T WHERE ATTR_DATA_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ATTR_DATA_ID, '[^0-9]', '')) < 10000),
        (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Create Term Maintenance Document' AND NMSPC_CD = 'KR-NS'),
        (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NM = 'Document Type & Existing Records Only' AND NMSPC_CD = 'KR-NS'),
        (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NM = 'documentTypeName'),
        'TermMaintenanceDocument',1,'aa1d1400-6155-4819-8bad-e5dd81f9871b')
/
INSERT INTO KRIM_ROLE_PERM_T
(ROLE_PERM_ID, ROLE_ID, PERM_ID, ACTV_IND, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ROLE_PERM_ID, '[^0-9]', ''))) + 1) FROM KRIM_ROLE_PERM_T WHERE ROLE_PERM_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ROLE_PERM_ID, '[^0-9]', '')) < 10000),
        (SELECT ROLE_ID FROM KRIM_ROLE_T WHERE ROLE_NM = 'Kuali Rules Management System Administrator' AND NMSPC_CD = 'KR-RULE'),
        (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Create Term Maintenance Document' AND NMSPC_CD = 'KR-NS'),
        'Y', 1, '45f8f55e-23d9-4278-ade8-ddfc870852e6')
/
INSERT INTO KRIM_PERM_T
(PERM_ID, PERM_TMPL_ID, NMSPC_CD, NM, DESC_TXT, ACTV_IND, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(PERM_ID, '[^0-9]', ''))) + 1) FROM KRIM_PERM_T WHERE PERM_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(PERM_ID, '[^0-9]', '')) < 10000),
        (SELECT PERM_TMPL_ID FROM KRIM_PERM_TMPL_T WHERE NM = 'Create / Maintain Record(s)' AND NMSPC_CD = 'KR-NS'),
        'KR-NS','Create Context Maintenance Document','Allows user to create a new Context maintainence document','Y',1,
        'cefeed6d-b5e2-40aa-9034-137db317b532')
/
INSERT INTO KRIM_PERM_ATTR_DATA_T
(ATTR_DATA_ID, PERM_ID, KIM_TYP_ID, KIM_ATTR_DEFN_ID, ATTR_VAL, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ATTR_DATA_ID, '[^0-9]', ''))) + 1) FROM KRIM_PERM_ATTR_DATA_T WHERE ATTR_DATA_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ATTR_DATA_ID, '[^0-9]', '')) < 10000),
        (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Create Context Maintenance Document' AND NMSPC_CD = 'KR-NS'),
        (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NM = 'Document Type & Existing Records Only' AND NMSPC_CD = 'KR-NS'),
        (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NM = 'documentTypeName'),
        'ContextMaintenanceDocument',1,'c43bc7f5-949e-4a85-b173-6a53d81f2762')
/
INSERT INTO KRIM_ROLE_PERM_T
(ROLE_PERM_ID, ROLE_ID, PERM_ID, ACTV_IND, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ROLE_PERM_ID, '[^0-9]', ''))) + 1) FROM KRIM_ROLE_PERM_T WHERE ROLE_PERM_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ROLE_PERM_ID, '[^0-9]', '')) < 10000),
        (SELECT ROLE_ID FROM KRIM_ROLE_T WHERE ROLE_NM = 'Kuali Rules Management System Administrator' AND NMSPC_CD = 'KR-RULE'),
        (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Create Context Maintenance Document' AND NMSPC_CD = 'KR-NS'),
        'Y', 1, 'cd7cbc67-c0b2-4785-afa8-8c8d073b78df')
/
INSERT INTO KRIM_PERM_T
(PERM_ID, PERM_TMPL_ID, NMSPC_CD, NM, DESC_TXT, ACTV_IND, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(PERM_ID, '[^0-9]', ''))) + 1) FROM KRIM_PERM_T WHERE PERM_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(PERM_ID, '[^0-9]', '')) < 10000),
        (SELECT PERM_TMPL_ID FROM KRIM_PERM_TMPL_T WHERE NM = 'Create / Maintain Record(s)' AND NMSPC_CD = 'KR-NS'),
        'KR-NS','Create TermSpecification Maintenance Document','Allows user to create a new TermSpecification maintainence document','Y',1,
        '02bd9acd-48d9-4fec-acbd-6a441c5ea8c2')
/
INSERT INTO KRIM_PERM_ATTR_DATA_T
(ATTR_DATA_ID, PERM_ID, KIM_TYP_ID, KIM_ATTR_DEFN_ID, ATTR_VAL, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ATTR_DATA_ID, '[^0-9]', ''))) + 1) FROM KRIM_PERM_ATTR_DATA_T WHERE ATTR_DATA_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ATTR_DATA_ID, '[^0-9]', '')) < 10000),
        (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Create TermSpecification Maintenance Document' AND NMSPC_CD = 'KR-NS'),
        (SELECT KIM_TYP_ID FROM KRIM_TYP_T WHERE NM = 'Document Type & Existing Records Only' AND NMSPC_CD = 'KR-NS'),
        (SELECT KIM_ATTR_DEFN_ID FROM KRIM_ATTR_DEFN_T WHERE NM = 'documentTypeName'),
        'TermSpecificationMaintenanceDocument',1,'d3e373ca-296b-4834-bd66-ba159ebe733a')
/
INSERT INTO KRIM_ROLE_PERM_T
(ROLE_PERM_ID, ROLE_ID, PERM_ID, ACTV_IND, VER_NBR, OBJ_ID)
VALUES ((SELECT (MAX(TO_NUMBER(REGEXP_REPLACE(ROLE_PERM_ID, '[^0-9]', ''))) + 1) FROM KRIM_ROLE_PERM_T WHERE ROLE_PERM_ID IS NOT NULL AND TO_NUMBER(REGEXP_REPLACE(ROLE_PERM_ID, '[^0-9]', '')) < 10000),
        (SELECT ROLE_ID FROM KRIM_ROLE_T WHERE ROLE_NM = 'Kuali Rules Management System Administrator' AND NMSPC_CD = 'KR-RULE'),
        (SELECT PERM_ID FROM KRIM_PERM_T WHERE NM = 'Create TermSpecification Maintenance Document' AND NMSPC_CD = 'KR-NS'),
        'Y', 1, '83a270a0-1cdb-4440-ab8b-41cd8afc41d9')
/


--
-- KULRICE-6799: At one point (2.0-RC4 and before), the DOC_STAT_NM column was incorrectly set to 20 characters
--               the original script (2011-06-17.sql, and the "final" script) has been corrected, but this script has
--               been created in case that script had already been run.  Mysql scripts are unaffected by this, so there is no
--               equivalent mysql script.
--

ALTER TABLE KREW_DOC_TYP_APP_DOC_STAT_T MODIFY (DOC_STAT_NM VARCHAR2(64))
/

--
-- 2012-02-23.sql
--

--
-- KULRICE-6811: Conversion of WorkflowFunctions to EDLFunctions in eDocLite stylesheets
--

UPDATE KRCR_STYLE_T SET XML=REPLACE(XML,'org.kuali.rice.kew.edl.WorkflowFunctions','org.kuali.rice.edl.framework.util.EDLFunctions')
/
