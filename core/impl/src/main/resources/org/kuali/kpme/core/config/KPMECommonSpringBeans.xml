<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2004-2014 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                           http://www.springframework.org/schema/cache
                           http://www.springframework.org/schema/cache/spring-cache.xsd
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.1.xsd
                           http://www.springframework.org/schema/lang
                           http://www.springframework.org/schema/lang/spring-lang-3.1.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util-3.1.xsd">

    <import resource="classpath:org/kuali/kpme/core/config/CommonRiceServiceSpringBeans.xml"/>
    <import resource="classpath:org/kuali/rice/core/RiceJTASpringBeans.xml" />
    <import resource="classpath:org/kuali/kpme/core/config/DataSourceSpringBeans.xml" />
    <import resource="classpath:org/kuali/rice/core/CommonSpringBeans.xml"/>

    <!--<bean id="rice.core.config.propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
          p:properties="#{T(org.kuali.rice.core.api.config.property.ConfigContext).getCurrentContextConfig().getProperties()}"/>-->

    <bean id="platformAwareDao" class="org.kuali.rice.core.framework.persistence.ojb.dao.PlatformAwareDaoBaseOjb" abstract="true">
        <property name="jcdAlias" value="kradApplicationDataSource" />
        <property name="dbPlatform" ref="dbPlatform" />
    </bean>

    <bean id="platformAwareDaoJdbc" class="org.kuali.rice.core.framework.persistence.jdbc.dao.PlatformAwareDaoBaseJdbc" abstract="true">
        <property name="dataSource" ref="kpmeDataSource" />
        <property name="dbPlatform" ref="dbPlatform" />
    </bean>

    <!--<bean name="springContext" class="org.kuali.kpme.core.sys.context.SpringContext" />-->

    <!--<bean id="dbPlatform" class="org.kuali.rice.core.framework.resourceloader.GlobalResourceLoaderServiceFactoryBean">
        <property name="serviceName" value="dbPlatform" />
    </bean>
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="properties" value="#{T(org.kuali.rice.core.api.config.property.ConfigContext).getCurrentContextConfig().getProperties()}" />
    </bean>

    <bean id="transactionAdvisor" class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
        <property name="classFilter" ref="transactionAdvisorClassFilter" />
        <property name="transactionInterceptor" ref="transactionInterceptor" />
    </bean>

    <bean id="transactionAdvisorClassFilter" class="org.kuali.rice.core.impl.util.spring.ClassOrMethodAnnotationFilter">
        <constructor-arg value="org.springframework.transaction.annotation.Transactional" />
    </bean>

    <bean id="transactionInterceptor" class="org.kuali.rice.core.framework.persistence.jta.KualiTransactionInterceptor">
        <property name="transactionManager" ref="transactionManager" />
        <property name="transactionAttributeSource" ref="transactionAttributeSource" />
    </bean>

    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" lazy-init="true">
        <property name="userTransaction">
            <ref local="userTransaction" />
        </property>
        <property name="transactionManager">
            <ref local="jtaTransactionManager" />
        </property>
    </bean>

    <bean id="transactionTemplate"
          class="org.springframework.transaction.support.TransactionTemplate"
          p:transactionManager-ref="transactionManager"/>

    <bean id="userTransaction" class="org.kuali.rice.core.framework.persistence.jta.UserTransactionFactoryBean" lazy-init="true" />

    <bean id="jtaTransactionManager" class="org.kuali.rice.core.framework.persistence.jta.TransactionManagerFactoryBean" lazy-init="true" />

    <bean id="transactionAttributeSource" class="org.kuali.rice.core.impl.util.spring.AnnotationAndNameMatchingTransactionAttributeSource">
        <property name="annotationTransactionAttributeSource" ref="annotationTransactionAttributeSource" />
        <property name="transactionTimeout" value="${transaction.timeout}" />
    </bean>

    <bean id="annotationTransactionAttributeSource" class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource" />

    <bean id="commonDefaultAdvisorAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" />-->

    <bean id="kpme.serviceExporter" abstract="true" class="org.kuali.rice.ksb.api.bus.support.ServiceBusExporter"
          p:serviceBus-ref="rice.ksb.import.serviceBus" />

    <!-- System Definitions -->
    <bean id="rice.ksb.import.serviceBus" class="org.kuali.rice.core.framework.resourceloader.GlobalResourceLoaderServiceFactoryBean">
        <property name="serviceName" value="rice.ksb.serviceBus" />
    </bean>

    <bean id="kpme.soap.service" class="org.kuali.rice.ksb.api.bus.support.SoapServiceDefinition" abstract="true">
        <!--<property name="serviceNameSpaceURI" value="http://kpme.kuali.org/core/v2_0" />-->
        <property name="jaxWsService" value="true" />
        <property name="priority" value="3" />
        <property name="retryAttempts" value="0" />
        <property name="busSecurity" value="true" />
        <property name="serviceVersion" value="${kpme.version}" />
        <property name="servicePath" value="" />
    </bean>
    
    <!-- the following beans were in CORESpringBeans.xml -->
	
<!--  common lookupable beans for KNS hr business object lookup -->

	<!-- the below lookupable is wired with a service that in turn is eventually wired with a DAO that injects the effective date and timestamp subqueries into lookup -->
	<bean id="kpmeHrBusinessObjectLookupable" class="org.kuali.rice.kns.lookup.KualiLookupableImpl" scope="prototype">
    	<property name="lookupableHelperService">
       		<ref bean="kpmeHrBusinessObjectLookupableHelper"/>      		
    	</property>
	</bean>
	
	<bean id="kpmeHrBusinessObjectLookupableHelper" class="org.kuali.kpme.core.lookup.KpmeHrBusinessObjectLookupableHelper" scope="prototype">
    	<property name="lookupService">
       		<ref bean="kpmeHrBusinessObjectLookupService"/>
    	</property>
	</bean>
	
	<!-- the below lookupable is wired with a service that in turn is eventually wired with a DAO that injects the institution and location subqueries for group key -->
	<bean id="kpmeHrGroupKeyedBusinessObjectLookupable" class="org.kuali.rice.kns.lookup.KualiLookupableImpl" scope="prototype">
    	<property name="lookupableHelperService">
       		<ref bean="kpmeHrGroupKeyedBusinessObjectLookupableHelper"/>      		
    	</property>
	</bean>
	
	<bean id="kpmeHrGroupKeyedBusinessObjectLookupableHelper" class="org.kuali.kpme.core.lookup.KpmeHrBusinessObjectLookupableHelper" scope="prototype">
    	<property name="lookupService">
       		<ref bean="kpmeHrGroupKeyedBusinessObjectLookupService"/>
    	</property>
	</bean>
    
	<!-- common lookup service beans for KNS/KRAD hr business object lookup -->

	<!-- the below service is wired with a DAO that injects the effective date and timestamp subqueries into lookup -->
  	<bean id="kpmeHrBusinessObjectLookupService" parent="lookupService">
    	<property name="lookupDao">
       		<bean parent="lookupDao">
				<property name="lookupDaoOjb">
					<bean parent="lookupDaoOjb" class="org.kuali.kpme.core.bo.dao.KpmeHrBusinessObjectLookupDaoOjbImpl" />
				</property>
			</bean>
    	</property>
	</bean>
	
	<!-- the below service is wired with a DAO that injects the institution and location subqueries for group key (in addition to the date/timestamp subqueries of the above parent DAO) -->
    <bean id="kpmeHrGroupKeyedBusinessObjectLookupService" parent="lookupService">
    	<property name="lookupDao">
       		<bean parent="lookupDao">
				<property name="lookupDaoOjb">
					<bean parent="lookupDaoOjb" class="org.kuali.kpme.core.bo.dao.KPMEHrGroupKeyedBusinessObjectLookupDaoOjbImpl" />
				</property>
			</bean>
    	</property>
	</bean>   
    
<!--  parent beans for the above common beans for KNS/KRAD hr business object lookup; copied and pasted from KRAD spring bean file --> 
    <bean id="lookupService" class="org.kuali.rice.krad.service.impl.LookupServiceImpl">
    	<property name="lookupDao">
      		<ref bean="lookupDao"/>
    	</property>
    	<property name="kualiConfigurationService">
      		<ref bean="kualiConfigurationService"/>
    	</property>
  	</bean>
  	<bean id="lookupDao" class="org.kuali.rice.krad.dao.proxy.LookupDaoProxy">
    	<property name="lookupDaoJpa" ref="lookupDaoJpa"/>
    	<property name="lookupDaoOjb" ref="lookupDaoOjb"/>
  	</bean>
    <bean id="lookupDaoOjb" parent="platformAwareDao" class="org.kuali.rice.krad.dao.impl.LookupDaoOjb">
    	<property name="persistenceStructureService" ref="persistenceStructureService"/>
    	<property name="dateTimeService" ref="dateTimeService"/>
    	<property name="dataDictionaryService" ref="dataDictionaryService"/>
  	</bean>
  	
    <!-- the abpve beans were in CORESpringBeans.xml -->
</beans>