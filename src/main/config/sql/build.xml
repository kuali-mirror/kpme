<?xml version="1.0" encoding="UTF-8"?>
<project name="dbdeploy_lm" default="">

	<property environment="env" />

	<!-- should come from external
		<property name="db.user" value="kuldemo" />
		<property name="db.password" value="kuldemo" />
		<property name="db.schema" value="test" />
		<property name="db.url" value="jdbc:mysql://localhost:3306/${db.schema}" />
		<property name="app.version" value="0.1.0" />
	-->

	<!--
		- set up mysql drivers
		- set up dbdeploy
		- set up ant-contrib
		- set up version comparator
	-->
	<property name="db.driver" value="com.mysql.jdbc.Driver" />

	<path id="mysql.classpath">
		<fileset dir="/java/drivers">
			<include name="mysql-connector-java-*.jar" />
		</fileset>
	</path>

	<path id="dbdeploy.classpath">
		<fileset dir="${env.DB_DEPLOY_HOME}">
			<include name="dbdeploy-ant-*.jar" />
		</fileset>
		<path refid="mysql.classpath" />
	</path>

	<taskdef name="dbdeploy" classname="com.dbdeploy.AntTarget" classpathref="dbdeploy.classpath" />

	<taskdef resource="net/sf/antcontrib/antlib.xml" />

	<taskdef resource="VersionComparator.properties" />

	<!--
		- iterates over every sql file in the schema folder
		- then compares the version from the pom file to version in the sql file name
		- creates a variable called dbdeploy.lastChangeToApply and sets it to the last sequence number of sql files that should be applied
	-->
	<target name="prepare-update">
		<propertyregex override="yes" property="app.version" input="${app.version}" regexp="(\d\.\d\.\d)" select="\1" casesensitive="false" />
		<for param="file">
			<path>
				<fileset dir="./${db.schema}" includes="*.sql" />
			</path>
			<sequential>
				
				<propertyregex override="yes" property="file.num" input="@{file}" regexp=".*?${my.file.seperator}(\d*)-.*?" select="\1" casesensitive="false" />
				<propertyregex override="yes" property="sql.version" input="@{file}" regexp=".*?-(\d\.\d\.\d)-.*?" select="\1" casesensitive="false" />
				<versionComparator appVersion="${app.version}" sqlVersion="${sql.version}" resultVar="result.var" />
				<if>
					<equals arg1="${result.var}" arg2="true" />
					<then>
						<var name="dbdeploy.lastChangeToApply" value="${file.num}" />
					</then>
				</if>
			</sequential>
		</for>
	</target>


	<!--
		- creates the dbdeploy changelog table (only the first time)
	-->
	<target name="create-changelog-table">
		<echo>${db.url}${db.schema}</echo>
		<sql driver="${db.driver}" url="${db.url}" userid="${db.user}" password="${db.password}" classpathref="mysql.classpath">
			DROP DATABASE IF EXISTS ${db.schema};
			
			CREATE DATABASE IF NOT EXISTS ${db.schema};
			USE ${db.schema};
			CREATE TABLE IF NOT EXISTS changelog (
			  change_number BIGINT NOT NULL PRIMARY KEY,
			  complete_dt TIMESTAMP NOT NULL,
			  applied_by VARCHAR(100) NOT NULL,
			  description VARCHAR(500) NOT NULL
			);
		</sql>
	</target>

	<!--
		- THIS TASK IS USED IN PRD ENVIRONEMENTS (since we dont want to apply it right away)
		- first calls create-changelong-table task
		- then calls prepare update task
		- then calls actually dbdeploy to do the magic
		- creates out sql files that hold all the statements needed for this patricular version 
	-->
	<target name="create-database-scripts" description="generate a sql upgrade script" depends="create-changelog-table, prepare-update">
		<var name="app.db.script" value="database-schema-${db.schema}-${app.version}.sql" />
		<dbdeploy driver="${db.driver}" url="${db.url}${db.schema}" userid="${db.user}" password="${db.password}" dir="./${db.schema}" outputfile="./${app.db.script}" dbms="mysql" lastChangeToApply="${dbdeploy.lastChangeToApply}" />
	</target>


	<!--
		- THIS TASK IS USED IN DEV ENVIRONMENTS
		- first calls create-changelong-table task
		- then calls prepare update task
		- then calls actually dbdeploy to do the magic
		- creates out sql files that hold all the statements needed for this patricular version 
	-->
	<target name="create-and-apply-database" description="generate a sql upgrade script" depends="create-changelog-table, prepare-update">
		<var name="app.db.script" value="database-schema-${db.schema}-${app.version}.sql" />
		<dbdeploy driver="${db.driver}" url="${db.url}${db.schema}" userid="${db.user}" password="${db.password}" dir="./${db.schema}" lastChangeToApply="${dbdeploy.lastChangeToApply}" />
	</target>

	<!--
		- the task that is called from a maven script
		- requires following parameters: <argument>-Ddb.user=${db.user}</argument>
										 <argument>-Ddb.password=${db.password}</argument>
										 <argument>-Ddb.url=${db.url}</argument>
										 <argument>-Dapp.version=${project.version}</argument>
										 <argument>-Denvironment=${environment}</argument>
		- checks all folders in this directory that the build.xml (this file) is and iterates over them
		- for each folder call the create-and-apply-database or create-database-scripts task  (depending on the environment) to create the databases for each schema										 
	-->
	<target name="dbdeploy-maven">
		<if>
			<equals arg1="${env.OS}" arg2="Windows_NT"/>
			<then>
				<var name="my.file.seperator" value="\\" />
			</then>
			<else>
				<var name="my.file.seperator" value="/" />
			</else>
		</if>
		<for param="folder">
			<path>
				<dirset dir="${basedir}" />
			</path>
			<sequential>
				<var name="schema.name" value="-1" />
				
				<propertyregex override="yes" property="schema.name" input="@{folder}" regexp=".*?sql${my.file.seperator}(.*)" select="\1" casesensitive="false" />
				<if>
					<not>
						<equals arg1="${schema.name}" arg2="-1" />
					</not>
					<then>
						<if>
							<equals arg1="${environment}" arg2="dev" />
							<then>
								<antcall target="create-and-apply-database">
									<param name="db.schema" value="${schema.name}" />
								</antcall>
							</then>
							<else>
								<antcall target="create-database-scripts">
									<param name="db.schema" value="${schema.name}" />
								</antcall>
							</else>
						</if>
					</then>
				</if>
			</sequential>
		</for>
	</target>

	<!--
		- just for testing :)
	-->
	<target name="test">
		<echo>${db.user}</echo>
		<echo>${db.password}</echo>
		<echo>${db.url}</echo>
		<echo>${app.version}</echo>
	</target>
</project>
